"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/useFlappyBirdGame.ts":
/*!*************************************!*\
  !*** ./public/useFlappyBirdGame.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFlappyBirdGame: function() { return /* binding */ useFlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// Constants\nconst GRAVITY = 0.7;\nconst FLAP = -11;\nconst PIPE_WIDTH = 90;\nconst PIPE_SPACING = 230;\nconst BIRD_WIDTH = 50;\nconst BIRD_HEIGHT = 50;\nconst COIN_SIZE = 100;\nconst PIPE_SPAWN_INTERVAL = 1000; // 1 second\nconst HORIZONTAL_SPEED = 4;\nconst ROTATION_SPEED = 0.01;\nconst IDEAL_FRAME = 16.67; // ~60fps\n/** \r\n * Custom Hook: useFlappyBirdGame\r\n * Handles Flappy Bird game logic, including:\r\n * - Canvas setup\r\n * - Bird movement / flapping\r\n * - Pipe & coin spawning\r\n * - Score tracking\r\n * - Mobile/desktop input handling\r\n */ function useFlappyBirdGame(canvasRef, isPaused, autoStart) {\n    // -----------------------------\n    // 1. TOP-LEVEL HOOKS & REFS\n    // -----------------------------\n    // React State\n    const [highScore, setHighScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [currentScore, setCurrentScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Game Refs\n    const requestIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const birdYRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const birdVelocityRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const coinsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const gameOverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const gameStartedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Coin rotation & pipe spawn timer\n    const coinRotationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipeSpawnTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Last time stamp for frame-based movement\n    const lastTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Bird animation frames\n    let birdImages = [];\n    let pipeTop;\n    let pipeBottom;\n    let background;\n    let coinImage;\n    // Current Bird Frame\n    const currentBirdFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // For debouncing taps on mobile\n    const lastTapRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0); // <--- IMPORTANT: Declared at top-level\n    const DEBOUNCE_TIME = 300; // ms\n    // -------------------------------------------\n    // 2. IMAGE PRELOAD (only if window is defined)\n    // -------------------------------------------\n    if (true) {\n        const birdUp = new Image();\n        birdUp.src = \"/assets/redbird-upflap.png\";\n        const birdMid = new Image();\n        birdMid.src = \"/assets/redbird-midflap.png\";\n        const birdDown = new Image();\n        birdDown.src = \"/assets/redbird-downflap.png\";\n        birdImages = [\n            birdUp,\n            birdMid,\n            birdDown\n        ];\n        pipeTop = new Image();\n        pipeTop.src = \"/assets/TopTiny.png\";\n        pipeBottom = new Image();\n        pipeBottom.src = \"/assets/BottomTiny.png\";\n        background = new Image();\n        background.src = \"/assets/background-day.png\";\n        coinImage = new Image();\n        coinImage.src = \"/assets/CoinTiny.png\";\n    }\n    // -------------------------------------------\n    // 3. LOAD HIGH SCORE ON HOOK INIT\n    // -------------------------------------------\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (true) {\n            const storedHighScore = localStorage.getItem(\"highScore\");\n            if (storedHighScore) {\n                setHighScore(parseInt(storedHighScore, 10));\n            }\n        }\n    }, []);\n    // -------------------------------------------\n    // 4. MAIN useEffect: SETUP & TEARDOWN\n    // -------------------------------------------\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Utility: Ensure an image is fully loaded\n        const loadImage = (img)=>{\n            return new Promise((resolve, reject)=>{\n                if (img.complete) {\n                    resolve();\n                } else {\n                    img.onload = ()=>resolve();\n                    img.onerror = ()=>reject(new Error(\"Failed to load \".concat(img.src)));\n                }\n            });\n        };\n        // Load images, then initialize\n        const loadAssets = async ()=>{\n            try {\n                await Promise.all([\n                    ...birdImages.map((img)=>loadImage(img)),\n                    loadImage(pipeTop),\n                    loadImage(pipeBottom),\n                    loadImage(background),\n                    loadImage(coinImage)\n                ]);\n                initializeGame();\n            } catch (err) {\n                console.error(\"Error loading assets:\", err);\n            }\n        };\n        loadAssets();\n        // ---------------------------\n        // 4A: INITIALIZE / RESET GAME\n        // ---------------------------\n        function initializeGame() {\n            if (!canvasRef.current || !ctx) return;\n            canvasRef.current.width = 360;\n            canvasRef.current.height = 640;\n            drawStartScreen(ctx, canvasRef.current);\n        }\n        function resetGame() {\n            if (!canvasRef.current) return;\n            const { height } = canvasRef.current;\n            birdYRef.current = height / 3;\n            birdVelocityRef.current = 0;\n            pipesRef.current = [];\n            coinsRef.current = [];\n            setCurrentScore(0);\n            gameOverRef.current = false;\n            gameStartedRef.current = false;\n            coinRotationRef.current = 0;\n            pipeSpawnTimerRef.current = 0;\n            currentBirdFrameRef.current = 0;\n        }\n        // Desktop keyboard input\n        function handleKeyDown(e) {\n            if (e.key === \" \") {\n                flapOrStart();\n            }\n        }\n        window.addEventListener(\"keydown\", handleKeyDown);\n        // Handle resizing\n        function handleResize() {\n            if (!canvasRef.current) return;\n            canvasRef.current.width = 360;\n            canvasRef.current.height = 640;\n            if (!gameStartedRef.current && !gameOverRef.current && ctx) {\n                drawStartScreen(ctx, canvasRef.current);\n            }\n        }\n        window.addEventListener(\"resize\", handleResize);\n        // Start or flap logic\n        function flapOrStart() {\n            if (!gameStartedRef.current && !gameOverRef.current) {\n                startGame();\n            } else if (gameOverRef.current) {\n                startGame();\n            } else {\n                birdVelocityRef.current = FLAP;\n                flapAnimation();\n            }\n        }\n        function startGame() {\n            resetGame();\n            gameStartedRef.current = true;\n            lastTimeRef.current = performance.now();\n            requestIdRef.current = requestAnimationFrame(animate);\n        }\n        function flapAnimation() {\n            currentBirdFrameRef.current = 1;\n            setTimeout(()=>{\n                currentBirdFrameRef.current = 2;\n                setTimeout(()=>{\n                    currentBirdFrameRef.current = 0;\n                }, 170);\n            }, 170);\n        }\n        // ---------------------------------------\n        // 4B: GAME LOOP (ANIMATE)\n        // ---------------------------------------\n        function animate(currentTime) {\n            if (!gameStartedRef.current) {\n                requestIdRef.current = requestAnimationFrame(animate);\n                return;\n            }\n            if (isPaused) {\n                requestIdRef.current = requestAnimationFrame(animate);\n                return;\n            }\n            if (!canvasRef.current) return;\n            const context = canvasRef.current.getContext(\"2d\");\n            if (!context) return;\n            const now = currentTime !== null && currentTime !== void 0 ? currentTime : performance.now();\n            const deltaTime = now - lastTimeRef.current;\n            lastTimeRef.current = now;\n            updateGameState(canvasRef.current, deltaTime);\n            draw(context, canvasRef.current);\n            if (!gameOverRef.current) {\n                requestIdRef.current = requestAnimationFrame(animate);\n            } else {\n                drawGameOverScreen(context, canvasRef.current);\n            }\n        }\n        function updateGameState(canvas, deltaTime) {\n            const scale = deltaTime / IDEAL_FRAME;\n            // Gravity\n            birdVelocityRef.current += GRAVITY * scale;\n            birdYRef.current += birdVelocityRef.current * scale;\n            // Pipe spawn\n            pipeSpawnTimerRef.current += deltaTime;\n            if (pipeSpawnTimerRef.current >= PIPE_SPAWN_INTERVAL) {\n                pipeSpawnTimerRef.current -= PIPE_SPAWN_INTERVAL;\n                createPipe(canvas);\n            }\n            // Move pipes & coins\n            movePipesAndCoins(scale);\n            // Rotate coin\n            coinRotationRef.current += ROTATION_SPEED * scale;\n            if (coinRotationRef.current >= 1) {\n                coinRotationRef.current = 0;\n            }\n            // Collisions\n            if (checkCollisions(canvas)) {\n                gameOverRef.current = true;\n                return;\n            }\n            // Coin collection\n            checkCoinCollection();\n            // Score\n            updateScore();\n        }\n        // ---------------------------------------\n        // 4C: DRAW FUNCTIONS\n        // ---------------------------------------\n        function draw(ctx, canvas) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawBackground(ctx, canvas);\n            drawBird(ctx);\n            drawPipes(ctx);\n            drawCoins(ctx);\n        }\n        function drawStartScreen(ctx, canvas) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawBackground(ctx, canvas);\n            ctx.font = \"bold 30px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = \"#ffffff\";\n            ctx.shadowColor = \"black\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(\"Press Space to Start\", canvas.width / 2, canvas.height / 2);\n        }\n        function drawGameOverScreen(ctx, canvas) {\n            ctx.fillStyle = \"#ffcc00\";\n            ctx.font = \"bold 50px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.shadowColor = \"black\";\n            ctx.shadowBlur = 10;\n            ctx.fillText(\"Game Over!\", canvas.width / 2, canvas.height / 2 - 40);\n            ctx.fillStyle = \"#ffffff\";\n            ctx.font = \"bold 30px Arial\";\n            ctx.fillText(\"Press Space to Restart\", canvas.width / 2, canvas.height / 2 + 20);\n        }\n        function drawBackground(ctx, canvas) {\n            ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\n        }\n        function drawBird(ctx) {\n            const currentImage = birdImages[currentBirdFrameRef.current];\n            if (currentImage.complete) {\n                ctx.drawImage(currentImage, 100, birdYRef.current, BIRD_WIDTH, BIRD_HEIGHT);\n            }\n        }\n        function drawPipes(ctx) {\n            for (const pipe of pipesRef.current){\n                ctx.drawImage(pipeTop, pipe.x, 0, PIPE_WIDTH, pipe.topHeight);\n                ctx.drawImage(pipeBottom, pipe.x, pipe.bottomY, PIPE_WIDTH, pipe.bottomHeight);\n            }\n        }\n        function drawCoins(ctx) {\n            const scaleX = Math.abs(Math.cos(coinRotationRef.current * Math.PI * 2));\n            const halfSize = COIN_SIZE / 2;\n            for (const coin of coinsRef.current){\n                if (!coin.collected) {\n                    ctx.save();\n                    ctx.translate(coin.x + halfSize, coin.y + halfSize);\n                    ctx.scale(scaleX, 1);\n                    ctx.drawImage(coinImage, -halfSize, -halfSize, COIN_SIZE, COIN_SIZE);\n                    ctx.restore();\n                }\n            }\n        }\n        // ---------------------------------------\n        // 4D: GAME LOGIC FUNCTIONS\n        // ---------------------------------------\n        function createPipe(canvas) {\n            const pipeHeight = Math.random() * (canvas.height - PIPE_SPACING - 100) + 50;\n            const bottomY = pipeHeight + PIPE_SPACING;\n            pipesRef.current.push({\n                x: canvas.width,\n                topHeight: pipeHeight,\n                bottomY,\n                bottomHeight: canvas.height - bottomY,\n                scored: false\n            });\n            // 50% chance for coin\n            if (Math.random() > 0.5) {\n                coinsRef.current.push({\n                    x: canvas.width + PIPE_WIDTH / 2 - COIN_SIZE / 2,\n                    y: pipeHeight + PIPE_SPACING / 2 - COIN_SIZE / 2,\n                    width: COIN_SIZE,\n                    height: COIN_SIZE,\n                    collected: false\n                });\n            }\n        }\n        function movePipesAndCoins(scale) {\n            // Move pipes to the left\n            for (const pipe of pipesRef.current){\n                pipe.x -= HORIZONTAL_SPEED * scale;\n            }\n            pipesRef.current = pipesRef.current.filter((p)=>p.x + PIPE_WIDTH > 0);\n            // Move coins\n            for (const coin of coinsRef.current){\n                coin.x -= HORIZONTAL_SPEED * scale;\n            }\n            coinsRef.current = coinsRef.current.filter((c)=>c.x + c.width > 0 && !c.collected);\n        }\n        function checkCollisions(canvas) {\n            // Bird vs boundaries\n            if (birdYRef.current < 0 || birdYRef.current + BIRD_HEIGHT > canvas.height) {\n                return true;\n            }\n            const birdLeft = 100;\n            const birdRight = birdLeft + BIRD_WIDTH;\n            const birdTop = birdYRef.current;\n            const birdBottom = birdYRef.current + BIRD_HEIGHT;\n            // Bird vs pipes\n            for (const pipe of pipesRef.current){\n                const withinPipeX = birdRight > pipe.x && birdLeft < pipe.x + PIPE_WIDTH;\n                const withinPipeY = birdTop < pipe.topHeight || birdBottom > pipe.bottomY;\n                if (withinPipeX && withinPipeY) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function checkCoinCollection() {\n            const birdLeft = 100;\n            const birdRight = birdLeft + BIRD_WIDTH;\n            const birdTop = birdYRef.current;\n            const birdBottom = birdYRef.current + BIRD_HEIGHT;\n            for (const coin of coinsRef.current){\n                if (!coin.collected) {\n                    const coinLeft = coin.x;\n                    const coinRight = coin.x + coin.width;\n                    const coinTop = coin.y;\n                    const coinBottom = coin.y + coin.height;\n                    if (birdRight > coinLeft && birdLeft < coinRight && birdBottom > coinTop && birdTop < coinBottom) {\n                        // Collect coin\n                        coin.collected = true;\n                        setCurrentScore((prev)=>{\n                            const newScore = prev + 5;\n                            setHighScore((prevHigh)=>Math.max(prevHigh, newScore));\n                            return newScore;\n                        });\n                    }\n                }\n            }\n        }\n        function updateScore() {\n            for (const pipe of pipesRef.current){\n                // +1 score once the pipe is fully behind x=100\n                if (!pipe.scored && pipe.x + PIPE_WIDTH < 100) {\n                    pipe.scored = true;\n                    setCurrentScore((prev)=>{\n                        const newScore = prev + 1;\n                        setHighScore((prevHigh)=>{\n                            const updatedHigh = Math.max(prevHigh, newScore);\n                            if (true) {\n                                localStorage.setItem(\"highScore\", updatedHigh.toString());\n                            }\n                            return updatedHigh;\n                        });\n                        return newScore;\n                    });\n                }\n            }\n        }\n        // ---------------------------------------\n        // 4E: MOBILE / MOUSE INPUT (DEBOUNCED)\n        // ---------------------------------------\n        function handleCanvasTap(e) {\n            e.preventDefault();\n            const now = Date.now();\n            if (now - lastTapRef.current < DEBOUNCE_TIME) {\n                return; // ignore double taps\n            }\n            lastTapRef.current = now;\n            flapOrStart();\n        }\n        function addCanvasListeners() {\n            canvas.addEventListener(\"touchstart\", handleCanvasTap);\n            canvas.addEventListener(\"mousedown\", handleCanvasTap);\n        }\n        function removeCanvasListeners() {\n            canvas.removeEventListener(\"touchstart\", handleCanvasTap);\n            canvas.removeEventListener(\"mousedown\", handleCanvasTap);\n        }\n        addCanvasListeners();\n        // Auto-start if requested\n        if (autoStart) {\n            flapOrStart();\n        }\n        // CLEANUP on unmount\n        return ()=>{\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"resize\", handleResize);\n            removeCanvasListeners();\n            if (requestIdRef.current) {\n                cancelAnimationFrame(requestIdRef.current);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        canvasRef,\n        isPaused,\n        autoStart\n    ]); // End of big useEffect\n    // -----------------------------\n    // 5. RETURN GAME STATS\n    // -----------------------------\n    return {\n        highScore,\n        currentScore\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxhQUFhNEIsT0FBTztZQUMzQztRQUNGO0lBQ0EsdURBQXVEO0lBQ3pELEdBQUc7UUFBQ25DO1FBQVdDO1FBQVVDO0tBQVUsR0FBRyx1QkFBdUI7SUFFN0QsZ0NBQWdDO0lBQ2hDLHVCQUF1QjtJQUN2QixnQ0FBZ0M7SUFDaEMsT0FBTztRQUNMQztRQUNBRTtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcHVibGljL3VzZUZsYXBweUJpcmRHYW1lLnRzPzVjNzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG4vLyBUeXBlcyBmb3IgZ2FtZSBvYmplY3RzXHJcbmludGVyZmFjZSBQaXBlIHtcclxuICB4OiBudW1iZXI7XHJcbiAgdG9wSGVpZ2h0OiBudW1iZXI7XHJcbiAgYm90dG9tWTogbnVtYmVyO1xyXG4gIGJvdHRvbUhlaWdodDogbnVtYmVyO1xyXG4gIHNjb3JlZDogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIENvaW4ge1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbiAgd2lkdGg6IG51bWJlcjtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxuICBjb2xsZWN0ZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8vIENvbnN0YW50c1xyXG5jb25zdCBHUkFWSVRZID0gMC43O1xyXG5jb25zdCBGTEFQID0gLTExO1xyXG5jb25zdCBQSVBFX1dJRFRIID0gOTA7XHJcbmNvbnN0IFBJUEVfU1BBQ0lORyA9IDIzMDtcclxuY29uc3QgQklSRF9XSURUSCA9IDUwO1xyXG5jb25zdCBCSVJEX0hFSUdIVCA9IDUwO1xyXG5jb25zdCBDT0lOX1NJWkUgPSAxMDA7XHJcblxyXG5jb25zdCBQSVBFX1NQQVdOX0lOVEVSVkFMID0gMTAwMDsgLy8gMSBzZWNvbmRcclxuY29uc3QgSE9SSVpPTlRBTF9TUEVFRCA9IDQ7XHJcbmNvbnN0IFJPVEFUSU9OX1NQRUVEID0gMC4wMTtcclxuY29uc3QgSURFQUxfRlJBTUUgPSAxNi42NzsgLy8gfjYwZnBzXHJcblxyXG4vKiogXHJcbiAqIEN1c3RvbSBIb29rOiB1c2VGbGFwcHlCaXJkR2FtZVxyXG4gKiBIYW5kbGVzIEZsYXBweSBCaXJkIGdhbWUgbG9naWMsIGluY2x1ZGluZzpcclxuICogLSBDYW52YXMgc2V0dXBcclxuICogLSBCaXJkIG1vdmVtZW50IC8gZmxhcHBpbmdcclxuICogLSBQaXBlICYgY29pbiBzcGF3bmluZ1xyXG4gKiAtIFNjb3JlIHRyYWNraW5nXHJcbiAqIC0gTW9iaWxlL2Rlc2t0b3AgaW5wdXQgaGFuZGxpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VGbGFwcHlCaXJkR2FtZShcclxuICBjYW52YXNSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MQ2FudmFzRWxlbWVudD4sXHJcbiAgaXNQYXVzZWQ6IGJvb2xlYW4sXHJcbiAgYXV0b1N0YXJ0OiBib29sZWFuXHJcbikge1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gMS4gVE9QLUxFVkVMIEhPT0tTICYgUkVGU1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgXHJcbiAgLy8gUmVhY3QgU3RhdGVcclxuICBjb25zdCBbaGlnaFNjb3JlLCBzZXRIaWdoU2NvcmVdID0gdXNlU3RhdGUoMCk7XHJcbiAgY29uc3QgW2N1cnJlbnRTY29yZSwgc2V0Q3VycmVudFNjb3JlXSA9IHVzZVN0YXRlKDApO1xyXG5cclxuICAvLyBHYW1lIFJlZnNcclxuICBjb25zdCByZXF1ZXN0SWRSZWYgPSB1c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgYmlyZFlSZWYgPSB1c2VSZWY8bnVtYmVyPigwKTtcclxuICBjb25zdCBiaXJkVmVsb2NpdHlSZWYgPSB1c2VSZWY8bnVtYmVyPigwKTtcclxuICBjb25zdCBwaXBlc1JlZiA9IHVzZVJlZjxQaXBlW10+KFtdKTtcclxuICBjb25zdCBjb2luc1JlZiA9IHVzZVJlZjxDb2luW10+KFtdKTtcclxuICBjb25zdCBnYW1lT3ZlclJlZiA9IHVzZVJlZjxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgZ2FtZVN0YXJ0ZWRSZWYgPSB1c2VSZWY8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAvLyBDb2luIHJvdGF0aW9uICYgcGlwZSBzcGF3biB0aW1lclxyXG4gIGNvbnN0IGNvaW5Sb3RhdGlvblJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xyXG4gIGNvbnN0IHBpcGVTcGF3blRpbWVyUmVmID0gdXNlUmVmPG51bWJlcj4oMCk7XHJcblxyXG4gIC8vIExhc3QgdGltZSBzdGFtcCBmb3IgZnJhbWUtYmFzZWQgbW92ZW1lbnRcclxuICBjb25zdCBsYXN0VGltZVJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xyXG5cclxuICAvLyBCaXJkIGFuaW1hdGlvbiBmcmFtZXNcclxuICBsZXQgYmlyZEltYWdlczogSFRNTEltYWdlRWxlbWVudFtdID0gW107XHJcbiAgbGV0IHBpcGVUb3A6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgbGV0IHBpcGVCb3R0b206IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgbGV0IGJhY2tncm91bmQ6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgbGV0IGNvaW5JbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuXHJcbiAgLy8gQ3VycmVudCBCaXJkIEZyYW1lXHJcbiAgY29uc3QgY3VycmVudEJpcmRGcmFtZVJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xyXG5cclxuICAvLyBGb3IgZGVib3VuY2luZyB0YXBzIG9uIG1vYmlsZVxyXG4gIGNvbnN0IGxhc3RUYXBSZWYgPSB1c2VSZWY8bnVtYmVyPigwKTsgLy8gPC0tLSBJTVBPUlRBTlQ6IERlY2xhcmVkIGF0IHRvcC1sZXZlbFxyXG4gIGNvbnN0IERFQk9VTkNFX1RJTUUgPSAzMDA7IC8vIG1zXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyAyLiBJTUFHRSBQUkVMT0FEIChvbmx5IGlmIHdpbmRvdyBpcyBkZWZpbmVkKVxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgY29uc3QgYmlyZFVwID0gbmV3IEltYWdlKCk7XHJcbiAgICBiaXJkVXAuc3JjID0gXCIvYXNzZXRzL3JlZGJpcmQtdXBmbGFwLnBuZ1wiO1xyXG5cclxuICAgIGNvbnN0IGJpcmRNaWQgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGJpcmRNaWQuc3JjID0gXCIvYXNzZXRzL3JlZGJpcmQtbWlkZmxhcC5wbmdcIjtcclxuXHJcbiAgICBjb25zdCBiaXJkRG93biA9IG5ldyBJbWFnZSgpO1xyXG4gICAgYmlyZERvd24uc3JjID0gXCIvYXNzZXRzL3JlZGJpcmQtZG93bmZsYXAucG5nXCI7XHJcblxyXG4gICAgYmlyZEltYWdlcyA9IFtiaXJkVXAsIGJpcmRNaWQsIGJpcmREb3duXTtcclxuXHJcbiAgICBwaXBlVG9wID0gbmV3IEltYWdlKCk7XHJcbiAgICBwaXBlVG9wLnNyYyA9IFwiL2Fzc2V0cy9Ub3BUaW55LnBuZ1wiO1xyXG5cclxuICAgIHBpcGVCb3R0b20gPSBuZXcgSW1hZ2UoKTtcclxuICAgIHBpcGVCb3R0b20uc3JjID0gXCIvYXNzZXRzL0JvdHRvbVRpbnkucG5nXCI7XHJcblxyXG4gICAgYmFja2dyb3VuZCA9IG5ldyBJbWFnZSgpO1xyXG4gICAgYmFja2dyb3VuZC5zcmMgPSBcIi9hc3NldHMvYmFja2dyb3VuZC1kYXkucG5nXCI7XHJcblxyXG4gICAgY29pbkltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBjb2luSW1hZ2Uuc3JjID0gXCIvYXNzZXRzL0NvaW5UaW55LnBuZ1wiO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDMuIExPQUQgSElHSCBTQ09SRSBPTiBIT09LIElOSVRcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlZEhpZ2hTY29yZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaGlnaFNjb3JlXCIpO1xyXG4gICAgICBpZiAoc3RvcmVkSGlnaFNjb3JlKSB7XHJcbiAgICAgICAgc2V0SGlnaFNjb3JlKHBhcnNlSW50KHN0b3JlZEhpZ2hTY29yZSwgMTApKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIDQuIE1BSU4gdXNlRWZmZWN0OiBTRVRVUCAmIFRFQVJET1dOXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBjYW52YXNSZWYuY3VycmVudDtcclxuICAgIGlmICghY2FudmFzKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIGlmICghY3R4KSByZXR1cm47XHJcblxyXG4gICAgLy8gVXRpbGl0eTogRW5zdXJlIGFuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZFxyXG4gICAgY29uc3QgbG9hZEltYWdlID0gKGltZzogSFRNTEltYWdlRWxlbWVudCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGlmIChpbWcuY29tcGxldGUpIHtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoKTtcclxuICAgICAgICAgIGltZy5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgJHtpbWcuc3JjfWApKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBMb2FkIGltYWdlcywgdGhlbiBpbml0aWFsaXplXHJcbiAgICBjb25zdCBsb2FkQXNzZXRzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgIC4uLmJpcmRJbWFnZXMubWFwKChpbWcpID0+IGxvYWRJbWFnZShpbWcpKSxcclxuICAgICAgICAgIGxvYWRJbWFnZShwaXBlVG9wKSxcclxuICAgICAgICAgIGxvYWRJbWFnZShwaXBlQm90dG9tKSxcclxuICAgICAgICAgIGxvYWRJbWFnZShiYWNrZ3JvdW5kKSxcclxuICAgICAgICAgIGxvYWRJbWFnZShjb2luSW1hZ2UpLFxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIGluaXRpYWxpemVHYW1lKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGFzc2V0czpcIiwgZXJyKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGxvYWRBc3NldHMoKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIDRBOiBJTklUSUFMSVpFIC8gUkVTRVQgR0FNRVxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplR2FtZSgpIHtcclxuICAgICAgaWYgKCFjYW52YXNSZWYuY3VycmVudCB8fCAhY3R4KSByZXR1cm47XHJcbiAgICAgIGNhbnZhc1JlZi5jdXJyZW50LndpZHRoID0gMzYwO1xyXG4gICAgICBjYW52YXNSZWYuY3VycmVudC5oZWlnaHQgPSA2NDA7XHJcbiAgICAgIGRyYXdTdGFydFNjcmVlbihjdHgsIGNhbnZhc1JlZi5jdXJyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXNldEdhbWUoKSB7XHJcbiAgICAgIGlmICghY2FudmFzUmVmLmN1cnJlbnQpIHJldHVybjtcclxuICAgICAgY29uc3QgeyBoZWlnaHQgfSA9IGNhbnZhc1JlZi5jdXJyZW50O1xyXG4gICAgICBiaXJkWVJlZi5jdXJyZW50ID0gaGVpZ2h0IC8gMztcclxuICAgICAgYmlyZFZlbG9jaXR5UmVmLmN1cnJlbnQgPSAwO1xyXG4gICAgICBwaXBlc1JlZi5jdXJyZW50ID0gW107XHJcbiAgICAgIGNvaW5zUmVmLmN1cnJlbnQgPSBbXTtcclxuICAgICAgc2V0Q3VycmVudFNjb3JlKDApO1xyXG4gICAgICBnYW1lT3ZlclJlZi5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgIGdhbWVTdGFydGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgY29pblJvdGF0aW9uUmVmLmN1cnJlbnQgPSAwO1xyXG4gICAgICBwaXBlU3Bhd25UaW1lclJlZi5jdXJyZW50ID0gMDtcclxuICAgICAgY3VycmVudEJpcmRGcmFtZVJlZi5jdXJyZW50ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXNrdG9wIGtleWJvYXJkIGlucHV0XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgaWYgKGUua2V5ID09PSBcIiBcIikge1xyXG4gICAgICAgIGZsYXBPclN0YXJ0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcclxuXHJcbiAgICAvLyBIYW5kbGUgcmVzaXppbmdcclxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc2l6ZSgpIHtcclxuICAgICAgaWYgKCFjYW52YXNSZWYuY3VycmVudCkgcmV0dXJuO1xyXG4gICAgICBjYW52YXNSZWYuY3VycmVudC53aWR0aCA9IDM2MDtcclxuICAgICAgY2FudmFzUmVmLmN1cnJlbnQuaGVpZ2h0ID0gNjQwO1xyXG4gICAgICBpZiAoIWdhbWVTdGFydGVkUmVmLmN1cnJlbnQgJiYgIWdhbWVPdmVyUmVmLmN1cnJlbnQgJiYgY3R4KSB7XHJcbiAgICAgICAgZHJhd1N0YXJ0U2NyZWVuKGN0eCwgY2FudmFzUmVmLmN1cnJlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVSZXNpemUpO1xyXG5cclxuICAgIC8vIFN0YXJ0IG9yIGZsYXAgbG9naWNcclxuICAgIGZ1bmN0aW9uIGZsYXBPclN0YXJ0KCkge1xyXG4gICAgICBpZiAoIWdhbWVTdGFydGVkUmVmLmN1cnJlbnQgJiYgIWdhbWVPdmVyUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBzdGFydEdhbWUoKTtcclxuICAgICAgfSBlbHNlIGlmIChnYW1lT3ZlclJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgc3RhcnRHYW1lKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYmlyZFZlbG9jaXR5UmVmLmN1cnJlbnQgPSBGTEFQO1xyXG4gICAgICAgIGZsYXBBbmltYXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcclxuICAgICAgcmVzZXRHYW1lKCk7XHJcbiAgICAgIGdhbWVTdGFydGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICBsYXN0VGltZVJlZi5jdXJyZW50ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgIHJlcXVlc3RJZFJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZsYXBBbmltYXRpb24oKSB7XHJcbiAgICAgIGN1cnJlbnRCaXJkRnJhbWVSZWYuY3VycmVudCA9IDE7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGN1cnJlbnRCaXJkRnJhbWVSZWYuY3VycmVudCA9IDI7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBjdXJyZW50QmlyZEZyYW1lUmVmLmN1cnJlbnQgPSAwO1xyXG4gICAgICAgIH0sIDE3MCk7XHJcbiAgICAgIH0sIDE3MCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyA0QjogR0FNRSBMT09QIChBTklNQVRFKVxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBmdW5jdGlvbiBhbmltYXRlKGN1cnJlbnRUaW1lPzogbnVtYmVyKSB7XHJcbiAgICAgIGlmICghZ2FtZVN0YXJ0ZWRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHJlcXVlc3RJZFJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXNQYXVzZWQpIHtcclxuICAgICAgICByZXF1ZXN0SWRSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFjYW52YXNSZWYuY3VycmVudCkgcmV0dXJuO1xyXG4gICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzUmVmLmN1cnJlbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICBpZiAoIWNvbnRleHQpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IG5vdyA9IGN1cnJlbnRUaW1lID8/IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSBub3cgLSBsYXN0VGltZVJlZi5jdXJyZW50O1xyXG4gICAgICBsYXN0VGltZVJlZi5jdXJyZW50ID0gbm93O1xyXG5cclxuICAgICAgdXBkYXRlR2FtZVN0YXRlKGNhbnZhc1JlZi5jdXJyZW50LCBkZWx0YVRpbWUpO1xyXG4gICAgICBkcmF3KGNvbnRleHQsIGNhbnZhc1JlZi5jdXJyZW50KTtcclxuXHJcbiAgICAgIGlmICghZ2FtZU92ZXJSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHJlcXVlc3RJZFJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRyYXdHYW1lT3ZlclNjcmVlbihjb250ZXh0LCBjYW52YXNSZWYuY3VycmVudCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVHYW1lU3RhdGUoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgY29uc3Qgc2NhbGUgPSBkZWx0YVRpbWUgLyBJREVBTF9GUkFNRTtcclxuXHJcbiAgICAgIC8vIEdyYXZpdHlcclxuICAgICAgYmlyZFZlbG9jaXR5UmVmLmN1cnJlbnQgKz0gR1JBVklUWSAqIHNjYWxlO1xyXG4gICAgICBiaXJkWVJlZi5jdXJyZW50ICs9IGJpcmRWZWxvY2l0eVJlZi5jdXJyZW50ICogc2NhbGU7XHJcblxyXG4gICAgICAvLyBQaXBlIHNwYXduXHJcbiAgICAgIHBpcGVTcGF3blRpbWVyUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICBpZiAocGlwZVNwYXduVGltZXJSZWYuY3VycmVudCA+PSBQSVBFX1NQQVdOX0lOVEVSVkFMKSB7XHJcbiAgICAgICAgcGlwZVNwYXduVGltZXJSZWYuY3VycmVudCAtPSBQSVBFX1NQQVdOX0lOVEVSVkFMO1xyXG4gICAgICAgIGNyZWF0ZVBpcGUoY2FudmFzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTW92ZSBwaXBlcyAmIGNvaW5zXHJcbiAgICAgIG1vdmVQaXBlc0FuZENvaW5zKHNjYWxlKTtcclxuXHJcbiAgICAgIC8vIFJvdGF0ZSBjb2luXHJcbiAgICAgIGNvaW5Sb3RhdGlvblJlZi5jdXJyZW50ICs9IFJPVEFUSU9OX1NQRUVEICogc2NhbGU7XHJcbiAgICAgIGlmIChjb2luUm90YXRpb25SZWYuY3VycmVudCA+PSAxKSB7XHJcbiAgICAgICAgY29pblJvdGF0aW9uUmVmLmN1cnJlbnQgPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDb2xsaXNpb25zXHJcbiAgICAgIGlmIChjaGVja0NvbGxpc2lvbnMoY2FudmFzKSkge1xyXG4gICAgICAgIGdhbWVPdmVyUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29pbiBjb2xsZWN0aW9uXHJcbiAgICAgIGNoZWNrQ29pbkNvbGxlY3Rpb24oKTtcclxuXHJcbiAgICAgIC8vIFNjb3JlXHJcbiAgICAgIHVwZGF0ZVNjb3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyA0QzogRFJBVyBGVU5DVElPTlNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgZnVuY3Rpb24gZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIGRyYXdCYWNrZ3JvdW5kKGN0eCwgY2FudmFzKTtcclxuICAgICAgZHJhd0JpcmQoY3R4KTtcclxuICAgICAgZHJhd1BpcGVzKGN0eCk7XHJcbiAgICAgIGRyYXdDb2lucyhjdHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdTdGFydFNjcmVlbihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIGRyYXdCYWNrZ3JvdW5kKGN0eCwgY2FudmFzKTtcclxuXHJcbiAgICAgIGN0eC5mb250ID0gXCJib2xkIDMwcHggQXJpYWxcIjtcclxuICAgICAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNmZmZmZmZcIjtcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gXCJibGFja1wiO1xyXG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuXHJcbiAgICAgIGN0eC5maWxsVGV4dChcIlByZXNzIFNwYWNlIHRvIFN0YXJ0XCIsIGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3R2FtZU92ZXJTY3JlZW4oY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiI2ZmY2MwMFwiO1xyXG4gICAgICBjdHguZm9udCA9IFwiYm9sZCA1MHB4IEFyaWFsXCI7XHJcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gXCJibGFja1wiO1xyXG4gICAgICBjdHguc2hhZG93Qmx1ciA9IDEwO1xyXG5cclxuICAgICAgY3R4LmZpbGxUZXh0KFwiR2FtZSBPdmVyIVwiLCBjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiAtIDQwKTtcclxuXHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNmZmZmZmZcIjtcclxuICAgICAgY3R4LmZvbnQgPSBcImJvbGQgMzBweCBBcmlhbFwiO1xyXG4gICAgICBjdHguZmlsbFRleHQoXHJcbiAgICAgICAgXCJQcmVzcyBTcGFjZSB0byBSZXN0YXJ0XCIsXHJcbiAgICAgICAgY2FudmFzLndpZHRoIC8gMixcclxuICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMiArIDIwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd0JhY2tncm91bmQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgY3R4LmRyYXdJbWFnZShiYWNrZ3JvdW5kLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdCaXJkKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRJbWFnZSA9IGJpcmRJbWFnZXNbY3VycmVudEJpcmRGcmFtZVJlZi5jdXJyZW50XTtcclxuICAgICAgaWYgKGN1cnJlbnRJbWFnZS5jb21wbGV0ZSkge1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoY3VycmVudEltYWdlLCAxMDAsIGJpcmRZUmVmLmN1cnJlbnQsIEJJUkRfV0lEVEgsIEJJUkRfSEVJR0hUKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdQaXBlcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICBmb3IgKGNvbnN0IHBpcGUgb2YgcGlwZXNSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UocGlwZVRvcCwgcGlwZS54LCAwLCBQSVBFX1dJRFRILCBwaXBlLnRvcEhlaWdodCk7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShwaXBlQm90dG9tLCBwaXBlLngsIHBpcGUuYm90dG9tWSwgUElQRV9XSURUSCwgcGlwZS5ib3R0b21IZWlnaHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd0NvaW5zKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgIGNvbnN0IHNjYWxlWCA9IE1hdGguYWJzKE1hdGguY29zKGNvaW5Sb3RhdGlvblJlZi5jdXJyZW50ICogTWF0aC5QSSAqIDIpKTtcclxuICAgICAgY29uc3QgaGFsZlNpemUgPSBDT0lOX1NJWkUgLyAyO1xyXG4gICAgICBmb3IgKGNvbnN0IGNvaW4gb2YgY29pbnNSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGlmICghY29pbi5jb2xsZWN0ZWQpIHtcclxuICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICBjdHgudHJhbnNsYXRlKGNvaW4ueCArIGhhbGZTaXplLCBjb2luLnkgKyBoYWxmU2l6ZSk7XHJcbiAgICAgICAgICBjdHguc2NhbGUoc2NhbGVYLCAxKTtcclxuICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoY29pbkltYWdlLCAtaGFsZlNpemUsIC1oYWxmU2l6ZSwgQ09JTl9TSVpFLCBDT0lOX1NJWkUpO1xyXG4gICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIDREOiBHQU1FIExPR0lDIEZVTkNUSU9OU1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVQaXBlKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgY29uc3QgcGlwZUhlaWdodCA9IE1hdGgucmFuZG9tKCkgKiAoY2FudmFzLmhlaWdodCAtIFBJUEVfU1BBQ0lORyAtIDEwMCkgKyA1MDtcclxuICAgICAgY29uc3QgYm90dG9tWSA9IHBpcGVIZWlnaHQgKyBQSVBFX1NQQUNJTkc7XHJcbiAgICAgIHBpcGVzUmVmLmN1cnJlbnQucHVzaCh7XHJcbiAgICAgICAgeDogY2FudmFzLndpZHRoLFxyXG4gICAgICAgIHRvcEhlaWdodDogcGlwZUhlaWdodCxcclxuICAgICAgICBib3R0b21ZLFxyXG4gICAgICAgIGJvdHRvbUhlaWdodDogY2FudmFzLmhlaWdodCAtIGJvdHRvbVksXHJcbiAgICAgICAgc2NvcmVkOiBmYWxzZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyA1MCUgY2hhbmNlIGZvciBjb2luXHJcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XHJcbiAgICAgICAgY29pbnNSZWYuY3VycmVudC5wdXNoKHtcclxuICAgICAgICAgIHg6IGNhbnZhcy53aWR0aCArIFBJUEVfV0lEVEggLyAyIC0gQ09JTl9TSVpFIC8gMixcclxuICAgICAgICAgIHk6IHBpcGVIZWlnaHQgKyBQSVBFX1NQQUNJTkcgLyAyIC0gQ09JTl9TSVpFIC8gMixcclxuICAgICAgICAgIHdpZHRoOiBDT0lOX1NJWkUsXHJcbiAgICAgICAgICBoZWlnaHQ6IENPSU5fU0laRSxcclxuICAgICAgICAgIGNvbGxlY3RlZDogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb3ZlUGlwZXNBbmRDb2lucyhzY2FsZTogbnVtYmVyKSB7XHJcbiAgICAgIC8vIE1vdmUgcGlwZXMgdG8gdGhlIGxlZnRcclxuICAgICAgZm9yIChjb25zdCBwaXBlIG9mIHBpcGVzUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBwaXBlLnggLT0gSE9SSVpPTlRBTF9TUEVFRCAqIHNjYWxlO1xyXG4gICAgICB9XHJcbiAgICAgIHBpcGVzUmVmLmN1cnJlbnQgPSBwaXBlc1JlZi5jdXJyZW50LmZpbHRlcigocCkgPT4gcC54ICsgUElQRV9XSURUSCA+IDApO1xyXG5cclxuICAgICAgLy8gTW92ZSBjb2luc1xyXG4gICAgICBmb3IgKGNvbnN0IGNvaW4gb2YgY29pbnNSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNvaW4ueCAtPSBIT1JJWk9OVEFMX1NQRUVEICogc2NhbGU7XHJcbiAgICAgIH1cclxuICAgICAgY29pbnNSZWYuY3VycmVudCA9IGNvaW5zUmVmLmN1cnJlbnQuZmlsdGVyKFxyXG4gICAgICAgIChjKSA9PiBjLnggKyBjLndpZHRoID4gMCAmJiAhYy5jb2xsZWN0ZWRcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0NvbGxpc2lvbnMoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gICAgICAvLyBCaXJkIHZzIGJvdW5kYXJpZXNcclxuICAgICAgaWYgKGJpcmRZUmVmLmN1cnJlbnQgPCAwIHx8IGJpcmRZUmVmLmN1cnJlbnQgKyBCSVJEX0hFSUdIVCA+IGNhbnZhcy5oZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgYmlyZExlZnQgPSAxMDA7XHJcbiAgICAgIGNvbnN0IGJpcmRSaWdodCA9IGJpcmRMZWZ0ICsgQklSRF9XSURUSDtcclxuICAgICAgY29uc3QgYmlyZFRvcCA9IGJpcmRZUmVmLmN1cnJlbnQ7XHJcbiAgICAgIGNvbnN0IGJpcmRCb3R0b20gPSBiaXJkWVJlZi5jdXJyZW50ICsgQklSRF9IRUlHSFQ7XHJcblxyXG4gICAgICAvLyBCaXJkIHZzIHBpcGVzXHJcbiAgICAgIGZvciAoY29uc3QgcGlwZSBvZiBwaXBlc1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgY29uc3Qgd2l0aGluUGlwZVggPSBiaXJkUmlnaHQgPiBwaXBlLnggJiYgYmlyZExlZnQgPCBwaXBlLnggKyBQSVBFX1dJRFRIO1xyXG4gICAgICAgIGNvbnN0IHdpdGhpblBpcGVZID0gYmlyZFRvcCA8IHBpcGUudG9wSGVpZ2h0IHx8IGJpcmRCb3R0b20gPiBwaXBlLmJvdHRvbVk7XHJcbiAgICAgICAgaWYgKHdpdGhpblBpcGVYICYmIHdpdGhpblBpcGVZKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ29pbkNvbGxlY3Rpb24oKSB7XHJcbiAgICAgIGNvbnN0IGJpcmRMZWZ0ID0gMTAwO1xyXG4gICAgICBjb25zdCBiaXJkUmlnaHQgPSBiaXJkTGVmdCArIEJJUkRfV0lEVEg7XHJcbiAgICAgIGNvbnN0IGJpcmRUb3AgPSBiaXJkWVJlZi5jdXJyZW50O1xyXG4gICAgICBjb25zdCBiaXJkQm90dG9tID0gYmlyZFlSZWYuY3VycmVudCArIEJJUkRfSEVJR0hUO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBjb2luIG9mIGNvaW5zUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBpZiAoIWNvaW4uY29sbGVjdGVkKSB7XHJcbiAgICAgICAgICBjb25zdCBjb2luTGVmdCA9IGNvaW4ueDtcclxuICAgICAgICAgIGNvbnN0IGNvaW5SaWdodCA9IGNvaW4ueCArIGNvaW4ud2lkdGg7XHJcbiAgICAgICAgICBjb25zdCBjb2luVG9wID0gY29pbi55O1xyXG4gICAgICAgICAgY29uc3QgY29pbkJvdHRvbSA9IGNvaW4ueSArIGNvaW4uaGVpZ2h0O1xyXG5cclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgYmlyZFJpZ2h0ID4gY29pbkxlZnQgJiZcclxuICAgICAgICAgICAgYmlyZExlZnQgPCBjb2luUmlnaHQgJiZcclxuICAgICAgICAgICAgYmlyZEJvdHRvbSA+IGNvaW5Ub3AgJiZcclxuICAgICAgICAgICAgYmlyZFRvcCA8IGNvaW5Cb3R0b21cclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBDb2xsZWN0IGNvaW5cclxuICAgICAgICAgICAgY29pbi5jb2xsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50U2NvcmUoKHByZXYpID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBuZXdTY29yZSA9IHByZXYgKyA1O1xyXG4gICAgICAgICAgICAgIHNldEhpZ2hTY29yZSgocHJldkhpZ2gpID0+IE1hdGgubWF4KHByZXZIaWdoLCBuZXdTY29yZSkpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBuZXdTY29yZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlU2NvcmUoKSB7XHJcbiAgICAgIGZvciAoY29uc3QgcGlwZSBvZiBwaXBlc1JlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgLy8gKzEgc2NvcmUgb25jZSB0aGUgcGlwZSBpcyBmdWxseSBiZWhpbmQgeD0xMDBcclxuICAgICAgICBpZiAoIXBpcGUuc2NvcmVkICYmIHBpcGUueCArIFBJUEVfV0lEVEggPCAxMDApIHtcclxuICAgICAgICAgIHBpcGUuc2NvcmVkID0gdHJ1ZTtcclxuICAgICAgICAgIHNldEN1cnJlbnRTY29yZSgocHJldikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTY29yZSA9IHByZXYgKyAxO1xyXG4gICAgICAgICAgICBzZXRIaWdoU2NvcmUoKHByZXZIaWdoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZEhpZ2ggPSBNYXRoLm1heChwcmV2SGlnaCwgbmV3U2NvcmUpO1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImhpZ2hTY29yZVwiLCB1cGRhdGVkSGlnaC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRIaWdoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ld1Njb3JlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyA0RTogTU9CSUxFIC8gTU9VU0UgSU5QVVQgKERFQk9VTkNFRClcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2FudmFzVGFwKGU6IFRvdWNoRXZlbnQgfCBNb3VzZUV2ZW50KSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgaWYgKG5vdyAtIGxhc3RUYXBSZWYuY3VycmVudCA8IERFQk9VTkNFX1RJTUUpIHtcclxuICAgICAgICByZXR1cm47IC8vIGlnbm9yZSBkb3VibGUgdGFwc1xyXG4gICAgICB9XHJcbiAgICAgIGxhc3RUYXBSZWYuY3VycmVudCA9IG5vdztcclxuICAgICAgZmxhcE9yU3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRDYW52YXNMaXN0ZW5lcnMoKSB7XHJcbiAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBoYW5kbGVDYW52YXNUYXApO1xyXG4gICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBoYW5kbGVDYW52YXNUYXApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUNhbnZhc0xpc3RlbmVycygpIHtcclxuICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZUNhbnZhc1RhcCk7XHJcbiAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNhbnZhc1RhcCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2FudmFzTGlzdGVuZXJzKCk7XHJcblxyXG4gICAgLy8gQXV0by1zdGFydCBpZiByZXF1ZXN0ZWRcclxuICAgIGlmIChhdXRvU3RhcnQpIHtcclxuICAgICAgZmxhcE9yU3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDTEVBTlVQIG9uIHVubW91bnRcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlUmVzaXplKTtcclxuICAgICAgcmVtb3ZlQ2FudmFzTGlzdGVuZXJzKCk7XHJcbiAgICAgIGlmIChyZXF1ZXN0SWRSZWYuY3VycmVudCkge1xyXG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RJZFJlZi5jdXJyZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcclxuICB9LCBbY2FudmFzUmVmLCBpc1BhdXNlZCwgYXV0b1N0YXJ0XSk7IC8vIEVuZCBvZiBiaWcgdXNlRWZmZWN0XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gNS4gUkVUVVJOIEdBTUUgU1RBVFNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHJldHVybiB7XHJcbiAgICBoaWdoU2NvcmUsXHJcbiAgICBjdXJyZW50U2NvcmUsXHJcbiAgfTtcclxufVxyXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJHUkFWSVRZIiwiRkxBUCIsIlBJUEVfV0lEVEgiLCJQSVBFX1NQQUNJTkciLCJCSVJEX1dJRFRIIiwiQklSRF9IRUlHSFQiLCJDT0lOX1NJWkUiLCJQSVBFX1NQQVdOX0lOVEVSVkFMIiwiSE9SSVpPTlRBTF9TUEVFRCIsIlJPVEFUSU9OX1NQRUVEIiwiSURFQUxfRlJBTUUiLCJ1c2VGbGFwcHlCaXJkR2FtZSIsImNhbnZhc1JlZiIsImlzUGF1c2VkIiwiYXV0b1N0YXJ0IiwiaGlnaFNjb3JlIiwic2V0SGlnaFNjb3JlIiwiY3VycmVudFNjb3JlIiwic2V0Q3VycmVudFNjb3JlIiwicmVxdWVzdElkUmVmIiwiYmlyZFlSZWYiLCJiaXJkVmVsb2NpdHlSZWYiLCJwaXBlc1JlZiIsImNvaW5zUmVmIiwiZ2FtZU92ZXJSZWYiLCJnYW1lU3RhcnRlZFJlZiIsImNvaW5Sb3RhdGlvblJlZiIsInBpcGVTcGF3blRpbWVyUmVmIiwibGFzdFRpbWVSZWYiLCJiaXJkSW1hZ2VzIiwicGlwZVRvcCIsInBpcGVCb3R0b20iLCJiYWNrZ3JvdW5kIiwiY29pbkltYWdlIiwiY3VycmVudEJpcmRGcmFtZVJlZiIsImxhc3RUYXBSZWYiLCJERUJPVU5DRV9USU1FIiwiYmlyZFVwIiwiSW1hZ2UiLCJzcmMiLCJiaXJkTWlkIiwiYmlyZERvd24iLCJzdG9yZWRIaWdoU2NvcmUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2VJbnQiLCJjYW52YXMiLCJjdXJyZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImxvYWRJbWFnZSIsImltZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiRXJyb3IiLCJsb2FkQXNzZXRzIiwiYWxsIiwibWFwIiwiaW5pdGlhbGl6ZUdhbWUiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJ3aWR0aCIsImhlaWdodCIsImRyYXdTdGFydFNjcmVlbiIsInJlc2V0R2FtZSIsImhhbmRsZUtleURvd24iLCJlIiwia2V5IiwiZmxhcE9yU3RhcnQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlUmVzaXplIiwic3RhcnRHYW1lIiwiZmxhcEFuaW1hdGlvbiIsInBlcmZvcm1hbmNlIiwibm93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW5pbWF0ZSIsInNldFRpbWVvdXQiLCJjdXJyZW50VGltZSIsImNvbnRleHQiLCJkZWx0YVRpbWUiLCJ1cGRhdGVHYW1lU3RhdGUiLCJkcmF3IiwiZHJhd0dhbWVPdmVyU2NyZWVuIiwic2NhbGUiLCJjcmVhdGVQaXBlIiwibW92ZVBpcGVzQW5kQ29pbnMiLCJjaGVja0NvbGxpc2lvbnMiLCJjaGVja0NvaW5Db2xsZWN0aW9uIiwidXBkYXRlU2NvcmUiLCJjbGVhclJlY3QiLCJkcmF3QmFja2dyb3VuZCIsImRyYXdCaXJkIiwiZHJhd1BpcGVzIiwiZHJhd0NvaW5zIiwiZm9udCIsInRleHRBbGlnbiIsImZpbGxTdHlsZSIsInNoYWRvd0NvbG9yIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJzaGFkb3dCbHVyIiwiZHJhd0ltYWdlIiwiY3VycmVudEltYWdlIiwicGlwZSIsIngiLCJ0b3BIZWlnaHQiLCJib3R0b21ZIiwiYm90dG9tSGVpZ2h0Iiwic2NhbGVYIiwiTWF0aCIsImFicyIsImNvcyIsIlBJIiwiaGFsZlNpemUiLCJjb2luIiwiY29sbGVjdGVkIiwic2F2ZSIsInRyYW5zbGF0ZSIsInkiLCJyZXN0b3JlIiwicGlwZUhlaWdodCIsInJhbmRvbSIsInB1c2giLCJzY29yZWQiLCJmaWx0ZXIiLCJwIiwiYyIsImJpcmRMZWZ0IiwiYmlyZFJpZ2h0IiwiYmlyZFRvcCIsImJpcmRCb3R0b20iLCJ3aXRoaW5QaXBlWCIsIndpdGhpblBpcGVZIiwiY29pbkxlZnQiLCJjb2luUmlnaHQiLCJjb2luVG9wIiwiY29pbkJvdHRvbSIsInByZXYiLCJuZXdTY29yZSIsInByZXZIaWdoIiwibWF4IiwidXBkYXRlZEhpZ2giLCJzZXRJdGVtIiwidG9TdHJpbmciLCJoYW5kbGVDYW52YXNUYXAiLCJwcmV2ZW50RGVmYXVsdCIsIkRhdGUiLCJhZGRDYW52YXNMaXN0ZW5lcnMiLCJyZW1vdmVDYW52YXNMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/useFlappyBirdGame.ts\n"));

/***/ })

});