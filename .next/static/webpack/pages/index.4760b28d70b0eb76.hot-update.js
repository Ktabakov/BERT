"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/walletActions.ts":
/*!*********************************!*\
  !*** ./public/walletActions.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateCountdown: function() { return /* binding */ calculateCountdown; },\n/* harmony export */   claimTokens: function() { return /* binding */ claimTokens; },\n/* harmony export */   send: function() { return /* binding */ send; }\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n/* harmony import */ var _common_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/network */ \"./common/network.ts\");\n/* harmony import */ var _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/GameReward.hl */ \"./contracts/GameReward.hl\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n // Ensure correct path to your contract\nconst optimize = false;\nfunction calculateCountdown() {\n    const TimeBeginContract = Math.floor(new Date(Date.UTC(2024, 11, 25, 13, 45, 0)).getTime());\n    const TimeNow = Math.floor(Date.now());\n    const CYCLE_DURATION = 600 // 10 minutes \n    ;\n    const offsetInMs = 89680;\n    const elapsedTime = TimeNow - offsetInMs - TimeBeginContract;\n    const elapsedTimeInSeconds = elapsedTime / 1000;\n    const positionInCycle = elapsedTimeInSeconds % CYCLE_DURATION;\n    return positionInCycle;\n}\nasync function claimTokens(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw new Error(\"Wallet API is not set.\");\n    }\n    try {\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Cip30Wallet(walletAPI);\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.WalletHelper(cip30WalletAPI);\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.NetworkParams(networkParamsJson);\n        const policyId = \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72\";\n        const name = Buffer.from(\"MIN\", \"utf8\").toString(\"hex\");\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.AssetClass({\n            mph: mph,\n            tokenName: name\n        });\n        console.log(assetClass);\n        const utxos = await walletHelper.getUtxos();\n        console.log(\"utxos\" + utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const gameReward = new _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        // Compile the vesting validator\n        const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Address.fromHashes(compiledProgram.validatorHash);\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        console.dir(scriptAddress, {\n            depth: null\n        });\n        const sortedUtxos = await fetchUtxos(scriptAddress.toBech32());\n        const CLAIM_WINDOW = 20; // 20 seconds \n        const positionInCycle = calculateCountdown();\n        console.log(\"positionInCycle\" + positionInCycle);\n        window.onerror = ()=>positionInCycle < CLAIM_WINDOW;\n        //const dynamicReward = calculateReward(Number(remainingSupply), TOTAL_SUPPLY, BASE_REWARD);\n        const testValueBenefitiary = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Assets([\n            [\n                assetClass,\n                BigInt(sortedUtxos.dynamicReward)\n            ]\n        ]);\n        //const totalAmountUtxo = getTokenAmountFromUtxos(sortedUtxos.selected, assetClass);\n        const amountToSendBack = BigInt(sortedUtxos.totalAmount) - BigInt(sortedUtxos.dynamicReward);\n        const firstPartToSendBack = amountToSendBack / 2n; // First part is half of the total amount\n        const secondPartToSendBack = amountToSendBack - firstPartToSendBack; // Second part is the remainder\n        console.log(\"First \" + firstPartToSendBack);\n        console.log(\"Sevond \" + secondPartToSendBack);\n        console.log(sortedUtxos.dynamicReward);\n        const valueContract1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Assets([\n            [\n                assetClass,\n                firstPartToSendBack\n            ]\n        ]);\n        const valueContract2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Assets([\n            [\n                assetClass,\n                secondPartToSendBack\n            ]\n        ]);\n        const gameDatum = new gameReward.types.Datum(benefitiary.pubKeyHash);\n        // Create the vesting claim redeemer\n        const redeember = new gameReward.types.Redeemer.Claim(benefitiary.pubKeyHash)._toUplcData();\n        //console.log(filteredUtxos);\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Tx();\n        //tx.addInputs(utxos[0]);\n        tx.addInputs(sortedUtxos.selected, redeember);\n        tx.attachScript(compiledProgram);\n        var userClaimOutput = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxOutput(benefitiary, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(undefined, testValueBenefitiary));\n        tx.addOutput(userClaimOutput);\n        //Shiiit, fix. Someone could rediredt the rest of the tokens\n        const testValueContract = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Assets([\n            [\n                assetClass,\n                firstPartToSendBack\n            ]\n        ]);\n        const addressStr = \"addr_test1qrarqhmklnhwcw3q0zm6sgm3g3l7pua0y36sql9k5ru8dsucglsked5f5yrcf9e9xgxjgmt7xk52knh8h0dgayc00arqlh7g60\";\n        const address = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Address.fromBech32(addressStr);\n        tx.addOutput(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxOutput(address, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(undefined, testValueContract), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Datum.inline(gameDatum)));\n        // Calculate total ADA in the selected script inputs\n        let totalAdaInInputs = BigInt(0);\n        sortedUtxos.selected.forEach((utxo)=>{\n            totalAdaInInputs += BigInt(utxo.output.value.lovelace);\n        });\n        // Distribute ADA equally (or as required) among script outputs\n        const adaPerScriptOutput = totalAdaInInputs / 2n; // Assuming two script outputs\n        if (amountToSendBack != BigInt(0)) {\n            var scriptUtxo1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(adaPerScriptOutput, valueContract1), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Datum.inline(gameDatum) // Contract requires datum\n            );\n            tx.addOutput(scriptUtxo1);\n            var scriptUtxo2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(totalAdaInInputs - adaPerScriptOutput, valueContract2), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Datum.inline(gameDatum) // Contract requires datum\n            );\n            tx.addOutput(scriptUtxo2);\n        }\n        //var inputFees = await walletHelper.pickUtxos(new Value(tokenAmountFees));\n        //tx.addInputs(inputFees[0]);\n        console.log(\"We attatched everything!\");\n        await tx.finalize(networkParams, benefitiary, utxos);\n        console.log(\"dali finalizirahme?\");\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"Dali q signirahme?\");\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        console.error(\"submit tx failed\", err);\n        throw err;\n    }\n}\nasync function send(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw console.error(\"walletAPI is not set\");\n    }\n    try {\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Cip30Wallet(walletAPI);\n        // const blockfrost = new BlockFrostIPFS({\n        //   network: network,\n        //   projectId: \"preprodJExO0MAMRgfpXz9Il4IqB2u9ddoylZBT\",\n        // });\n        console.log(\"gmmm\");\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.WalletHelper(cip30WalletAPI);\n        const policyId = \"e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72\";\n        const name = Buffer.from(\"MIN\", \"utf8\").toString(\"hex\");\n        // const policyId = \"\";\n        // const name = Buffer.from(\"\", 'utf8').toString('hex');\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.AssetClass({\n            mph: mph,\n            tokenName: name // Convert to hex string\n        });\n        console.log(assetClass);\n        const minAda = 1000000; // minimum lovelace to send\n        const minAdaVal = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(BigInt(minAda));\n        //  const benefitiaryValue = new Value(BigInt(10000), new Assets([\n        //   [mph, [[name, BigInt(10000)]]]\n        // ]))\n        const testValueScript = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Assets([\n            [\n                assetClass,\n                BigInt(125550)\n            ]\n        ]);\n        // Get wallet UTXOs\n        const utxos = await walletHelper.pickUtxos(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(undefined, testValueScript));\n        console.log(utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const gameReward = new _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        // Compile the vesting validator\n        const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Address.fromHashes(compiledProgram.validatorHash);\n        //remove\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        // Construct the vesting datum\n        const gameDatum = new gameReward.types.Datum(benefitiary.pubKeyHash);\n        //const redeember = (new gameReward.types.Redeemer.Claim())._toUplcData();\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Tx();\n        tx.addInputs(utxos[0]);\n        tx.addOutput(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Value(undefined, testValueScript), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.Datum.inline(gameDatum)));\n        // tx.addOutput(new TxOutput(\n        //   benefitiary,\n        //   minAdaVal,\n        // ));\n        console.log(\"We attatched everything!\");\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.NetworkParams(networkParamsJson);\n        // Send any change back to the buyer\n        await tx.finalize(networkParams, benefitiary, utxos[1]);\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"signed\");\n        // Submit the signed tx\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        throw console.error(\"submit tx failed\", err);\n    }\n}\nasync function fetchUtxos(scriptAddress) {\n    const response = await fetch(\"http://192.168.1.101:3001/api/getUtxos\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            scriptAddress\n        })\n    });\n    const data = await response.json(); // Raw JSON array from backend\n    // `Convert JSON back to TxInput objects\n    const selectedUtxos = data.selected.map((utxo)=>_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_2__.TxInput.fromFullCbor(utxo));\n    const dynamicReward = BigInt(data.dynamicReward);\n    const totalAmount = BigInt(data.totalAmount);\n    console.log(\"selectedUtxos\" + selectedUtxos);\n    console.log(\"dynamicReward\" + dynamicReward);\n    console.log(\"totalAmount\" + totalAmount);\n    return {\n        selected: selectedUtxos,\n        totalAmount: totalAmount,\n        dynamicReward: dynamicReward\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/walletActions.ts\n"));

/***/ })

});