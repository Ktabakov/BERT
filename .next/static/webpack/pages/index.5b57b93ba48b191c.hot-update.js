"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./contracts/GameReward.hl":
/*!*********************************!*\
  !*** ./contracts/GameReward.hl ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Program)\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n\n//wraps helios.Program\nclass Program {\n    #program\n\n    constructor(parameters = {}) {\n        // load all the dependencies\n        const allDeps = []\n\n        const depSrcs = new Map()\n\n        function addDepSrcs(dep) {\n            depSrcs.set(dep.name, dep.src)\n\n            for (let d of dep.dependencies) {\n                addDepSrcs(d)\n            }\n        }\n\n        for (let d of allDeps) {\n            addDepSrcs(d)\n        }\n\n        this.#program = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__.Program.new(`spending GameReward\r\n/* \r\n Create a datum with the benefitiary PubKeyHash that will be included \r\n into each UTXO locked at this script address.\r\n*/\r\nstruct Datum {\r\n    benefitiary: PubKeyHash\r\n}\r\n\r\n/*\r\n The vesting contract can be either canceled by the benefitiary\r\n or claimed by the beneficiary\r\n */\r\nenum Redeemer {\r\n    Cancel\r\n    Claim {\r\n        recepiant: PubKeyHash\r\n    }\r\n}\r\n\r\nconst TOKEN_POLICY_ID: MintingPolicyHash = MintingPolicyHash::new(#a3879594925e2ab170ed0c34204d84765411ad23e43e98771dd5a6d2)\r\n   \r\nconst HALVING_PERIOD: Int = 7776000  // 3 months in seconds\r\nconst MAX_HALVINGS: Int = 2\r\nconst BASE_REWARD: Int = 10000  // Initial reward in tokens\r\n\r\nfunc calculate_reward(current_time: Time) -> Int {\r\n    // Start contract at \r\n    TimeBeginContract: Time = Time::new(1736073600000);  \r\n\r\n    // Calculate time elapsed in seconds\r\n    time_elapsed: Duration = current_time - TimeBeginContract;\r\n    time_elapsed_in_seconds: Int = time_elapsed / Duration::new(1_000);  // Convert to seconds\r\n\r\n    // Calculate the number of halving periods (each period is 1 month)\r\n    halving_steps: Int = time_elapsed_in_seconds / HALVING_PERIOD;\r\n    print(current_time.show());\r\n    // Ensure the number of halvings doesn't exceed the maximum allowed\r\n    halving_steps = if (halving_steps > MAX_HALVINGS) { MAX_HALVINGS } else { halving_steps };\r\n    // Calculate reward using simple multiplication and division\r\n    if (halving_steps == 0) {\r\n        BASE_REWARD\r\n    } else if (halving_steps == 1) {\r\n        BASE_REWARD / 2\r\n    } else if (halving_steps == 2) {\r\n        BASE_REWARD / 4\r\n    } else {\r\n        BASE_REWARD / 4\r\n    }\r\n\r\n}\r\n\r\nconst CLAIM_WINDOW: Int = 20 \r\nconst CYCLE_DURATION: Int = 600 \r\n\r\nfunc IsClaimWindow(current_time: Time) -> Bool {\r\n    // Start contract \r\n    TimeBeginContract: Time = Time::new(1736073600000);  \r\n\r\n     // Calculate the offset from the deployment start\r\n     elapsed_time: Duration = current_time - TimeBeginContract;\r\n     time_elapsed_in_seconds: Int = elapsed_time / Duration::new(1_000);  // Convert to seconds\r\n\r\n // Determine the position within the current cycle\r\n    position_in_cycle: Int = time_elapsed_in_seconds % CYCLE_DURATION;\r\n    in_claim_window: Bool = position_in_cycle <= CLAIM_WINDOW;\r\n    print(position_in_cycle.show());\r\n    in_claim_window\r\n}\r\n\r\n// Define the main validator function\r\nfunc main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {\r\n    tx: Tx = ctx.tx;\r\n\r\n        // AssetClass for the treasury tokens\r\n        asset_class: AssetClass = AssetClass::new(\r\n            TOKEN_POLICY_ID,  \r\n            \"BERT\".encode_utf8()\r\n        );\r\n\r\n       validator_hash: ValidatorHash = ctx.get_current_validator_hash();\r\n\r\n        // Get all outputs locked at the script address\r\n       script_outputs: []TxOutput = tx.outputs_locked_by(validator_hash);\r\n\r\n          total_tokens_begin: Int = tx.inputs.fold(\r\n            (sum: Int, input: TxInput) -> Int {\r\n              \r\n                sum + input.output.value.get_safe(asset_class)\r\n            },\r\n            0\r\n        );\r\n\r\n            // Sum up all tokens in these outputs\r\n            total_tokens_in_script: Int = script_outputs.fold(\r\n                (sum: Int, output: TxOutput) -> Int {\r\n                sum + output.value.get_safe(asset_class)\r\n                },\r\n               0 // Initial sum\r\n            );\r\n            \r\n        // Calculate total ADA in script inputs\r\n        total_ada_begin: Int = tx.inputs.fold((sum: Int, input: TxInput) -> Int {\r\n            if (input.output.address.credential.switch {\r\n                vh_credential: Validator => vh_credential.hash == validator_hash,\r\n                _ => false\r\n            }) {\r\n                sum + input.output.value.get_lovelace()\r\n            } else {\r\n                sum\r\n            }\r\n        }, 0);\r\n\r\n        // Calculate total ADA in script outputs\r\n        total_ada_in_script: Int = tx.outputs.fold((sum: Int, output: TxOutput) -> Int {\r\n            if (output.address.credential.switch {\r\n                vh_credential: Validator => vh_credential.hash == validator_hash,\r\n                _ => false\r\n            }) {\r\n                sum + output.value.get_lovelace()\r\n            } else {\r\n                sum\r\n            }\r\n        }, 0);\r\n\r\n    current_time: Time = tx.time_range.start; \r\n    // Calculate dynamic reward based on the remaining supply\r\n    dynamic_reward: Int = calculate_reward(current_time);\r\n\r\n    isClaimWindow: Bool = IsClaimWindow(current_time);\r\n\r\n     //expected_value: Value = Value::new(asset_class, EXPECTED_AMOUNT);\r\n    // Depending on the redeemer provided in the transaction, process accordingly.\r\n    redeemer.switch {\r\n        Cancel => {\r\n            // Tx must be signed by pkh in datum\r\n            tx.is_signed_by(datum.benefitiary) \r\n        },\r\n        red: Claim => {\r\n\r\n            // Determine how many tokens to give\r\n            tokens_to_give: Int = if (dynamic_reward > total_tokens_begin) { total_tokens_begin } else { dynamic_reward };\r\n\r\n            assert(total_tokens_begin - tokens_to_give == total_tokens_in_script, \"Not enough tokens sent back to script\");\r\n            \r\n              // Check that the user receives exactly tokens_to_give\r\n            assert(tx.value_sent_to(red.recepiant).get_safe(asset_class) == tokens_to_give, \"Incorrect token payout\");\r\n            assert(isClaimWindow == true, \"Not in claim window\");\r\n            \r\n             // Now handle ADA and script outputs logic\r\n             if (total_tokens_in_script == 0) {\r\n                // Final claim scenario: no tokens remain\r\n                // All ADA can be returned to the claimant, so no script outputs allowed\r\n                assert(script_outputs.length == 0, \"No script outputs should remain at final claim\");\r\n                // In this scenario, we don't need to enforce total_ada_in_script >= total_ada_begin,\r\n                // since all ADA should now be leaving the script and going to the claimant.\r\n                true\r\n            } else {\r\n                // Not final claim: tokens remain in the script\r\n                // Require at least 2 script outputs for concurrency (adjust as needed)\r\n                assert(script_outputs.length == 2, \"I need 2 outputs\");\r\n\r\n                // Ensure no ADA leaves the contract yet\r\n                assert(total_ada_in_script >= total_ada_begin, \"No ADA can leave the contract\");\r\n\r\n                true\r\n            }\r\n        }\r\n    }    \r\n}`, Array.from(depSrcs.values()))\n\n        if (Object.keys(parameters).length > 0) {\n            this.#program.parameters = parameters\n        }\n    }\n\n    get name() {\n        return this.#program.name\n    }\n\n    get paramTypes() {\n        return this.#program.paramTypes\n    }\n\n    get parameters() {\n        return this.#program.parameters\n    }\n\n    get types() {\n        return this.#program.types\n    }\n\n    set parameters(params) {\n        this.#program.parameters = params\n    }\n\n    compile(optimize = false) {\n        return this.#program.compile(optimize)\n    }\n\n    evalParam(paramName) {\n        return this.#program.evalParam(paramName)\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250cmFjdHMvR2FtZVJld2FyZC5obCIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUM1QztBQUNlO0FBQ2Y7O0FBRUEsK0JBQStCO0FBQy9CO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLHVEQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsZUFBZSxPQUFPO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLHFCQUFxQixPQUFPO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXFVsdGltYXRlLUNhcmRhbm8tU21hcnQtQ29udHJhY3RzXFxGbGFwcHlCaXJkR2FtZVxcaGVsaW9zXFxHYW1lUmV3YXJkXFxjb250cmFjdHNcXEdhbWVSZXdhcmQuaGwiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaGVsaW9zIGZyb20gXCJAaHlwZXJpb25idC9oZWxpb3NcIlxuLy93cmFwcyBoZWxpb3MuUHJvZ3JhbVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZ3JhbSB7XG4gICAgI3Byb2dyYW1cblxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICAvLyBsb2FkIGFsbCB0aGUgZGVwZW5kZW5jaWVzXG4gICAgICAgIGNvbnN0IGFsbERlcHMgPSBbXVxuXG4gICAgICAgIGNvbnN0IGRlcFNyY3MgPSBuZXcgTWFwKClcblxuICAgICAgICBmdW5jdGlvbiBhZGREZXBTcmNzKGRlcCkge1xuICAgICAgICAgICAgZGVwU3Jjcy5zZXQoZGVwLm5hbWUsIGRlcC5zcmMpXG5cbiAgICAgICAgICAgIGZvciAobGV0IGQgb2YgZGVwLmRlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgICAgIGFkZERlcFNyY3MoZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGQgb2YgYWxsRGVwcykge1xuICAgICAgICAgICAgYWRkRGVwU3JjcyhkKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jcHJvZ3JhbSA9IGhlbGlvcy5Qcm9ncmFtLm5ldyhgc3BlbmRpbmcgR2FtZVJld2FyZFxyXG4vKiBcclxuIENyZWF0ZSBhIGRhdHVtIHdpdGggdGhlIGJlbmVmaXRpYXJ5IFB1YktleUhhc2ggdGhhdCB3aWxsIGJlIGluY2x1ZGVkIFxyXG4gaW50byBlYWNoIFVUWE8gbG9ja2VkIGF0IHRoaXMgc2NyaXB0IGFkZHJlc3MuXHJcbiovXHJcbnN0cnVjdCBEYXR1bSB7XHJcbiAgICBiZW5lZml0aWFyeTogUHViS2V5SGFzaFxyXG59XHJcblxyXG4vKlxyXG4gVGhlIHZlc3RpbmcgY29udHJhY3QgY2FuIGJlIGVpdGhlciBjYW5jZWxlZCBieSB0aGUgYmVuZWZpdGlhcnlcclxuIG9yIGNsYWltZWQgYnkgdGhlIGJlbmVmaWNpYXJ5XHJcbiAqL1xyXG5lbnVtIFJlZGVlbWVyIHtcclxuICAgIENhbmNlbFxyXG4gICAgQ2xhaW0ge1xyXG4gICAgICAgIHJlY2VwaWFudDogUHViS2V5SGFzaFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBUT0tFTl9QT0xJQ1lfSUQ6IE1pbnRpbmdQb2xpY3lIYXNoID0gTWludGluZ1BvbGljeUhhc2g6Om5ldygjYTM4Nzk1OTQ5MjVlMmFiMTcwZWQwYzM0MjA0ZDg0NzY1NDExYWQyM2U0M2U5ODc3MWRkNWE2ZDIpXHJcbiAgIFxyXG5jb25zdCBIQUxWSU5HX1BFUklPRDogSW50ID0gNzc3NjAwMCAgLy8gMyBtb250aHMgaW4gc2Vjb25kc1xyXG5jb25zdCBNQVhfSEFMVklOR1M6IEludCA9IDJcclxuY29uc3QgQkFTRV9SRVdBUkQ6IEludCA9IDEwMDAwICAvLyBJbml0aWFsIHJld2FyZCBpbiB0b2tlbnNcclxuXHJcbmZ1bmMgY2FsY3VsYXRlX3Jld2FyZChjdXJyZW50X3RpbWU6IFRpbWUpIC0+IEludCB7XHJcbiAgICAvLyBTdGFydCBjb250cmFjdCBhdCBcclxuICAgIFRpbWVCZWdpbkNvbnRyYWN0OiBUaW1lID0gVGltZTo6bmV3KDE3MzYwNzM2MDAwMDApOyAgXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRpbWUgZWxhcHNlZCBpbiBzZWNvbmRzXHJcbiAgICB0aW1lX2VsYXBzZWQ6IER1cmF0aW9uID0gY3VycmVudF90aW1lIC0gVGltZUJlZ2luQ29udHJhY3Q7XHJcbiAgICB0aW1lX2VsYXBzZWRfaW5fc2Vjb25kczogSW50ID0gdGltZV9lbGFwc2VkIC8gRHVyYXRpb246Om5ldygxXzAwMCk7ICAvLyBDb252ZXJ0IHRvIHNlY29uZHNcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgdGhlIG51bWJlciBvZiBoYWx2aW5nIHBlcmlvZHMgKGVhY2ggcGVyaW9kIGlzIDEgbW9udGgpXHJcbiAgICBoYWx2aW5nX3N0ZXBzOiBJbnQgPSB0aW1lX2VsYXBzZWRfaW5fc2Vjb25kcyAvIEhBTFZJTkdfUEVSSU9EO1xyXG4gICAgcHJpbnQoY3VycmVudF90aW1lLnNob3coKSk7XHJcbiAgICAvLyBFbnN1cmUgdGhlIG51bWJlciBvZiBoYWx2aW5ncyBkb2Vzbid0IGV4Y2VlZCB0aGUgbWF4aW11bSBhbGxvd2VkXHJcbiAgICBoYWx2aW5nX3N0ZXBzID0gaWYgKGhhbHZpbmdfc3RlcHMgPiBNQVhfSEFMVklOR1MpIHsgTUFYX0hBTFZJTkdTIH0gZWxzZSB7IGhhbHZpbmdfc3RlcHMgfTtcclxuICAgIC8vIENhbGN1bGF0ZSByZXdhcmQgdXNpbmcgc2ltcGxlIG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpc2lvblxyXG4gICAgaWYgKGhhbHZpbmdfc3RlcHMgPT0gMCkge1xyXG4gICAgICAgIEJBU0VfUkVXQVJEXHJcbiAgICB9IGVsc2UgaWYgKGhhbHZpbmdfc3RlcHMgPT0gMSkge1xyXG4gICAgICAgIEJBU0VfUkVXQVJEIC8gMlxyXG4gICAgfSBlbHNlIGlmIChoYWx2aW5nX3N0ZXBzID09IDIpIHtcclxuICAgICAgICBCQVNFX1JFV0FSRCAvIDRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgQkFTRV9SRVdBUkQgLyA0XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jb25zdCBDTEFJTV9XSU5ET1c6IEludCA9IDIwIFxyXG5jb25zdCBDWUNMRV9EVVJBVElPTjogSW50ID0gNjAwIFxyXG5cclxuZnVuYyBJc0NsYWltV2luZG93KGN1cnJlbnRfdGltZTogVGltZSkgLT4gQm9vbCB7XHJcbiAgICAvLyBTdGFydCBjb250cmFjdCBcclxuICAgIFRpbWVCZWdpbkNvbnRyYWN0OiBUaW1lID0gVGltZTo6bmV3KDE3MzYwNzM2MDAwMDApOyAgXHJcblxyXG4gICAgIC8vIENhbGN1bGF0ZSB0aGUgb2Zmc2V0IGZyb20gdGhlIGRlcGxveW1lbnQgc3RhcnRcclxuICAgICBlbGFwc2VkX3RpbWU6IER1cmF0aW9uID0gY3VycmVudF90aW1lIC0gVGltZUJlZ2luQ29udHJhY3Q7XHJcbiAgICAgdGltZV9lbGFwc2VkX2luX3NlY29uZHM6IEludCA9IGVsYXBzZWRfdGltZSAvIER1cmF0aW9uOjpuZXcoMV8wMDApOyAgLy8gQ29udmVydCB0byBzZWNvbmRzXHJcblxyXG4gLy8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIGN1cnJlbnQgY3ljbGVcclxuICAgIHBvc2l0aW9uX2luX2N5Y2xlOiBJbnQgPSB0aW1lX2VsYXBzZWRfaW5fc2Vjb25kcyAlIENZQ0xFX0RVUkFUSU9OO1xyXG4gICAgaW5fY2xhaW1fd2luZG93OiBCb29sID0gcG9zaXRpb25faW5fY3ljbGUgPD0gQ0xBSU1fV0lORE9XO1xyXG4gICAgcHJpbnQocG9zaXRpb25faW5fY3ljbGUuc2hvdygpKTtcclxuICAgIGluX2NsYWltX3dpbmRvd1xyXG59XHJcblxyXG4vLyBEZWZpbmUgdGhlIG1haW4gdmFsaWRhdG9yIGZ1bmN0aW9uXHJcbmZ1bmMgbWFpbihkYXR1bTogRGF0dW0sIHJlZGVlbWVyOiBSZWRlZW1lciwgY3R4OiBTY3JpcHRDb250ZXh0KSAtPiBCb29sIHtcclxuICAgIHR4OiBUeCA9IGN0eC50eDtcclxuXHJcbiAgICAgICAgLy8gQXNzZXRDbGFzcyBmb3IgdGhlIHRyZWFzdXJ5IHRva2Vuc1xyXG4gICAgICAgIGFzc2V0X2NsYXNzOiBBc3NldENsYXNzID0gQXNzZXRDbGFzczo6bmV3KFxyXG4gICAgICAgICAgICBUT0tFTl9QT0xJQ1lfSUQsICBcclxuICAgICAgICAgICAgXCJCRVJUXCIuZW5jb2RlX3V0ZjgoKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgdmFsaWRhdG9yX2hhc2g6IFZhbGlkYXRvckhhc2ggPSBjdHguZ2V0X2N1cnJlbnRfdmFsaWRhdG9yX2hhc2goKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IGFsbCBvdXRwdXRzIGxvY2tlZCBhdCB0aGUgc2NyaXB0IGFkZHJlc3NcclxuICAgICAgIHNjcmlwdF9vdXRwdXRzOiBbXVR4T3V0cHV0ID0gdHgub3V0cHV0c19sb2NrZWRfYnkodmFsaWRhdG9yX2hhc2gpO1xyXG5cclxuICAgICAgICAgIHRvdGFsX3Rva2Vuc19iZWdpbjogSW50ID0gdHguaW5wdXRzLmZvbGQoXHJcbiAgICAgICAgICAgIChzdW06IEludCwgaW5wdXQ6IFR4SW5wdXQpIC0+IEludCB7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdW0gKyBpbnB1dC5vdXRwdXQudmFsdWUuZ2V0X3NhZmUoYXNzZXRfY2xhc3MpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8gU3VtIHVwIGFsbCB0b2tlbnMgaW4gdGhlc2Ugb3V0cHV0c1xyXG4gICAgICAgICAgICB0b3RhbF90b2tlbnNfaW5fc2NyaXB0OiBJbnQgPSBzY3JpcHRfb3V0cHV0cy5mb2xkKFxyXG4gICAgICAgICAgICAgICAgKHN1bTogSW50LCBvdXRwdXQ6IFR4T3V0cHV0KSAtPiBJbnQge1xyXG4gICAgICAgICAgICAgICAgc3VtICsgb3V0cHV0LnZhbHVlLmdldF9zYWZlKGFzc2V0X2NsYXNzKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgMCAvLyBJbml0aWFsIHN1bVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgQURBIGluIHNjcmlwdCBpbnB1dHNcclxuICAgICAgICB0b3RhbF9hZGFfYmVnaW46IEludCA9IHR4LmlucHV0cy5mb2xkKChzdW06IEludCwgaW5wdXQ6IFR4SW5wdXQpIC0+IEludCB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5vdXRwdXQuYWRkcmVzcy5jcmVkZW50aWFsLnN3aXRjaCB7XHJcbiAgICAgICAgICAgICAgICB2aF9jcmVkZW50aWFsOiBWYWxpZGF0b3IgPT4gdmhfY3JlZGVudGlhbC5oYXNoID09IHZhbGlkYXRvcl9oYXNoLFxyXG4gICAgICAgICAgICAgICAgXyA9PiBmYWxzZVxyXG4gICAgICAgICAgICB9KSB7XHJcbiAgICAgICAgICAgICAgICBzdW0gKyBpbnB1dC5vdXRwdXQudmFsdWUuZ2V0X2xvdmVsYWNlKClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN1bVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBBREEgaW4gc2NyaXB0IG91dHB1dHNcclxuICAgICAgICB0b3RhbF9hZGFfaW5fc2NyaXB0OiBJbnQgPSB0eC5vdXRwdXRzLmZvbGQoKHN1bTogSW50LCBvdXRwdXQ6IFR4T3V0cHV0KSAtPiBJbnQge1xyXG4gICAgICAgICAgICBpZiAob3V0cHV0LmFkZHJlc3MuY3JlZGVudGlhbC5zd2l0Y2gge1xyXG4gICAgICAgICAgICAgICAgdmhfY3JlZGVudGlhbDogVmFsaWRhdG9yID0+IHZoX2NyZWRlbnRpYWwuaGFzaCA9PSB2YWxpZGF0b3JfaGFzaCxcclxuICAgICAgICAgICAgICAgIF8gPT4gZmFsc2VcclxuICAgICAgICAgICAgfSkge1xyXG4gICAgICAgICAgICAgICAgc3VtICsgb3V0cHV0LnZhbHVlLmdldF9sb3ZlbGFjZSgpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdW1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDApO1xyXG5cclxuICAgIGN1cnJlbnRfdGltZTogVGltZSA9IHR4LnRpbWVfcmFuZ2Uuc3RhcnQ7IFxyXG4gICAgLy8gQ2FsY3VsYXRlIGR5bmFtaWMgcmV3YXJkIGJhc2VkIG9uIHRoZSByZW1haW5pbmcgc3VwcGx5XHJcbiAgICBkeW5hbWljX3Jld2FyZDogSW50ID0gY2FsY3VsYXRlX3Jld2FyZChjdXJyZW50X3RpbWUpO1xyXG5cclxuICAgIGlzQ2xhaW1XaW5kb3c6IEJvb2wgPSBJc0NsYWltV2luZG93KGN1cnJlbnRfdGltZSk7XHJcblxyXG4gICAgIC8vZXhwZWN0ZWRfdmFsdWU6IFZhbHVlID0gVmFsdWU6Om5ldyhhc3NldF9jbGFzcywgRVhQRUNURURfQU1PVU5UKTtcclxuICAgIC8vIERlcGVuZGluZyBvbiB0aGUgcmVkZWVtZXIgcHJvdmlkZWQgaW4gdGhlIHRyYW5zYWN0aW9uLCBwcm9jZXNzIGFjY29yZGluZ2x5LlxyXG4gICAgcmVkZWVtZXIuc3dpdGNoIHtcclxuICAgICAgICBDYW5jZWwgPT4ge1xyXG4gICAgICAgICAgICAvLyBUeCBtdXN0IGJlIHNpZ25lZCBieSBwa2ggaW4gZGF0dW1cclxuICAgICAgICAgICAgdHguaXNfc2lnbmVkX2J5KGRhdHVtLmJlbmVmaXRpYXJ5KSBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZDogQ2xhaW0gPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBtYW55IHRva2VucyB0byBnaXZlXHJcbiAgICAgICAgICAgIHRva2Vuc190b19naXZlOiBJbnQgPSBpZiAoZHluYW1pY19yZXdhcmQgPiB0b3RhbF90b2tlbnNfYmVnaW4pIHsgdG90YWxfdG9rZW5zX2JlZ2luIH0gZWxzZSB7IGR5bmFtaWNfcmV3YXJkIH07XHJcblxyXG4gICAgICAgICAgICBhc3NlcnQodG90YWxfdG9rZW5zX2JlZ2luIC0gdG9rZW5zX3RvX2dpdmUgPT0gdG90YWxfdG9rZW5zX2luX3NjcmlwdCwgXCJOb3QgZW5vdWdoIHRva2VucyBzZW50IGJhY2sgdG8gc2NyaXB0XCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSB1c2VyIHJlY2VpdmVzIGV4YWN0bHkgdG9rZW5zX3RvX2dpdmVcclxuICAgICAgICAgICAgYXNzZXJ0KHR4LnZhbHVlX3NlbnRfdG8ocmVkLnJlY2VwaWFudCkuZ2V0X3NhZmUoYXNzZXRfY2xhc3MpID09IHRva2Vuc190b19naXZlLCBcIkluY29ycmVjdCB0b2tlbiBwYXlvdXRcIik7XHJcbiAgICAgICAgICAgIGFzc2VydChpc0NsYWltV2luZG93ID09IHRydWUsIFwiTm90IGluIGNsYWltIHdpbmRvd1wiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAvLyBOb3cgaGFuZGxlIEFEQSBhbmQgc2NyaXB0IG91dHB1dHMgbG9naWNcclxuICAgICAgICAgICAgIGlmICh0b3RhbF90b2tlbnNfaW5fc2NyaXB0ID09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIEZpbmFsIGNsYWltIHNjZW5hcmlvOiBubyB0b2tlbnMgcmVtYWluXHJcbiAgICAgICAgICAgICAgICAvLyBBbGwgQURBIGNhbiBiZSByZXR1cm5lZCB0byB0aGUgY2xhaW1hbnQsIHNvIG5vIHNjcmlwdCBvdXRwdXRzIGFsbG93ZWRcclxuICAgICAgICAgICAgICAgIGFzc2VydChzY3JpcHRfb3V0cHV0cy5sZW5ndGggPT0gMCwgXCJObyBzY3JpcHQgb3V0cHV0cyBzaG91bGQgcmVtYWluIGF0IGZpbmFsIGNsYWltXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBzY2VuYXJpbywgd2UgZG9uJ3QgbmVlZCB0byBlbmZvcmNlIHRvdGFsX2FkYV9pbl9zY3JpcHQgPj0gdG90YWxfYWRhX2JlZ2luLFxyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgYWxsIEFEQSBzaG91bGQgbm93IGJlIGxlYXZpbmcgdGhlIHNjcmlwdCBhbmQgZ29pbmcgdG8gdGhlIGNsYWltYW50LlxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90IGZpbmFsIGNsYWltOiB0b2tlbnMgcmVtYWluIGluIHRoZSBzY3JpcHRcclxuICAgICAgICAgICAgICAgIC8vIFJlcXVpcmUgYXQgbGVhc3QgMiBzY3JpcHQgb3V0cHV0cyBmb3IgY29uY3VycmVuY3kgKGFkanVzdCBhcyBuZWVkZWQpXHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoc2NyaXB0X291dHB1dHMubGVuZ3RoID09IDIsIFwiSSBuZWVkIDIgb3V0cHV0c1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgbm8gQURBIGxlYXZlcyB0aGUgY29udHJhY3QgeWV0XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQodG90YWxfYWRhX2luX3NjcmlwdCA+PSB0b3RhbF9hZGFfYmVnaW4sIFwiTm8gQURBIGNhbiBsZWF2ZSB0aGUgY29udHJhY3RcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSAgICBcclxufWAsIEFycmF5LmZyb20oZGVwU3Jjcy52YWx1ZXMoKSkpXG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuI3Byb2dyYW0ucGFyYW1ldGVycyA9IHBhcmFtZXRlcnNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJvZ3JhbS5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IHBhcmFtVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcm9ncmFtLnBhcmFtVHlwZXNcbiAgICB9XG5cbiAgICBnZXQgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb2dyYW0ucGFyYW1ldGVyc1xuICAgIH1cblxuICAgIGdldCB0eXBlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb2dyYW0udHlwZXNcbiAgICB9XG5cbiAgICBzZXQgcGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgICAgICAgdGhpcy4jcHJvZ3JhbS5wYXJhbWV0ZXJzID0gcGFyYW1zXG4gICAgfVxuXG4gICAgY29tcGlsZShvcHRpbWl6ZSA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcm9ncmFtLmNvbXBpbGUob3B0aW1pemUpXG4gICAgfVxuXG4gICAgZXZhbFBhcmFtKHBhcmFtTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJvZ3JhbS5ldmFsUGFyYW0ocGFyYW1OYW1lKVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./contracts/GameReward.hl\n"));

/***/ })

});