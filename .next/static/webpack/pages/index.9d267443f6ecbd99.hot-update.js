"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/walletActions.ts":
/*!*********************************!*\
  !*** ./public/walletActions.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedeemerVariant: () => (/* binding */ RedeemerVariant),\n/* harmony export */   calculateCountdown: () => (/* binding */ calculateCountdown),\n/* harmony export */   claimTokens: () => (/* binding */ claimTokens),\n/* harmony export */   send: () => (/* binding */ send)\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n/* harmony import */ var _common_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/network */ \"./common/network.ts\");\n/* harmony import */ var _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/GameReward.hl */ \"./contracts/GameReward.hl\");\n/* harmony import */ var _contracts_GameRewardCbor1_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/GameRewardCbor1.json */ \"./contracts/GameRewardCbor1.json\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n // Ensure correct path to your contract\nconst optimize = false;\nfunction calculateCountdown() {\n    const TimeBeginContract = 1736073600000;\n    const TimeNow = Math.floor(Date.now());\n    const CYCLE_DURATION = 600 // 10 minutes \n    ;\n    const offsetInMs = 89680;\n    const elapsedTime = TimeNow - offsetInMs - TimeBeginContract;\n    const elapsedTimeInSeconds = elapsedTime / 1000;\n    const positionInCycle = elapsedTimeInSeconds % CYCLE_DURATION;\n    return positionInCycle;\n}\nvar RedeemerVariant = /*#__PURE__*/ function(RedeemerVariant) {\n    RedeemerVariant[RedeemerVariant[\"Cancel\"] = 0] = \"Cancel\";\n    RedeemerVariant[RedeemerVariant[\"Claim\"] = 1] = \"Claim\"; // Corresponds to 'Claim' variant\n    return RedeemerVariant;\n}({});\n // { cborHex: \"4e4d010000...\" }\nasync function claimTokens(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw new Error(\"Wallet API is not set.\");\n    }\n    try {\n        var _benefitiary_pubKeyHash, _benefitiary_pubKeyHash1;\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Cip30Wallet(walletAPI);\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.WalletHelper(cip30WalletAPI);\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.NetworkParams(networkParamsJson);\n        const policyId = \"5b9006e5051296968c46a3e9206f2f02c8157ff041871290960d6adf\";\n        const name = Buffer.from(\"BERT\", 'utf8').toString('hex');\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.AssetClass({\n            mph: mph,\n            tokenName: name\n        });\n        console.log(assetClass);\n        const utxos = await walletHelper.getUtxos();\n        console.log(\"utxos\", utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const cborHex = _contracts_GameRewardCbor1_json__WEBPACK_IMPORTED_MODULE_2__.cborHex;\n        //const compiledProgram = Program.new(cborHex); \n        //const uplcProgram = new NativeScript(cborHex as unknown as number);\n        const uplcProgram = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.UplcProgram.fromCbor(cborHex);\n        //console.log(\"compiledProgram\" + compiledProgram);\n        console.log(\"benefitiary.pubKeyHash?.hex!)\" + ((_benefitiary_pubKeyHash = benefitiary.pubKeyHash) === null || _benefitiary_pubKeyHash === void 0 ? void 0 : _benefitiary_pubKeyHash.hex));\n        //const gameReward = new GameReward();\n        // Compile the vesting validator\n        //const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Address.fromBech32(\"addr1wygd2q56lc098fn0yrx9n6ngrjfjylxefxqztas6fffz7dsl4y9kn\");\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        console.dir(scriptAddress, {\n            depth: null\n        });\n        console.log(\"benefitiary.pubKeyHash!.hex\", benefitiary.pubKeyHash.hex);\n        const gameDatum = createGameDatum(benefitiary.pubKeyHash.hex);\n        console.log(\"gameDatum\", gameDatum);\n        // console.log(\"Datum\",  Datum.inline(\n        //   new ConstrData(0, [ new ByteArrayData(hexToBytes(benefitiary.pubKeyHash?.hex!)) ])\n        // ))\n        // console.log(\"Datum2\",new ConstrData(0, [ new ByteArrayData(hexToBytes(benefitiary.pubKeyHash?.hex!)) ]))\n        // const gameDatum = new gameReward.types.Datum(\n        //   benefitiary.pubKeyHash,\n        // )\n        // Create the vesting claim redeemer\n        //  const redeember = (new gameReward.types.Redeemer.Claim(benefitiary.pubKeyHash))\n        //  ._toUplcData();\n        // // Convert the hex string to bytes\n        // const recepiantBytes = hexToBytes(benefitiary.hex);\n        // // Create a PubKeyHash object\n        // const recepiantPkh = makePubKeyHash(recepiantBytes);\n        // Convert PubKeyHash to UplcData\n        //const dataRedeemer = recepiantPkh.toUplcData();\n        //const claimRedeemer = makeTxSpendingRedeemer(RedeemerVariant.Claim, dataRedeemer).toCbor();\n        const claimRedeemer = createClaimRedeemer(benefitiary.pubKeyHash.hex);\n        var test = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ConstrData(1, [\n            new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ByteArrayData((_benefitiary_pubKeyHash1 = benefitiary.pubKeyHash) === null || _benefitiary_pubKeyHash1 === void 0 ? void 0 : _benefitiary_pubKeyHash1.hex)\n        ]);\n        console.log(\"claimRedeemer\", claimRedeemer);\n        console.log(\"benefitiary.pubKeyHash\", benefitiary.pubKeyHash);\n        console.log(\"benefitiary.pubKeyHash!.hex\", benefitiary.pubKeyHash.hex);\n        //console.log(filteredUtxos);\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Tx();\n        const sortedUtxos = await fetchUtxos(scriptAddress.toBech32());\n        console.log(\"sortedUtxos\", sortedUtxos);\n        const CLAIM_WINDOW = 20; // 20 seconds \n        const positionInCycle = calculateCountdown();\n        console.log(\"positionInCycle\" + positionInCycle);\n        window.onerror = ()=>positionInCycle < CLAIM_WINDOW;\n        //const dynamicReward = calculateReward(Number(remainingSupply), TOTAL_SUPPLY, BASE_REWARD);\n        const testValueBenefitiary = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Assets([\n            [\n                assetClass,\n                BigInt(sortedUtxos.dynamicReward)\n            ]\n        ]);\n        //const totalAmountUtxo = getTokenAmountFromUtxos(sortedUtxos.selected, assetClass);\n        const amountToSendBack = BigInt(sortedUtxos.totalAmount) - BigInt(sortedUtxos.dynamicReward);\n        const firstPartToSendBack = amountToSendBack / 2n; // First part is half of the total amount\n        const secondPartToSendBack = amountToSendBack - firstPartToSendBack; // Second part is the remainder\n        console.log(\"First \" + firstPartToSendBack);\n        console.log(\"Sevond \" + secondPartToSendBack);\n        console.log(sortedUtxos.dynamicReward);\n        const valueContract1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Assets([\n            [\n                assetClass,\n                firstPartToSendBack\n            ]\n        ]);\n        const valueContract2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Assets([\n            [\n                assetClass,\n                secondPartToSendBack\n            ]\n        ]);\n        //tx.addInputs(utxos[0]);\n        tx.addInputs(sortedUtxos.selected, claimRedeemer);\n        tx.attachScript(uplcProgram);\n        var userClaimOutput = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.TxOutput(benefitiary, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(undefined, testValueBenefitiary));\n        tx.addOutput(userClaimOutput);\n        //Shiiit, fix. Someone could rediredt the rest of the tokens\n        // const addressStr = \"addr_test1qrarqhmklnhwcw3q0zm6sgm3g3l7pua0y36sql9k5ru8dsucglsked5f5yrcf9e9xgxjgmt7xk52knh8h0dgayc00arqlh7g60\";\n        // const address = Address.fromBech32(addressStr);\n        // tx.addOutput(new TxOutput(\n        //   address,\n        //   new Value(undefined, testValueContract) // The amount being claimed\n        // ));\n        // Calculate total ADA in the selected script inputs\n        let totalAdaInInputs = BigInt(0);\n        sortedUtxos.selected.forEach((utxo)=>{\n            totalAdaInInputs += BigInt(utxo.output.value.lovelace);\n        });\n        // Distribute ADA equally (or as required) among script outputs\n        const adaPerScriptOutput = totalAdaInInputs / 2n; // Assuming two script outputs\\\n        if (amountToSendBack != BigInt(0)) {\n            var scriptUtxo1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(adaPerScriptOutput, valueContract1), gameDatum);\n            tx.addOutput(scriptUtxo1);\n            var scriptUtxo2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(totalAdaInInputs - adaPerScriptOutput, valueContract2), gameDatum);\n            tx.addOutput(scriptUtxo2);\n        }\n        //var inputFees = await walletHelper.pickUtxos(new Value(tokenAmountFees));\n        //tx.addInputs(inputFees[0]);\n        console.log(\"We attatched everything!\");\n        await tx.finalize(networkParams, benefitiary, utxos);\n        console.log(\"dali finalizirahme?\");\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"Dali q signirahme?\");\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        console.error(\"submit tx failed\", err);\n        throw err;\n    }\n}\nasync function send(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw console.error(\"walletAPI is not set\");\n    }\n    try {\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Cip30Wallet(walletAPI);\n        // const blockfrost = new BlockFrostIPFS({\n        //   network: network,\n        //   projectId: \"preprodJExO0MAMRgfpXz9Il4IqB2u9ddoylZBT\",\n        // });\n        console.log(\"gmmm\");\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.WalletHelper(cip30WalletAPI);\n        const policyId = \"5b9006e5051296968c46a3e9206f2f02c8157ff041871290960d6adf\";\n        const name = Buffer.from(\"BERT\", 'utf8').toString('hex');\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.AssetClass({\n            mph: mph,\n            tokenName: name // Convert to hex string\n        });\n        console.log(assetClass);\n        const minAda = 1000000; // minimum lovelace to send\n        const minAdaVal = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(BigInt(minAda));\n        const testValueScript = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Assets([\n            [\n                assetClass,\n                BigInt(125550)\n            ]\n        ]);\n        // Get wallet UTXOs\n        const utxos = await walletHelper.pickUtxos(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(undefined, testValueScript));\n        console.log(utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const gameReward = new _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        // Compile the vesting validator\n        const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Address.fromHashes(compiledProgram.validatorHash);\n        //remove\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        // Construct the vesting datum\n        const gameDatum = new gameReward.types.Datum(benefitiary.pubKeyHash);\n        //const redeember = (new gameReward.types.Redeemer.Claim())._toUplcData();\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Tx();\n        tx.addInputs(utxos[0]);\n        tx.addOutput(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Value(undefined, testValueScript), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Datum.inline(gameDatum)));\n        // tx.addOutput(new TxOutput(\n        //   benefitiary,\n        //   minAdaVal,\n        // ));\n        console.log(\"We attatched everything!\");\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.NetworkParams(networkParamsJson);\n        // Send any change back to the buyer\n        await tx.finalize(networkParams, benefitiary, utxos[1]);\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"signed\");\n        // Submit the signed tx\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        throw console.error(\"submit tx failed\", err);\n    }\n}\nasync function fetchUtxos(scriptAddress) {\n    const response = await fetch(\"/api/getUtxos\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            scriptAddress\n        })\n    });\n    const data = await response.json(); // Raw JSON array from backend\n    // `Convert JSON back to TxInput objects\n    const selectedUtxos = data.selected.map((utxo)=>_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.TxInput.fromFullCbor(utxo));\n    const dynamicReward = BigInt(data.dynamicReward);\n    const totalAmount = BigInt(data.totalAmount);\n    console.log(\"selectedUtxos\" + selectedUtxos);\n    console.log(\"dynamicReward\" + dynamicReward);\n    console.log(\"totalAmount\" + totalAmount);\n    return {\n        selected: selectedUtxos,\n        totalAmount: totalAmount,\n        dynamicReward: dynamicReward\n    };\n}\nfunction createClaimRedeemer(recepiantHashHex) {\n    // Convert hex string to byte array\n    const bytes = (0,_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(recepiantHashHex);\n    console.log(\"Redeemer bytes length:\", bytes.length);\n    // Validate the length of PubKeyHash\n    if (bytes.length !== 28) {\n        throw new Error(\"Invalid PubKeyHash length: expected 28 bytes, got \".concat(bytes.length, \" bytes\"));\n    }\n    // Wrap the byte array in ByteArrayData\n    const byteArrayData = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ByteArrayData(bytes);\n    // Construct ConstrData with constructor index 1 for Claim\n    const constrData = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ConstrData(1, [\n        byteArrayData\n    ]);\n    return constrData;\n}\nfunction createGameDatum(beneficiaryHashHex) {\n    // Convert hex string to byte array\n    const bytes = (0,_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(beneficiaryHashHex);\n    console.log(\"Datum bytes length:\", bytes.length);\n    // Validate the length of PubKeyHash\n    if (bytes.length !== 28) {\n        throw new Error(\"Invalid PubKeyHash length for Datum: expected 28 bytes, got \".concat(bytes.length, \" bytes\"));\n    }\n    // Wrap the byte array in ByteArrayData\n    const byteArrayData = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ByteArrayData(bytes);\n    // Construct ConstrData with constructor index 0 for Datum\n    const constrData = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.ConstrData(0, [\n        byteArrayData\n    ]);\n    return _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_3__.Datum.inline(constrData);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bWVcXGhlbGlvc1xcR2FtZVJld2FyZFxccHVibGljXFx3YWxsZXRBY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxyXG4gICAgTmV0d29ya1BhcmFtcyxcclxuICAgIFZhbHVlLFxyXG4gICAgVHhPdXRwdXQsXHJcbiAgICBUeCxcclxuICAgIFR4SW5wdXQsXHJcbiAgICBDaXAzMFdhbGxldCxcclxuICAgIERhdHVtLFxyXG4gICAgQXNzZXRzLFxyXG4gICAgV2FsbGV0SGVscGVyLFxyXG4gICAgTWludGluZ1BvbGljeUhhc2gsXHJcbiAgICBVcGxjUHJvZ3JhbSxcclxuICAgIFVwbGNEYXRhVmFsdWUsXHJcbiAgICBBc3NldENsYXNzLFxyXG4gICAgUHViS2V5SGFzaCxcclxuICAgIEFkZHJlc3MsXHJcbiAgICBDb25zdHJEYXRhLFxyXG4gICAgVXBsY0RhdGEsXHJcbiAgICBCeXRlQXJyYXlEYXRhLFxyXG4gICAgaGV4VG9CeXRlcyxcclxuICB9IGZyb20gXCJAaHlwZXJpb25idC9oZWxpb3NcIjtcclxuICBpbXBvcnQgeyBuZXR3b3JrLCBnZXROZXR3b3JrUGFyYW1zIH0gZnJvbSAnLi4vY29tbW9uL25ldHdvcmsnO1xyXG4gIGltcG9ydCBHYW1lUmV3YXJkIGZyb20gJy4uL2NvbnRyYWN0cy9HYW1lUmV3YXJkLmhsJzsgLy8gRW5zdXJlIGNvcnJlY3QgcGF0aCB0byB5b3VyIGNvbnRyYWN0XHJcbiAgaW1wb3J0IHsgbWFrZVB1YktleUhhc2gsIG1ha2VUeFNwZW5kaW5nUmVkZWVtZXIgfSBmcm9tIFwiQGhlbGlvcy1sYW5nL2xlZGdlclwiO1xyXG4gIGltcG9ydCB7IG1ha2VDb25zdHJEYXRhIH0gZnJvbSBcIkBoZWxpb3MtbGFuZy91cGxjXCI7XHJcblxyXG4gIGNvbnN0IG9wdGltaXplID0gZmFsc2U7XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUNvdW50ZG93bigpOiBudW1iZXIge1xyXG4gIFxyXG4gICAgY29uc3QgVGltZUJlZ2luQ29udHJhY3QgPSAxNzM2MDczNjAwMDAwO1xyXG5cclxuICAgIGNvbnN0IFRpbWVOb3c6IG51bWJlciA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSk7IFxyXG4gICAgY29uc3QgQ1lDTEVfRFVSQVRJT04gPSA2MDAgLy8gMTAgbWludXRlcyBcclxuICAgIGNvbnN0IG9mZnNldEluTXMgPSA4OTY4MDtcclxuICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gVGltZU5vdyAtIChvZmZzZXRJbk1zKSAtIFRpbWVCZWdpbkNvbnRyYWN0O1xyXG4gICAgY29uc3QgZWxhcHNlZFRpbWVJblNlY29uZHMgPSBlbGFwc2VkVGltZSAvIDEwMDA7XHJcbiAgICBjb25zdCBwb3NpdGlvbkluQ3ljbGUgPSBlbGFwc2VkVGltZUluU2Vjb25kcyAlIENZQ0xFX0RVUkFUSU9OO1xyXG4gIFxyXG4gICAgcmV0dXJuIHBvc2l0aW9uSW5DeWNsZTtcclxuICB9IFxyXG4gIFxyXG4gIGV4cG9ydCBlbnVtIFJlZGVlbWVyVmFyaWFudCB7XHJcbiAgICBDYW5jZWwgPSAwLCAvLyBDb3JyZXNwb25kcyB0byAnQ2FuY2VsJyB2YXJpYW50XHJcbiAgICBDbGFpbSA9IDEgICAvLyBDb3JyZXNwb25kcyB0byAnQ2xhaW0nIHZhcmlhbnRcclxufVxyXG5cclxuICBpbXBvcnQgR0FNRV9SRVdBUkRfQ0JPUl9KU09OIGZyb20gJy4uL2NvbnRyYWN0cy9HYW1lUmV3YXJkQ2JvcjEuanNvbic7IC8vIHsgY2JvckhleDogXCI0ZTRkMDEwMDAwLi4uXCIgfVxyXG5cclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xhaW1Ub2tlbnMod2FsbGV0QVBJOiBhbnksIHNldElzTG9hZGluZzogKHZhbDogYm9vbGVhbikgPT4gdm9pZCwgc2V0VHg6ICh2YWw6IHt0eElkOiBzdHJpbmd9KSA9PiB2b2lkKSB7XHJcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcblxyXG4gICAgaWYgKCF3YWxsZXRBUEkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXYWxsZXQgQVBJIGlzIG5vdCBzZXQuXCIpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgY2lwMzBXYWxsZXRBUEkgPSBuZXcgQ2lwMzBXYWxsZXQod2FsbGV0QVBJKTtcclxuXHJcbiAgICAgIGNvbnN0IHdhbGxldEhlbHBlciA9IG5ldyBXYWxsZXRIZWxwZXIoY2lwMzBXYWxsZXRBUEkpO1xyXG4gICAgICAvLyBSZWFkIGluIHRoZSBuZXR3b3JrIHBhcmFtZXRlciBmaWxlXHJcbiAgICAgIGNvbnN0IG5ldHdvcmtQYXJhbXNKc29uID0gYXdhaXQgZ2V0TmV0d29ya1BhcmFtcyhuZXR3b3JrKTtcclxuICAgICAgY29uc3QgbmV0d29ya1BhcmFtcyA9IG5ldyBOZXR3b3JrUGFyYW1zKG5ldHdvcmtQYXJhbXNKc29uKTtcclxuXHJcbiAgICAgIGNvbnN0IHBvbGljeUlkID0gXCI1YjkwMDZlNTA1MTI5Njk2OGM0NmEzZTkyMDZmMmYwMmM4MTU3ZmYwNDE4NzEyOTA5NjBkNmFkZlwiO1xyXG4gICAgICBjb25zdCBuYW1lID0gQnVmZmVyLmZyb20oXCJCRVJUXCIsICd1dGY4JykudG9TdHJpbmcoJ2hleCcpO1xyXG5cclxuICAgICAgY29uc3QgbXBoID0gTWludGluZ1BvbGljeUhhc2guZnJvbUhleChwb2xpY3lJZCk7XHJcblxyXG4gICAgICBjb25zdCBhc3NldENsYXNzID0gbmV3IEFzc2V0Q2xhc3Moe1xyXG4gICAgICAgIG1waDogbXBoLCBcclxuICAgICAgICB0b2tlbk5hbWU6IG5hbWVcclxuICAgICAgfSk7IFxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhhc3NldENsYXNzKVxyXG5cclxuICAgICAgY29uc3QgdXR4b3MgPSBhd2FpdCB3YWxsZXRIZWxwZXIuZ2V0VXR4b3MoKTtcclxuICAgICAgY29uc29sZS5sb2coXCJ1dHhvc1wiLCAgdXR4b3MpO1xyXG5cclxuICAgICAgLy8gR2V0IGNoYW5nZSBhZGRyZXNzXHJcbiAgICAgIGNvbnN0IGJlbmVmaXRpYXJ5ID0gYXdhaXQgd2FsbGV0SGVscGVyLmNoYW5nZUFkZHJlc3M7XHJcbiAgICAgIC8vIExvYWQgaW4gdGhlIHZlc3RpbmcgdmFsaWRhdG9yIHNjcmlwdCAocHJvZ3JhbSlcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGNib3JIZXggPSBHQU1FX1JFV0FSRF9DQk9SX0pTT04uY2JvckhleDsgXHJcbiAgICAgIC8vY29uc3QgY29tcGlsZWRQcm9ncmFtID0gUHJvZ3JhbS5uZXcoY2JvckhleCk7IFxyXG4gICAgICAvL2NvbnN0IHVwbGNQcm9ncmFtID0gbmV3IE5hdGl2ZVNjcmlwdChjYm9ySGV4IGFzIHVua25vd24gYXMgbnVtYmVyKTtcclxuICAgICAgY29uc3QgdXBsY1Byb2dyYW0gPSBVcGxjUHJvZ3JhbS5mcm9tQ2JvcihjYm9ySGV4KTtcclxuICBcclxuICAgICAgLy9jb25zb2xlLmxvZyhcImNvbXBpbGVkUHJvZ3JhbVwiICsgY29tcGlsZWRQcm9ncmFtKTtcclxuICAgICAgY29uc29sZS5sb2coXCJiZW5lZml0aWFyeS5wdWJLZXlIYXNoPy5oZXghKVwiICsgYmVuZWZpdGlhcnkucHViS2V5SGFzaD8uaGV4ISlcclxuXHJcbiAgICBcclxuICAgICAgLy9jb25zdCBnYW1lUmV3YXJkID0gbmV3IEdhbWVSZXdhcmQoKTtcclxuXHJcbiAgICAgIC8vIENvbXBpbGUgdGhlIHZlc3RpbmcgdmFsaWRhdG9yXHJcbiAgICAgIC8vY29uc3QgY29tcGlsZWRQcm9ncmFtID0gZ2FtZVJld2FyZC5jb21waWxlKG9wdGltaXplKTtcclxuICAgICAgY29uc29sZS5sb2coXCJXYWxsZXQgYWRkcmVzczogXCIgKyBiZW5lZml0aWFyeSlcclxuICAgICAgY29uc3Qgc2NyaXB0QWRkcmVzcyA9IEFkZHJlc3MuZnJvbUJlY2gzMihcImFkZHIxd3lnZDJxNTZsYzA5OGZuMHlyeDluNm5ncmpmanlseGVmeHF6dGFzNmZmZno3ZHNsNHk5a25cIilcclxuICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhzY3JpcHRBZGRyZXNzLnRvQmVjaDMyKCkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNjcmlwdCBBZGRyZXNzOlwiICsgc2NyaXB0QWRkcmVzcylcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUuZGlyKHNjcmlwdEFkZHJlc3MsIHsgZGVwdGg6IG51bGwgfSk7XHJcblxyXG4gIFxyXG4gICAgICBjb25zb2xlLmxvZyhcImJlbmVmaXRpYXJ5LnB1YktleUhhc2ghLmhleFwiLCBiZW5lZml0aWFyeS5wdWJLZXlIYXNoIS5oZXgpXHJcbiAgICAgIGNvbnN0IGdhbWVEYXR1bSA9IGNyZWF0ZUdhbWVEYXR1bShiZW5lZml0aWFyeS5wdWJLZXlIYXNoIS5oZXgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImdhbWVEYXR1bVwiLCBnYW1lRGF0dW0pXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiRGF0dW1cIiwgIERhdHVtLmlubGluZShcclxuICAgICAgLy8gICBuZXcgQ29uc3RyRGF0YSgwLCBbIG5ldyBCeXRlQXJyYXlEYXRhKGhleFRvQnl0ZXMoYmVuZWZpdGlhcnkucHViS2V5SGFzaD8uaGV4ISkpIF0pXHJcbiAgICAgIC8vICkpXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiRGF0dW0yXCIsbmV3IENvbnN0ckRhdGEoMCwgWyBuZXcgQnl0ZUFycmF5RGF0YShoZXhUb0J5dGVzKGJlbmVmaXRpYXJ5LnB1YktleUhhc2g/LmhleCEpKSBdKSlcclxuICAgICAgLy8gY29uc3QgZ2FtZURhdHVtID0gbmV3IGdhbWVSZXdhcmQudHlwZXMuRGF0dW0oXHJcbiAgICAgIC8vICAgYmVuZWZpdGlhcnkucHViS2V5SGFzaCxcclxuICAgICAgLy8gKVxyXG5cclxuICAgICAgIC8vIENyZWF0ZSB0aGUgdmVzdGluZyBjbGFpbSByZWRlZW1lclxyXG4gICAgICAvLyAgY29uc3QgcmVkZWVtYmVyID0gKG5ldyBnYW1lUmV3YXJkLnR5cGVzLlJlZGVlbWVyLkNsYWltKGJlbmVmaXRpYXJ5LnB1YktleUhhc2gpKVxyXG4gICAgICAvLyAgLl90b1VwbGNEYXRhKCk7XHJcblxyXG4gICAgICBcclxuICAgICAgLy8gLy8gQ29udmVydCB0aGUgaGV4IHN0cmluZyB0byBieXRlc1xyXG4gICAgICAvLyBjb25zdCByZWNlcGlhbnRCeXRlcyA9IGhleFRvQnl0ZXMoYmVuZWZpdGlhcnkuaGV4KTtcclxuICAgICAgXHJcbiAgICAgIC8vIC8vIENyZWF0ZSBhIFB1YktleUhhc2ggb2JqZWN0XHJcbiAgICAgIC8vIGNvbnN0IHJlY2VwaWFudFBraCA9IG1ha2VQdWJLZXlIYXNoKHJlY2VwaWFudEJ5dGVzKTtcclxuICAgICAgXHJcbiAgICAgIC8vIENvbnZlcnQgUHViS2V5SGFzaCB0byBVcGxjRGF0YVxyXG4gICAgICAvL2NvbnN0IGRhdGFSZWRlZW1lciA9IHJlY2VwaWFudFBraC50b1VwbGNEYXRhKCk7XHJcbiAgICAgIC8vY29uc3QgY2xhaW1SZWRlZW1lciA9IG1ha2VUeFNwZW5kaW5nUmVkZWVtZXIoUmVkZWVtZXJWYXJpYW50LkNsYWltLCBkYXRhUmVkZWVtZXIpLnRvQ2JvcigpO1xyXG5cclxuICAgICAgY29uc3QgY2xhaW1SZWRlZW1lciA9IGNyZWF0ZUNsYWltUmVkZWVtZXIoYmVuZWZpdGlhcnkucHViS2V5SGFzaCEuaGV4KTtcclxuICAgICAgdmFyIHRlc3QgPSBuZXcgQ29uc3RyRGF0YSgxLCBbbmV3IEJ5dGVBcnJheURhdGEoYmVuZWZpdGlhcnkucHViS2V5SGFzaD8uaGV4KV0pO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImNsYWltUmVkZWVtZXJcIiwgY2xhaW1SZWRlZW1lcilcclxuICAgICAgY29uc29sZS5sb2coXCJiZW5lZml0aWFyeS5wdWJLZXlIYXNoXCIsIGJlbmVmaXRpYXJ5LnB1YktleUhhc2gpXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYmVuZWZpdGlhcnkucHViS2V5SGFzaCEuaGV4XCIsIGJlbmVmaXRpYXJ5LnB1YktleUhhc2ghLmhleClcclxuXHJcbiAgICAgIC8vY29uc29sZS5sb2coZmlsdGVyZWRVdHhvcyk7XHJcbiAgICAgIGNvbnN0IHR4ID0gbmV3IFR4KCk7XHJcblxyXG4gICAgICBjb25zdCBzb3J0ZWRVdHhvcyA9IGF3YWl0IGZldGNoVXR4b3Moc2NyaXB0QWRkcmVzcy50b0JlY2gzMigpKVxyXG4gICAgICBjb25zb2xlLmxvZyhcInNvcnRlZFV0eG9zXCIsIHNvcnRlZFV0eG9zKVxyXG4gICAgICBjb25zdCBDTEFJTV9XSU5ET1cgPSAyMDsgLy8gMjAgc2Vjb25kcyBcclxuXHJcbiAgICAgIGNvbnN0IHBvc2l0aW9uSW5DeWNsZSA9IGNhbGN1bGF0ZUNvdW50ZG93bigpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcInBvc2l0aW9uSW5DeWNsZVwiICsgcG9zaXRpb25JbkN5Y2xlKTtcclxuICAgICAgd2luZG93Lm9uZXJyb3IgPSAoKSA9PiBwb3NpdGlvbkluQ3ljbGUgPCBDTEFJTV9XSU5ET1c7XHJcbiAgICAgIC8vY29uc3QgZHluYW1pY1Jld2FyZCA9IGNhbGN1bGF0ZVJld2FyZChOdW1iZXIocmVtYWluaW5nU3VwcGx5KSwgVE9UQUxfU1VQUExZLCBCQVNFX1JFV0FSRCk7XHJcbiAgICAgIGNvbnN0IHRlc3RWYWx1ZUJlbmVmaXRpYXJ5PSBuZXcgQXNzZXRzKFtbYXNzZXRDbGFzcywgQmlnSW50KHNvcnRlZFV0eG9zLmR5bmFtaWNSZXdhcmQpXV0pO1xyXG4gICAgICBcclxuICAgICAgLy9jb25zdCB0b3RhbEFtb3VudFV0eG8gPSBnZXRUb2tlbkFtb3VudEZyb21VdHhvcyhzb3J0ZWRVdHhvcy5zZWxlY3RlZCwgYXNzZXRDbGFzcyk7XHJcbiAgICAgIGNvbnN0IGFtb3VudFRvU2VuZEJhY2sgPSBCaWdJbnQoc29ydGVkVXR4b3MudG90YWxBbW91bnQpIC0gQmlnSW50KHNvcnRlZFV0eG9zLmR5bmFtaWNSZXdhcmQpO1xyXG5cclxuICAgICAgY29uc3QgZmlyc3RQYXJ0VG9TZW5kQmFjayA9IGFtb3VudFRvU2VuZEJhY2sgLyAybjsgLy8gRmlyc3QgcGFydCBpcyBoYWxmIG9mIHRoZSB0b3RhbCBhbW91bnRcclxuICAgICAgY29uc3Qgc2Vjb25kUGFydFRvU2VuZEJhY2sgPSBhbW91bnRUb1NlbmRCYWNrIC0gZmlyc3RQYXJ0VG9TZW5kQmFjazsgLy8gU2Vjb25kIHBhcnQgaXMgdGhlIHJlbWFpbmRlclxyXG4gICAgICBjb25zb2xlLmxvZyhcIkZpcnN0IFwiICsgZmlyc3RQYXJ0VG9TZW5kQmFjaylcclxuICAgICAgY29uc29sZS5sb2coXCJTZXZvbmQgXCIgKyBzZWNvbmRQYXJ0VG9TZW5kQmFjaylcclxuICAgICAgY29uc29sZS5sb2coc29ydGVkVXR4b3MuZHluYW1pY1Jld2FyZClcclxuXHJcbiAgICAgIGNvbnN0IHZhbHVlQ29udHJhY3QxPSBuZXcgQXNzZXRzKFtbYXNzZXRDbGFzcywgZmlyc3RQYXJ0VG9TZW5kQmFja11dKTtcclxuICAgICAgY29uc3QgdmFsdWVDb250cmFjdDI9IG5ldyBBc3NldHMoW1thc3NldENsYXNzLCBzZWNvbmRQYXJ0VG9TZW5kQmFja11dKTtcclxuXHJcbiAgICAgIC8vdHguYWRkSW5wdXRzKHV0eG9zWzBdKTtcclxuICAgICAgdHguYWRkSW5wdXRzKHNvcnRlZFV0eG9zLnNlbGVjdGVkLCBjbGFpbVJlZGVlbWVyKTtcclxuICAgICAgdHguYXR0YWNoU2NyaXB0KHVwbGNQcm9ncmFtKTtcclxuXHJcbiAgICAgIHZhciB1c2VyQ2xhaW1PdXRwdXQgPSBuZXcgVHhPdXRwdXQoXHJcbiAgICAgICAgYmVuZWZpdGlhcnksXHJcbiAgICAgICAgbmV3IFZhbHVlKHVuZGVmaW5lZCwgdGVzdFZhbHVlQmVuZWZpdGlhcnkpKTtcclxuXHJcbiAgICAgIHR4LmFkZE91dHB1dCh1c2VyQ2xhaW1PdXRwdXQpXHJcblxyXG4gICAgXHJcbiAgICAvL1NoaWlpdCwgZml4LiBTb21lb25lIGNvdWxkIHJlZGlyZWR0IHRoZSByZXN0IG9mIHRoZSB0b2tlbnNcclxuICAgIC8vIGNvbnN0IGFkZHJlc3NTdHIgPSBcImFkZHJfdGVzdDFxcmFycWhta2xuaHdjdzNxMHptNnNnbTNnM2w3cHVhMHkzNnNxbDlrNXJ1OGRzdWNnbHNrZWQ1ZjV5cmNmOWU5eGd4amdtdDd4azUya25oOGgwZGdheWMwMGFycWxoN2c2MFwiO1xyXG4gICAgLy8gY29uc3QgYWRkcmVzcyA9IEFkZHJlc3MuZnJvbUJlY2gzMihhZGRyZXNzU3RyKTtcclxuICAgIC8vIHR4LmFkZE91dHB1dChuZXcgVHhPdXRwdXQoXHJcbiAgICAvLyAgIGFkZHJlc3MsXHJcbiAgICAvLyAgIG5ldyBWYWx1ZSh1bmRlZmluZWQsIHRlc3RWYWx1ZUNvbnRyYWN0KSAvLyBUaGUgYW1vdW50IGJlaW5nIGNsYWltZWRcclxuICAgIC8vICkpO1xyXG4gICAgXHJcbiAgICAvLyBDYWxjdWxhdGUgdG90YWwgQURBIGluIHRoZSBzZWxlY3RlZCBzY3JpcHQgaW5wdXRzXHJcbiAgICBsZXQgdG90YWxBZGFJbklucHV0cyA9IEJpZ0ludCgwKTtcclxuICAgIHNvcnRlZFV0eG9zLnNlbGVjdGVkLmZvckVhY2godXR4byA9PiB7XHJcbiAgICAgICAgdG90YWxBZGFJbklucHV0cyArPSBCaWdJbnQodXR4by5vdXRwdXQudmFsdWUubG92ZWxhY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRGlzdHJpYnV0ZSBBREEgZXF1YWxseSAob3IgYXMgcmVxdWlyZWQpIGFtb25nIHNjcmlwdCBvdXRwdXRzXHJcbiAgICBjb25zdCBhZGFQZXJTY3JpcHRPdXRwdXQgPSB0b3RhbEFkYUluSW5wdXRzIC8gMm47IC8vIEFzc3VtaW5nIHR3byBzY3JpcHQgb3V0cHV0c1xcXHJcblxyXG4gICAgaWYgKGFtb3VudFRvU2VuZEJhY2sgIT0gQmlnSW50KDApKXtcclxuICAgICAgdmFyIHNjcmlwdFV0eG8xID1uZXcgVHhPdXRwdXQoXHJcbiAgICAgICAgc2NyaXB0QWRkcmVzcyxcclxuICAgICAgICBuZXcgVmFsdWUoYWRhUGVyU2NyaXB0T3V0cHV0LCB2YWx1ZUNvbnRyYWN0MSksICAvLyBSZW1haW5pbmcgdHJlYXN1cnkgdG9rZW5zXHJcbiAgICAgICAgZ2FtZURhdHVtXHJcbiAgICAgICApO1xyXG5cclxuICAgICAgIHR4LmFkZE91dHB1dChzY3JpcHRVdHhvMSk7XHJcblxyXG4gICAgICB2YXIgc2NyaXB0VXR4bzIgPSBuZXcgVHhPdXRwdXQoXHJcbiAgICAgICAgc2NyaXB0QWRkcmVzcyxcclxuICAgICAgICBuZXcgVmFsdWUodG90YWxBZGFJbklucHV0cyAtIGFkYVBlclNjcmlwdE91dHB1dCwgdmFsdWVDb250cmFjdDIpLCAgLy8gUmVtYWluaW5nIHRyZWFzdXJ5IHRva2Vuc1xyXG4gICAgICAgIGdhbWVEYXR1bVxyXG4gICAgICAgKTtcclxuICAgIFxyXG4gICAgICAgdHguYWRkT3V0cHV0KHNjcmlwdFV0eG8yKTtcclxuICAgIH0gIFxyXG5cclxuICAgICAgLy92YXIgaW5wdXRGZWVzID0gYXdhaXQgd2FsbGV0SGVscGVyLnBpY2tVdHhvcyhuZXcgVmFsdWUodG9rZW5BbW91bnRGZWVzKSk7XHJcbiAgICAgIFxyXG4gICAgICAvL3R4LmFkZElucHV0cyhpbnB1dEZlZXNbMF0pO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIldlIGF0dGF0Y2hlZCBldmVyeXRoaW5nIVwiKVxyXG5cclxuICAgICAgXHJcblxyXG4gICAgICBhd2FpdCB0eC5maW5hbGl6ZShuZXR3b3JrUGFyYW1zLCBiZW5lZml0aWFyeSwgdXR4b3MpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImRhbGkgZmluYWxpemlyYWhtZT9cIilcclxuICAgICAgLy8gU2lnbiB0aGUgdW5zaWduZWQgdHggdG8gZ2V0IHRoZSB3aXRuZXNzXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBhd2FpdCBjaXAzMFdhbGxldEFQSS5zaWduVHgodHgpO1xyXG4gICAgICB0eC5hZGRTaWduYXR1cmVzKHNpZ25hdHVyZXMpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkRhbGkgcSBzaWduaXJhaG1lP1wiKVxyXG5cclxuICAgICAgY29uc3QgdHhIYXNoID0gYXdhaXQgY2lwMzBXYWxsZXRBUEkuc3VibWl0VHgodHgpO1xyXG5cclxuICAgICAgc2V0VHgoeyB0eElkOiB0eEhhc2guaGV4IH0pO1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcInN1Ym1pdCB0eCBmYWlsZWRcIiwgZXJyKTtcclxuICAgICAgICB0aHJvdyBlcnI7IFxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZCh3YWxsZXRBUEk6IGFueSwgc2V0SXNMb2FkaW5nOiAodmFsOiBib29sZWFuKSA9PiB2b2lkLCBzZXRUeDogKHZhbDoge3R4SWQ6IHN0cmluZ30pID0+IHZvaWQpIHtcclxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuXHJcbiAgICBpZiAoIXdhbGxldEFQSSkge1xyXG4gICAgICB0aHJvdyBjb25zb2xlLmVycm9yKFwid2FsbGV0QVBJIGlzIG5vdCBzZXRcIik7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjaXAzMFdhbGxldEFQSSA9IG5ldyBDaXAzMFdhbGxldCh3YWxsZXRBUEkpO1xyXG4gICAgICAvLyBjb25zdCBibG9ja2Zyb3N0ID0gbmV3IEJsb2NrRnJvc3RJUEZTKHtcclxuICAgICAgLy8gICBuZXR3b3JrOiBuZXR3b3JrLFxyXG4gICAgICAvLyAgIHByb2plY3RJZDogXCJwcmVwcm9kSkV4TzBNQU1SZ2ZwWHo5SWw0SXFCMnU5ZGRveWxaQlRcIixcclxuICAgICAgLy8gfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZ21tbVwiKVxyXG5cclxuICAgICAgY29uc3Qgd2FsbGV0SGVscGVyID0gbmV3IFdhbGxldEhlbHBlcihjaXAzMFdhbGxldEFQSSk7XHJcblxyXG4gICAgICBjb25zdCBwb2xpY3lJZCA9IFwiNWI5MDA2ZTUwNTEyOTY5NjhjNDZhM2U5MjA2ZjJmMDJjODE1N2ZmMDQxODcxMjkwOTYwZDZhZGZcIjtcclxuICAgICAgY29uc3QgbmFtZSA9IEJ1ZmZlci5mcm9tKFwiQkVSVFwiLCAndXRmOCcpLnRvU3RyaW5nKCdoZXgnKTtcclxuXHJcbiAgICAgIGNvbnN0IG1waCA9IE1pbnRpbmdQb2xpY3lIYXNoLmZyb21IZXgocG9saWN5SWQpO1xyXG5cclxuICAgICAgY29uc3QgYXNzZXRDbGFzcyA9IG5ldyBBc3NldENsYXNzKHtcclxuICAgICAgICBtcGg6IG1waCwgLy8gWW91ciBwb2xpY3kgaGFzaFxyXG4gICAgICAgIHRva2VuTmFtZTogbmFtZS8vIENvbnZlcnQgdG8gaGV4IHN0cmluZ1xyXG4gICAgICB9KTsgXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGFzc2V0Q2xhc3MpXHJcblxyXG4gICAgICBjb25zdCBtaW5BZGEgOiBudW1iZXIgPSAxXzAwMF8wMDA7IC8vIG1pbmltdW0gbG92ZWxhY2UgdG8gc2VuZFxyXG4gICAgICBjb25zdCBtaW5BZGFWYWwgPSBuZXcgVmFsdWUoQmlnSW50KG1pbkFkYSkpO1xyXG5cclxuICAgICAgY29uc3QgdGVzdFZhbHVlU2NyaXB0ID0gbmV3IEFzc2V0cyhbW2Fzc2V0Q2xhc3MsIEJpZ0ludCgxMjU1NTApXV0pO1xyXG5cclxuICAgICAgLy8gR2V0IHdhbGxldCBVVFhPc1xyXG4gICAgICBjb25zdCB1dHhvcyA9IGF3YWl0IHdhbGxldEhlbHBlci5waWNrVXR4b3MobmV3IFZhbHVlKHVuZGVmaW5lZCwgdGVzdFZhbHVlU2NyaXB0KSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHV0eG9zKTtcclxuXHJcbiAgICAgIC8vIEdldCBjaGFuZ2UgYWRkcmVzc1xyXG4gICAgICBjb25zdCBiZW5lZml0aWFyeSA9IGF3YWl0IHdhbGxldEhlbHBlci5jaGFuZ2VBZGRyZXNzO1xyXG4gICAgICAvLyBMb2FkIGluIHRoZSB2ZXN0aW5nIHZhbGlkYXRvciBzY3JpcHQgKHByb2dyYW0pXHJcblxyXG4gICAgICBjb25zdCBnYW1lUmV3YXJkID0gbmV3IEdhbWVSZXdhcmQoKTtcclxuXHJcbiAgICAgIC8vIENvbXBpbGUgdGhlIHZlc3RpbmcgdmFsaWRhdG9yXHJcbiAgICAgIGNvbnN0IGNvbXBpbGVkUHJvZ3JhbSA9IGdhbWVSZXdhcmQuY29tcGlsZShvcHRpbWl6ZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiV2FsbGV0IGFkZHJlc3M6IFwiICsgYmVuZWZpdGlhcnkpXHJcbiAgICAgIGNvbnN0IHNjcmlwdEFkZHJlc3MgPSBBZGRyZXNzLmZyb21IYXNoZXMoY29tcGlsZWRQcm9ncmFtLnZhbGlkYXRvckhhc2gpXHJcbiAgICBcclxuICAgICAgICAvL3JlbW92ZVxyXG4gICAgICBjb25zb2xlLmxvZyhzY3JpcHRBZGRyZXNzLnRvQmVjaDMyKCkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNjcmlwdCBBZGRyZXNzOlwiICsgc2NyaXB0QWRkcmVzcylcclxuICAgICAgXHJcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgdmVzdGluZyBkYXR1bVxyXG4gICAgICBjb25zdCBnYW1lRGF0dW0gPSBuZXcgZ2FtZVJld2FyZC50eXBlcy5EYXR1bShcclxuICAgICAgICBiZW5lZml0aWFyeS5wdWJLZXlIYXNoLFxyXG4gICAgICApXHJcbiAgICBcclxuICAgIC8vY29uc3QgcmVkZWVtYmVyID0gKG5ldyBnYW1lUmV3YXJkLnR5cGVzLlJlZGVlbWVyLkNsYWltKCkpLl90b1VwbGNEYXRhKCk7XHJcbiAgICBcclxuICAgICAgY29uc3QgdHggPSBuZXcgVHgoKTtcclxuICAgICAgdHguYWRkSW5wdXRzKHV0eG9zWzBdKTtcclxuICAgICAgdHguYWRkT3V0cHV0KG5ldyBUeE91dHB1dChcclxuICAgICAgICBzY3JpcHRBZGRyZXNzLFxyXG4gICAgICAgIG5ldyBWYWx1ZSh1bmRlZmluZWQsIHRlc3RWYWx1ZVNjcmlwdCksXHJcbiAgICAgICAgRGF0dW0uaW5saW5lKGdhbWVEYXR1bSlcclxuICAgICAgKSk7XHJcblxyXG4gICAgICAvLyB0eC5hZGRPdXRwdXQobmV3IFR4T3V0cHV0KFxyXG4gICAgICAvLyAgIGJlbmVmaXRpYXJ5LFxyXG4gICAgICAvLyAgIG1pbkFkYVZhbCxcclxuICAgICAgLy8gKSk7XHJcbiAgICBcclxuICAgICAgY29uc29sZS5sb2coXCJXZSBhdHRhdGNoZWQgZXZlcnl0aGluZyFcIilcclxuXHJcbiAgICAgIC8vIFJlYWQgaW4gdGhlIG5ldHdvcmsgcGFyYW1ldGVyIGZpbGVcclxuICAgICAgY29uc3QgbmV0d29ya1BhcmFtc0pzb24gPSBhd2FpdCBnZXROZXR3b3JrUGFyYW1zKG5ldHdvcmspO1xyXG4gICAgICBjb25zdCBuZXR3b3JrUGFyYW1zID0gbmV3IE5ldHdvcmtQYXJhbXMobmV0d29ya1BhcmFtc0pzb24pO1xyXG5cclxuICAgICAgLy8gU2VuZCBhbnkgY2hhbmdlIGJhY2sgdG8gdGhlIGJ1eWVyXHJcbiAgICAgIGF3YWl0IHR4LmZpbmFsaXplKG5ldHdvcmtQYXJhbXMsIGJlbmVmaXRpYXJ5LCB1dHhvc1sxXSk7XHJcblxyXG4gICAgICAvLyBTaWduIHRoZSB1bnNpZ25lZCB0eCB0byBnZXQgdGhlIHdpdG5lc3NcclxuICAgICAgY29uc3Qgc2lnbmF0dXJlcyA9IGF3YWl0IGNpcDMwV2FsbGV0QVBJLnNpZ25UeCh0eCk7XHJcbiAgICAgIHR4LmFkZFNpZ25hdHVyZXMoc2lnbmF0dXJlcyk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhcInNpZ25lZFwiKTtcclxuICAgICAgLy8gU3VibWl0IHRoZSBzaWduZWQgdHhcclxuICAgICAgY29uc3QgdHhIYXNoID0gYXdhaXQgY2lwMzBXYWxsZXRBUEkuc3VibWl0VHgodHgpO1xyXG5cclxuICAgICAgc2V0VHgoeyB0eElkOiB0eEhhc2guaGV4IH0pO1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcihcInN1Ym1pdCB0eCBmYWlsZWRcIiwgZXJyKTtcclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICBhc3luYyBmdW5jdGlvbiBmZXRjaFV0eG9zKHNjcmlwdEFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8eyBzZWxlY3RlZDogVHhJbnB1dFtdOyB0b3RhbEFtb3VudDogYmlnaW50LCBkeW5hbWljUmV3YXJkOiBiaWdpbnQgfT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9nZXRVdHhvc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHNjcmlwdEFkZHJlc3N9KSxcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsgLy8gUmF3IEpTT04gYXJyYXkgZnJvbSBiYWNrZW5kXHJcbiAgXHJcbiAgICAvLyBgQ29udmVydCBKU09OIGJhY2sgdG8gVHhJbnB1dCBvYmplY3RzXHJcbiAgICBjb25zdCBzZWxlY3RlZFV0eG9zID0gZGF0YS5zZWxlY3RlZC5tYXAoKHV0eG86IGFueSkgPT4gVHhJbnB1dC5mcm9tRnVsbENib3IodXR4bykpO1xyXG4gICAgY29uc3QgZHluYW1pY1Jld2FyZDogYmlnaW50ID0gQmlnSW50KGRhdGEuZHluYW1pY1Jld2FyZCk7XHJcbiAgICBjb25zdCB0b3RhbEFtb3VudDogYmlnaW50ID0gQmlnSW50KGRhdGEudG90YWxBbW91bnQpO1xyXG4gICAgY29uc29sZS5sb2coXCJzZWxlY3RlZFV0eG9zXCIrIHNlbGVjdGVkVXR4b3MpO1xyXG4gICAgY29uc29sZS5sb2coXCJkeW5hbWljUmV3YXJkXCIgKyBkeW5hbWljUmV3YXJkKTtcclxuICAgIGNvbnNvbGUubG9nKFwidG90YWxBbW91bnRcIisgdG90YWxBbW91bnQpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZFV0eG9zLFxyXG4gICAgICB0b3RhbEFtb3VudDogdG90YWxBbW91bnQsXHJcbiAgICAgIGR5bmFtaWNSZXdhcmQ6IGR5bmFtaWNSZXdhcmQsXHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQ2xhaW1SZWRlZW1lcihyZWNlcGlhbnRIYXNoSGV4OiBzdHJpbmcpOiBVcGxjRGF0YSB7XHJcbiAgICAvLyBDb252ZXJ0IGhleCBzdHJpbmcgdG8gYnl0ZSBhcnJheVxyXG4gICAgY29uc3QgYnl0ZXMgPSBoZXhUb0J5dGVzKHJlY2VwaWFudEhhc2hIZXgpO1xyXG4gICAgY29uc29sZS5sb2coXCJSZWRlZW1lciBieXRlcyBsZW5ndGg6XCIsIGJ5dGVzLmxlbmd0aCk7XHJcbiAgICBcclxuICAgIC8vIFZhbGlkYXRlIHRoZSBsZW5ndGggb2YgUHViS2V5SGFzaFxyXG4gICAgaWYgKGJ5dGVzLmxlbmd0aCAhPT0gMjgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgUHViS2V5SGFzaCBsZW5ndGg6IGV4cGVjdGVkIDI4IGJ5dGVzLCBnb3QgJHtieXRlcy5sZW5ndGh9IGJ5dGVzYCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFdyYXAgdGhlIGJ5dGUgYXJyYXkgaW4gQnl0ZUFycmF5RGF0YVxyXG4gICAgY29uc3QgYnl0ZUFycmF5RGF0YSA9IG5ldyBCeXRlQXJyYXlEYXRhKGJ5dGVzKTtcclxuICAgIFxyXG4gICAgLy8gQ29uc3RydWN0IENvbnN0ckRhdGEgd2l0aCBjb25zdHJ1Y3RvciBpbmRleCAxIGZvciBDbGFpbVxyXG4gICAgY29uc3QgY29uc3RyRGF0YSA9IG5ldyBDb25zdHJEYXRhKDEsIFtieXRlQXJyYXlEYXRhXSk7XHJcbiAgICBcclxuICAgIHJldHVybiBjb25zdHJEYXRhO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUdhbWVEYXR1bShiZW5lZmljaWFyeUhhc2hIZXg6IHN0cmluZyk6IERhdHVtIHtcclxuICAvLyBDb252ZXJ0IGhleCBzdHJpbmcgdG8gYnl0ZSBhcnJheVxyXG4gIGNvbnN0IGJ5dGVzID0gaGV4VG9CeXRlcyhiZW5lZmljaWFyeUhhc2hIZXgpO1xyXG4gIGNvbnNvbGUubG9nKFwiRGF0dW0gYnl0ZXMgbGVuZ3RoOlwiLCBieXRlcy5sZW5ndGgpO1xyXG4gIFxyXG4gIC8vIFZhbGlkYXRlIHRoZSBsZW5ndGggb2YgUHViS2V5SGFzaFxyXG4gIGlmIChieXRlcy5sZW5ndGggIT09IDI4KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBQdWJLZXlIYXNoIGxlbmd0aCBmb3IgRGF0dW06IGV4cGVjdGVkIDI4IGJ5dGVzLCBnb3QgJHtieXRlcy5sZW5ndGh9IGJ5dGVzYCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFdyYXAgdGhlIGJ5dGUgYXJyYXkgaW4gQnl0ZUFycmF5RGF0YVxyXG4gIGNvbnN0IGJ5dGVBcnJheURhdGEgPSBuZXcgQnl0ZUFycmF5RGF0YShieXRlcyk7XHJcbiAgXHJcbiAgLy8gQ29uc3RydWN0IENvbnN0ckRhdGEgd2l0aCBjb25zdHJ1Y3RvciBpbmRleCAwIGZvciBEYXR1bVxyXG4gIGNvbnN0IGNvbnN0ckRhdGEgPSBuZXcgQ29uc3RyRGF0YSgwLCBbYnl0ZUFycmF5RGF0YV0pO1xyXG4gIFxyXG4gIHJldHVybiBEYXR1bS5pbmxpbmUoY29uc3RyRGF0YSk7XHJcbn0iXSwibmFtZXMiOlsiTmV0d29ya1BhcmFtcyIsIlZhbHVlIiwiVHhPdXRwdXQiLCJUeCIsIlR4SW5wdXQiLCJDaXAzMFdhbGxldCIsIkRhdHVtIiwiQXNzZXRzIiwiV2FsbGV0SGVscGVyIiwiTWludGluZ1BvbGljeUhhc2giLCJVcGxjUHJvZ3JhbSIsIkFzc2V0Q2xhc3MiLCJBZGRyZXNzIiwiQ29uc3RyRGF0YSIsIkJ5dGVBcnJheURhdGEiLCJoZXhUb0J5dGVzIiwibmV0d29yayIsImdldE5ldHdvcmtQYXJhbXMiLCJHYW1lUmV3YXJkIiwib3B0aW1pemUiLCJjYWxjdWxhdGVDb3VudGRvd24iLCJUaW1lQmVnaW5Db250cmFjdCIsIlRpbWVOb3ciLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiQ1lDTEVfRFVSQVRJT04iLCJvZmZzZXRJbk1zIiwiZWxhcHNlZFRpbWUiLCJlbGFwc2VkVGltZUluU2Vjb25kcyIsInBvc2l0aW9uSW5DeWNsZSIsIlJlZGVlbWVyVmFyaWFudCIsIkdBTUVfUkVXQVJEX0NCT1JfSlNPTiIsImNsYWltVG9rZW5zIiwid2FsbGV0QVBJIiwic2V0SXNMb2FkaW5nIiwic2V0VHgiLCJFcnJvciIsImJlbmVmaXRpYXJ5IiwiY2lwMzBXYWxsZXRBUEkiLCJ3YWxsZXRIZWxwZXIiLCJuZXR3b3JrUGFyYW1zSnNvbiIsIm5ldHdvcmtQYXJhbXMiLCJwb2xpY3lJZCIsIm5hbWUiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJtcGgiLCJmcm9tSGV4IiwiYXNzZXRDbGFzcyIsInRva2VuTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJ1dHhvcyIsImdldFV0eG9zIiwiY2hhbmdlQWRkcmVzcyIsImNib3JIZXgiLCJ1cGxjUHJvZ3JhbSIsImZyb21DYm9yIiwicHViS2V5SGFzaCIsImhleCIsInNjcmlwdEFkZHJlc3MiLCJmcm9tQmVjaDMyIiwidG9CZWNoMzIiLCJkaXIiLCJkZXB0aCIsImdhbWVEYXR1bSIsImNyZWF0ZUdhbWVEYXR1bSIsImNsYWltUmVkZWVtZXIiLCJjcmVhdGVDbGFpbVJlZGVlbWVyIiwidGVzdCIsInR4Iiwic29ydGVkVXR4b3MiLCJmZXRjaFV0eG9zIiwiQ0xBSU1fV0lORE9XIiwid2luZG93Iiwib25lcnJvciIsInRlc3RWYWx1ZUJlbmVmaXRpYXJ5IiwiQmlnSW50IiwiZHluYW1pY1Jld2FyZCIsImFtb3VudFRvU2VuZEJhY2siLCJ0b3RhbEFtb3VudCIsImZpcnN0UGFydFRvU2VuZEJhY2siLCJzZWNvbmRQYXJ0VG9TZW5kQmFjayIsInZhbHVlQ29udHJhY3QxIiwidmFsdWVDb250cmFjdDIiLCJhZGRJbnB1dHMiLCJzZWxlY3RlZCIsImF0dGFjaFNjcmlwdCIsInVzZXJDbGFpbU91dHB1dCIsInVuZGVmaW5lZCIsImFkZE91dHB1dCIsInRvdGFsQWRhSW5JbnB1dHMiLCJmb3JFYWNoIiwidXR4byIsIm91dHB1dCIsInZhbHVlIiwibG92ZWxhY2UiLCJhZGFQZXJTY3JpcHRPdXRwdXQiLCJzY3JpcHRVdHhvMSIsInNjcmlwdFV0eG8yIiwiZmluYWxpemUiLCJzaWduYXR1cmVzIiwic2lnblR4IiwiYWRkU2lnbmF0dXJlcyIsInR4SGFzaCIsInN1Ym1pdFR4IiwidHhJZCIsImVyciIsImVycm9yIiwic2VuZCIsIm1pbkFkYSIsIm1pbkFkYVZhbCIsInRlc3RWYWx1ZVNjcmlwdCIsInBpY2tVdHhvcyIsImdhbWVSZXdhcmQiLCJjb21waWxlZFByb2dyYW0iLCJjb21waWxlIiwiZnJvbUhhc2hlcyIsInZhbGlkYXRvckhhc2giLCJ0eXBlcyIsImlubGluZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwianNvbiIsInNlbGVjdGVkVXR4b3MiLCJtYXAiLCJmcm9tRnVsbENib3IiLCJyZWNlcGlhbnRIYXNoSGV4IiwiYnl0ZXMiLCJsZW5ndGgiLCJieXRlQXJyYXlEYXRhIiwiY29uc3RyRGF0YSIsImJlbmVmaWNpYXJ5SGFzaEhleCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/walletActions.ts\n"));

/***/ })

});