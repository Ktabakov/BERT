"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/whitepaper",{

/***/ "./contracts/GameReward.hl":
/*!*********************************!*\
  !*** ./contracts/GameReward.hl ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Program; }\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n\n//wraps helios.Program\nclass Program {\n    #program\n\n    constructor(parameters = {}) {\n        // load all the dependencies\n        const allDeps = []\n\n        const depSrcs = new Map()\n\n        function addDepSrcs(dep) {\n            depSrcs.set(dep.name, dep.src)\n\n            for (let d of dep.dependencies) {\n                addDepSrcs(d)\n            }\n        }\n\n        for (let d of allDeps) {\n            addDepSrcs(d)\n        }\n\n        this.#program = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_0__.Program.new(`spending GameReward\r\n/* \r\n Create a datum with the benefitiary PubKeyHash that will be included \r\n into each UTXO locked at this script address.\r\n*/\r\nstruct Datum {\r\n    benefitiary: PubKeyHash\r\n}\r\n\r\n/*\r\n The vesting contract can be either canceled by the benefitiary\r\n or claimed by the beneficiary\r\n */\r\nenum Redeemer {\r\n    Cancel\r\n    Claim {\r\n        recepiant: PubKeyHash\r\n    }\r\n}\r\n\r\nconst TOKEN_POLICY_ID: MintingPolicyHash = MintingPolicyHash::new(#e16c2dc8ae937e8d3790c7fd7168d7b994621ba14ca11415f39fed72)\r\n   \r\nconst HALVING_PERIOD: Int = 7776000  // 3 months in seconds\r\nconst MAX_HALVINGS: Int = 2\r\nconst BASE_REWARD: Int = 1000  // Initial reward in tokens\r\n\r\nfunc calculate_reward(current_time: Time) -> Int {\r\n    // Start contract at \r\n    TimeBeginContract: Time = Time::new(1735134300000);  \r\n\r\n    // Calculate time elapsed in seconds\r\n    time_elapsed: Duration = current_time - TimeBeginContract;\r\n    time_elapsed_in_seconds: Int = time_elapsed / Duration::new(1_000);  // Convert to seconds\r\n\r\n    // Calculate the number of halving periods (each period is 1 month)\r\n    halving_steps: Int = time_elapsed_in_seconds / HALVING_PERIOD;\r\n    print(current_time.show());\r\n    // Ensure the number of halvings doesn't exceed the maximum allowed\r\n    halving_steps = if (halving_steps > MAX_HALVINGS) { MAX_HALVINGS } else { halving_steps };\r\n    print(halving_steps.show());\r\n    // Calculate reward using simple multiplication and division\r\n    if (halving_steps == 0) {\r\n        BASE_REWARD\r\n    } else if (halving_steps == 1) {\r\n        BASE_REWARD / 2\r\n    } else if (halving_steps == 2) {\r\n        BASE_REWARD / 4\r\n    } else {\r\n        BASE_REWARD / 4\r\n    }\r\n\r\n}\r\n\r\nconst CLAIM_WINDOW: Int = 20 \r\nconst CYCLE_DURATION: Int = 580 \r\n\r\nfunc IsClaimWindow(current_time: Time) -> Bool {\r\n    // Start contract \r\n    TimeBeginContract: Time = Time::new(1735134300);  \r\n\r\n     // Calculate the offset from the deployment start\r\n     elapsed_time: Duration = current_time - TimeBeginContract;\r\n     time_elapsed_in_seconds: Int = elapsed_time / Duration::new(1);  // Convert to seconds\r\n\r\n // Determine the position within the current cycle\r\n    position_in_cycle: Int = time_elapsed_in_seconds % CYCLE_DURATION;\r\n    in_claim_window: Bool = position_in_cycle <= CLAIM_WINDOW;\r\n    print(position_in_cycle.show());\r\n    in_claim_window\r\n}\r\n\r\n// Define the main validator function\r\nfunc main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {\r\n    tx: Tx = ctx.tx;\r\n\r\n        // AssetClass for the treasury tokens\r\n        asset_class: AssetClass = AssetClass::new(\r\n            TOKEN_POLICY_ID,  \r\n            \"MIN\".encode_utf8()\r\n        );\r\n\r\n       validator_hash: ValidatorHash = ctx.get_current_validator_hash();\r\n\r\n        // Get all outputs locked at the script address\r\n       script_outputs: []TxOutput = tx.outputs_locked_by(validator_hash);\r\n\r\n          total_tokens_begin: Int = tx.inputs.fold(\r\n            (sum: Int, input: TxInput) -> Int {\r\n              \r\n                sum + input.output.value.get_safe(asset_class)\r\n            },\r\n            0\r\n        );\r\n\r\n            // Sum up all tokens in these outputs\r\n            total_tokens_in_script: Int = script_outputs.fold(\r\n                (sum: Int, output: TxOutput) -> Int {\r\n                sum + output.value.get_safe(asset_class)\r\n                },\r\n               0 // Initial sum\r\n            );\r\n            \r\n        // Calculate total ADA in script inputs\r\n        total_ada_begin: Int = tx.inputs.fold((sum: Int, input: TxInput) -> Int {\r\n            if (input.output.address.credential.switch {\r\n                vh_credential: Validator => vh_credential.hash == validator_hash,\r\n                _ => false\r\n            }) {\r\n                sum + input.output.value.get_lovelace()\r\n            } else {\r\n                sum\r\n            }\r\n        }, 0);\r\n\r\n        // Calculate total ADA in script outputs\r\n        total_ada_in_script: Int = tx.outputs.fold((sum: Int, output: TxOutput) -> Int {\r\n            if (output.address.credential.switch {\r\n                vh_credential: Validator => vh_credential.hash == validator_hash,\r\n                _ => false\r\n            }) {\r\n                sum + output.value.get_lovelace()\r\n            } else {\r\n                sum\r\n            }\r\n        }, 0);\r\n\r\n    current_time: Time = tx.time_range.start;  // Get current time as POSIXTime (seconds since Unix epoch)\r\n    // Calculate dynamic reward based on the remaining supply\r\n    dynamic_reward: Int = calculate_reward(current_time);\r\n\r\n    isClaimWindow: Bool = IsClaimWindow(current_time);\r\n\r\n     //expected_value: Value = Value::new(asset_class, EXPECTED_AMOUNT);\r\n    // Depending on the redeemer provided in the transaction, process accordingly.\r\n    redeemer.switch {\r\n        Cancel => {\r\n            // Tx must be signed by pkh in datum\r\n            tx.is_signed_by(datum.benefitiary) \r\n        },\r\n        red: Claim => {\r\n\r\n            // Determine how many tokens to give\r\n            tokens_to_give: Int = if (dynamic_reward > total_tokens_begin) { total_tokens_begin } else { dynamic_reward };\r\n\r\n            assert(total_tokens_begin - tokens_to_give == total_tokens_in_script, \"Not enough tokens sent back to script\");\r\n            \r\n              // Check that the user receives exactly tokens_to_give\r\n            assert(tx.value_sent_to(red.recepiant).get_safe(asset_class) == tokens_to_give, \"Incorrect token payout\");\r\n            assert(isClaimWindow == true, \"Not in claim window\");\r\n            \r\n             // Now handle ADA and script outputs logic\r\n             if (total_tokens_in_script == 0) {\r\n                // Final claim scenario: no tokens remain\r\n                // All ADA can be returned to the claimant, so no script outputs allowed\r\n                assert(script_outputs.length == 0, \"No script outputs should remain at final claim\");\r\n                // In this scenario, we don't need to enforce total_ada_in_script >= total_ada_begin,\r\n                // since all ADA should now be leaving the script and going to the claimant.\r\n                true\r\n            } else {\r\n                // Not final claim: tokens remain in the script\r\n                // Require at least 2 script outputs for concurrency (adjust as needed)\r\n                assert(script_outputs.length == 2, \"I need 2 outputs\");\r\n\r\n                // Ensure no ADA leaves the contract yet\r\n                assert(total_ada_in_script >= total_ada_begin, \"No ADA can leave the contract\");\r\n\r\n                true\r\n            }\r\n        }\r\n    }    \r\n}`, Array.from(depSrcs.values()))\n\n        if (Object.keys(parameters).length > 0) {\n            this.#program.parameters = parameters\n        }\n    }\n\n    get name() {\n        return this.#program.name\n    }\n\n    get paramTypes() {\n        return this.#program.paramTypes\n    }\n\n    get parameters() {\n        return this.#program.parameters\n    }\n\n    get types() {\n        return this.#program.types\n    }\n\n    set parameters(params) {\n        this.#program.parameters = params\n    }\n\n    compile(optimize = false) {\n        return this.#program.compile(optimize)\n    }\n\n    evalParam(paramName) {\n        return this.#program.evalParam(paramName)\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./contracts/GameReward.hl\n"));

/***/ })

});