"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/useFlappyBirdGame.ts":
/*!*************************************!*\
  !*** ./public/useFlappyBirdGame.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFlappyBirdGame: function() { return /* binding */ useFlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// useFlappyBirdGame.ts\n\n// Constants\nconst GRAVITY = 800; // pixels per second squared\nconst FLAP_VELOCITY = -450; // pixels per second\nconst PIPE_SPEED = 200; // pixels per second\nconst PIPE_SPAWN_INTERVAL = 1500; // milliseconds\nconst PIPE_WIDTH = 90;\nconst PIPE_GAP = 200; // Vertical gap between pipes\nconst BIRD_X = 100; // Fixed X position\nconst BIRD_WIDTH = 50;\nconst BIRD_HEIGHT = 50;\nconst COIN_SPEED = 200; // pixels per second\nconst COIN_SPAWN_CHANCE = 0.25; // 25%\nconst COIN_SIZE = 80;\nconst ROTATION_SPEED = 2 * Math.PI; // radians per second (full rotation per second)\n/**\r\n * Custom hook to manage Flappy Bird game logic.\r\n * @param canvasRef Reference to the canvas element.\r\n * @param isPaused Boolean indicating if the game is paused.\r\n * @param autoStart Boolean indicating if the game should start automatically.\r\n * @returns High score, current score, and a handler for user input.\r\n */ function useFlappyBirdGame(canvasRef, isPaused, autoStart) {\n    // State\n    const [highScore, setHighScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [currentScore, setCurrentScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Refs to track game state\n    const birdYRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const birdVelocityRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const coinsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const gameOverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const gameStartedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Rotation angle for coins\n    const coinRotationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Time tracking\n    const lastTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipeSpawnTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Request ID for animation frame\n    const requestIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Asset images\n    const birdImagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const pipeTopImgRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const pipeBottomImgRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const backgroundImgRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const coinImgRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Current bird frame index for flap animation\n    const currentBirdFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(1); // Start with mid-flap\n    // Load high score from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (true) {\n            const storedHighScore = localStorage.getItem(\"highScore\");\n            if (storedHighScore) {\n                setHighScore(parseInt(storedHighScore, 10));\n            }\n        }\n    }, []);\n    // Initialize game and load assets\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (false) {}\n        // Initialize bird images\n        const birdUp = new Image();\n        birdUp.src = \"/assets/redbird-upflap.png\";\n        const birdMid = new Image();\n        birdMid.src = \"/assets/redbird-midflap.png\";\n        const birdDown = new Image();\n        birdDown.src = \"/assets/redbird-downflap.png\";\n        birdImagesRef.current = [\n            birdUp,\n            birdMid,\n            birdDown\n        ];\n        // Initialize pipe images\n        const pipeTopImg = new Image();\n        pipeTopImg.src = \"/assets/TopTiny.png\";\n        pipeTopImgRef.current = pipeTopImg;\n        const pipeBottomImg = new Image();\n        pipeBottomImg.src = \"/assets/BottomTiny.png\";\n        pipeBottomImgRef.current = pipeBottomImg;\n        // Initialize background and coin images\n        const backgroundImg = new Image();\n        backgroundImg.src = \"/assets/background-day.png\";\n        backgroundImgRef.current = backgroundImg;\n        const coinImg = new Image();\n        coinImg.src = \"/assets/CoinTiny.png\";\n        coinImgRef.current = coinImg;\n        // Helper function to load an image fully\n        const loadImage = (img)=>{\n            return new Promise((resolve, reject)=>{\n                if (img.complete) {\n                    resolve();\n                } else {\n                    img.onload = ()=>resolve();\n                    img.onerror = ()=>reject(new Error(\"Failed to load image: \".concat(img.src)));\n                }\n            });\n        };\n        // Load all assets then initialize the game\n        const loadAssets = async ()=>{\n            try {\n                await Promise.all([\n                    ...birdImagesRef.current.map((img)=>loadImage(img)),\n                    pipeTopImgRef.current ? loadImage(pipeTopImgRef.current) : Promise.resolve(),\n                    pipeBottomImgRef.current ? loadImage(pipeBottomImgRef.current) : Promise.resolve(),\n                    backgroundImgRef.current ? loadImage(backgroundImgRef.current) : Promise.resolve(),\n                    coinImgRef.current ? loadImage(coinImgRef.current) : Promise.resolve()\n                ]);\n                console.log(\"All assets loaded successfully!\");\n                initializeGame();\n                if (autoStart) {\n                    startGame();\n                }\n            } catch (error) {\n                console.error(\"Error loading assets:\", error);\n            }\n        };\n        loadAssets();\n        // Cleanup function\n        return ()=>{\n            if (requestIdRef.current) {\n                cancelAnimationFrame(requestIdRef.current);\n            }\n        };\n    }, [\n        autoStart,\n        initializeGame,\n        startGame\n    ]);\n    // Function to initialize the game\n    const initializeGame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Set canvas dimensions\n        canvas.width = 360;\n        canvas.height = 640;\n        // Draw start screen\n        drawStartScreen(ctx, canvas);\n    }, [\n        canvasRef\n    ]);\n    // Function to reset game state\n    const resetGame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const { height } = canvas;\n        birdYRef.current = height / 3;\n        birdVelocityRef.current = 0;\n        pipesRef.current = [];\n        coinsRef.current = [];\n        setCurrentScore(0);\n        gameOverRef.current = false;\n        gameStartedRef.current = false;\n        coinRotationRef.current = 0;\n        lastTimeRef.current = 0;\n        pipeSpawnTimerRef.current = 0;\n        currentBirdFrameRef.current = 1; // mid-flap\n    }, [\n        canvasRef\n    ]);\n    // Function to start the game\n    const startGame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        resetGame();\n        gameStartedRef.current = true;\n        lastTimeRef.current = performance.now();\n        requestIdRef.current = requestAnimationFrame(animate);\n    }, [\n        resetGame,\n        animate\n    ]);\n    // Function to handle user input\n    const handleUserInput = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!gameStartedRef.current && !gameOverRef.current) {\n            startGame();\n        } else if (gameOverRef.current) {\n            startGame();\n        } else {\n            birdVelocityRef.current = FLAP_VELOCITY;\n            flapAnimation();\n        }\n    }, [\n        startGame,\n        flapAnimation\n    ]);\n    // Function to handle keydown events\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (e.key === \" \") {\n            handleUserInput();\n        }\n    }, [\n        handleUserInput\n    ]);\n    // Add keydown event listener\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        window.addEventListener(\"keydown\", handleKeyDown);\n        return ()=>window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [\n        handleKeyDown\n    ]);\n    // Flap animation\n    const flapAnimation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const flapFrames = [\n            0,\n            1,\n            2,\n            1\n        ];\n        let currentFrame = 0;\n        const flapInterval = 100; // milliseconds between frames\n        const flap = ()=>{\n            if (currentFrame < flapFrames.length) {\n                currentBirdFrameRef.current = flapFrames[currentFrame];\n                currentFrame++;\n                setTimeout(flap, flapInterval);\n            } else {\n                currentBirdFrameRef.current = 1; // reset to mid-flap\n            }\n        };\n        flap();\n    }, []);\n    /**\r\n   * The main game loop using requestAnimationFrame.\r\n   * @param timestamp Current timestamp\r\n   */ const animate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((timestamp)=>{\n        if (isPaused || !gameStartedRef.current) {\n            requestIdRef.current = requestAnimationFrame(animate);\n            return;\n        }\n        if (!lastTimeRef.current) {\n            lastTimeRef.current = timestamp;\n        }\n        let deltaTime = (timestamp - lastTimeRef.current) / 1000; // in seconds\n        // Cap deltaTime to 0.05 seconds to prevent big jumps\n        deltaTime = Math.min(deltaTime, 0.05);\n        lastTimeRef.current = timestamp;\n        // Update game state\n        updateGameState(deltaTime);\n        // Draw everything\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext(\"2d\");\n            if (ctx) {\n                draw(ctx, canvas);\n            }\n        }\n        if (!gameOverRef.current) {\n            requestIdRef.current = requestAnimationFrame(animate);\n        } else {\n            // Draw game over screen\n            const canvas = canvasRef.current;\n            if (canvas) {\n                const ctx = canvas.getContext(\"2d\");\n                if (ctx) {\n                    drawGameOverScreen(ctx, canvas);\n                }\n            }\n        }\n    }, [\n        isPaused,\n        updateGameState,\n        draw,\n        drawGameOverScreen\n    ]);\n    /**\r\n   * Update the game state based on elapsed time.\r\n   * @param deltaTime Time elapsed since last frame (in seconds)\r\n   */ const updateGameState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((deltaTime)=>{\n        // Apply gravity to the bird\n        birdVelocityRef.current += GRAVITY * deltaTime;\n        birdYRef.current += birdVelocityRef.current * deltaTime;\n        // Update pipe spawn timer and spawn pipes at intervals\n        pipeSpawnTimerRef.current += deltaTime;\n        if (pipeSpawnTimerRef.current > PIPE_SPAWN_INTERVAL / 1000) {\n            createPipe();\n            pipeSpawnTimerRef.current = 0;\n        }\n        // Move pipes based on PIPE_SPEED and deltaTime\n        const pipeMoveDelta = PIPE_SPEED * deltaTime;\n        pipesRef.current = pipesRef.current.map((pipe)=>({\n                ...pipe,\n                x: pipe.x - pipeMoveDelta\n            }));\n        // Remove offscreen pipes\n        pipesRef.current = pipesRef.current.filter((pipe)=>pipe.x + PIPE_WIDTH > 0);\n        // Move coins based on COIN_SPEED and deltaTime\n        const coinMoveDelta = COIN_SPEED * deltaTime;\n        coinsRef.current = coinsRef.current.map((coin)=>({\n                ...coin,\n                x: coin.x - coinMoveDelta\n            }));\n        // Remove offscreen or collected coins\n        coinsRef.current = coinsRef.current.filter((coin)=>coin.x + coin.width > 0 && !coin.collected);\n        // Rotate coins for visual effect\n        coinRotationRef.current += ROTATION_SPEED * deltaTime;\n        if (coinRotationRef.current >= 2 * Math.PI) {\n            coinRotationRef.current -= 2 * Math.PI;\n        }\n        // Check for collisions\n        if (checkCollisions()) {\n            gameOverRef.current = true;\n            return;\n        }\n        // Check if bird collects any coins\n        checkCoinCollection();\n        // Update the score based on pipe passing\n        updateScore();\n    }, [\n        createPipe,\n        checkCollisions,\n        checkCoinCollection,\n        updateScore\n    ]);\n    /**\r\n   * Render all game elements onto the canvas.\r\n   * @param ctx CanvasRenderingContext2D\r\n   * @param canvas Canvas element\r\n   */ const draw = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((ctx, canvas)=>{\n        var _backgroundImgRef_current;\n        // Clear the canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // Draw background\n        if ((_backgroundImgRef_current = backgroundImgRef.current) === null || _backgroundImgRef_current === void 0 ? void 0 : _backgroundImgRef_current.complete) {\n            ctx.drawImage(backgroundImgRef.current, 0, 0, canvas.width, canvas.height);\n        }\n        // Draw pipes\n        for (const pipe of pipesRef.current){\n            var _pipeTopImgRef_current, _pipeBottomImgRef_current;\n            // Top pipe\n            if ((_pipeTopImgRef_current = pipeTopImgRef.current) === null || _pipeTopImgRef_current === void 0 ? void 0 : _pipeTopImgRef_current.complete) {\n                ctx.drawImage(pipeTopImgRef.current, pipe.x, 0, PIPE_WIDTH, pipe.gapY);\n            }\n            // Bottom pipe\n            if ((_pipeBottomImgRef_current = pipeBottomImgRef.current) === null || _pipeBottomImgRef_current === void 0 ? void 0 : _pipeBottomImgRef_current.complete) {\n                ctx.drawImage(pipeBottomImgRef.current, pipe.x, pipe.gapY + PIPE_GAP, PIPE_WIDTH, canvas.height - (pipe.gapY + PIPE_GAP));\n            }\n        }\n        // Draw coins\n        for (const coin of coinsRef.current){\n            var _coinImgRef_current;\n            if (!coin.collected && ((_coinImgRef_current = coinImgRef.current) === null || _coinImgRef_current === void 0 ? void 0 : _coinImgRef_current.complete)) {\n                ctx.save();\n                ctx.translate(coin.x + coin.width / 2, coin.y + coin.height / 2);\n                ctx.rotate(coinRotationRef.current);\n                ctx.drawImage(coinImgRef.current, -coin.width / 2, -coin.height / 2, coin.width, coin.height);\n                ctx.restore();\n            }\n        }\n        // Draw bird\n        const currentBirdFrame = birdImagesRef.current[currentBirdFrameRef.current];\n        if (currentBirdFrame === null || currentBirdFrame === void 0 ? void 0 : currentBirdFrame.complete) {\n            ctx.drawImage(currentBirdFrame, BIRD_X, birdYRef.current, BIRD_WIDTH, BIRD_HEIGHT);\n        }\n    }, []);\n    /**\r\n   * Render the start screen.\r\n   * @param ctx CanvasRenderingContext2D\r\n   * @param canvas Canvas element\r\n   */ const drawStartScreen = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((ctx, canvas)=>{\n        var _backgroundImgRef_current;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // Draw background\n        if ((_backgroundImgRef_current = backgroundImgRef.current) === null || _backgroundImgRef_current === void 0 ? void 0 : _backgroundImgRef_current.complete) {\n            ctx.drawImage(backgroundImgRef.current, 0, 0, canvas.width, canvas.height);\n        }\n        // Draw start text\n        ctx.fillStyle = \"white\";\n        ctx.font = \"bold 30px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"Press Space or Tap to Start\", canvas.width / 2, canvas.height / 2);\n    }, []);\n    /**\r\n   * Render the game over screen.\r\n   * @param ctx CanvasRenderingContext2D\r\n   * @param canvas Canvas element\r\n   */ const drawGameOverScreen = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((ctx, canvas)=>{\n        // Draw semi-transparent overlay\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n        ctx.fillRect(0, canvas.height / 2 - 100, canvas.width, 200);\n        // Draw Game Over text\n        ctx.fillStyle = \"#ffcc00\";\n        ctx.font = \"bold 50px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"Game Over!\", canvas.width / 2, canvas.height / 2 - 40);\n        // Draw restart prompt\n        ctx.fillStyle = \"white\";\n        ctx.font = \"bold 30px Arial\";\n        ctx.fillText(\"Press Space or Tap to Restart\", canvas.width / 2, canvas.height / 2 + 20);\n    }, []);\n    /**\r\n   * Create a new pipe with a random gap position and possibly spawn a coin.\r\n   */ const createPipe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const gapY = Math.random() * (canvas.height - PIPE_GAP - 200) + 100; // Ensure gap is not too close to top or bottom\n        pipesRef.current.push({\n            x: canvas.width,\n            gapY,\n            scored: false\n        });\n        // 25% chance to spawn a coin\n        if (Math.random() < COIN_SPAWN_CHANCE) {\n            coinsRef.current.push({\n                x: canvas.width + PIPE_WIDTH / 2 - COIN_SIZE / 2,\n                y: gapY + PIPE_GAP / 2 - COIN_SIZE / 2,\n                width: COIN_SIZE,\n                height: COIN_SIZE,\n                collected: false\n            });\n        }\n    }, []);\n    /**\r\n   * Check for collisions between the bird and pipes or boundaries.\r\n   * @returns Boolean indicating if a collision occurred\r\n   */ const checkCollisions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        // Assuming canvas height is fixed at 640\n        if (birdYRef.current < 0 || birdYRef.current + BIRD_HEIGHT > 640) {\n            return true;\n        }\n        const birdLeft = BIRD_X;\n        const birdRight = BIRD_X + BIRD_WIDTH;\n        const birdTop = birdYRef.current;\n        const birdBottom = birdYRef.current + BIRD_HEIGHT;\n        // Check collision with each pipe\n        for (const pipe of pipesRef.current){\n            const pipeLeft = pipe.x;\n            const pipeRight = pipe.x + PIPE_WIDTH;\n            // If bird is within pipe's horizontal bounds\n            if (birdRight > pipeLeft && birdLeft < pipeRight) {\n                // Check if bird is within the gap\n                if (birdTop < pipe.gapY || birdBottom > pipe.gapY + PIPE_GAP) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }, []);\n    /**\r\n   * Check if the bird has collected any coins.\r\n   */ const checkCoinCollection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const birdLeft = BIRD_X;\n        const birdRight = BIRD_X + BIRD_WIDTH;\n        const birdTop = birdYRef.current;\n        const birdBottom = birdYRef.current + BIRD_HEIGHT;\n        for (const coin of coinsRef.current){\n            if (!coin.collected) {\n                const coinLeft = coin.x;\n                const coinRight = coin.x + coin.width;\n                const coinTop = coin.y;\n                const coinBottom = coin.y + coin.height;\n                if (birdRight > coinLeft && birdLeft < coinRight && birdBottom > coinTop && birdTop < coinBottom) {\n                    coin.collected = true;\n                    setCurrentScore((prevScore)=>{\n                        const newScore = prevScore + 5;\n                        setHighScore((prevHighScore)=>{\n                            const updatedHighScore = Math.max(prevHighScore, newScore);\n                            if (true) {\n                                localStorage.setItem(\"highScore\", updatedHighScore.toString());\n                            }\n                            return updatedHighScore;\n                        });\n                        return newScore;\n                    });\n                }\n            }\n        }\n    }, []);\n    /**\r\n   * Update the score when the bird passes a pipe.\r\n   */ const updateScore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        for (const pipe of pipesRef.current){\n            // Score +1 for passing each pipe once\n            if (!pipe.scored && pipe.x + PIPE_WIDTH < BIRD_X) {\n                setCurrentScore((prevScore)=>{\n                    const newScore = prevScore + 1;\n                    setHighScore((prevHighScore)=>{\n                        const updatedHighScore = Math.max(prevHighScore, newScore);\n                        if (true) {\n                            localStorage.setItem(\"highScore\", updatedHighScore.toString());\n                        }\n                        return updatedHighScore;\n                    });\n                    return newScore;\n                });\n                pipe.scored = true;\n            }\n        }\n    }, []);\n    /**\r\n   * Cleanup on unmount.\r\n   */ (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (requestIdRef.current) {\n                cancelAnimationFrame(requestIdRef.current);\n            }\n        };\n    }, []);\n    return {\n        highScore,\n        currentScore,\n        handleUserInput\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/useFlappyBirdGame.ts\n"));

/***/ })

});