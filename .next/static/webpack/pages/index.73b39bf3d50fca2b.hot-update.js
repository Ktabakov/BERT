"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/useFlappyBirdGame.ts":
/*!*************************************!*\
  !*** ./public/useFlappyBirdGame.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFlappyBirdGame: function() { return /* binding */ useFlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// src/hooks/useFlappyBirdGame.ts\n\n// Constants\nconst GRAVITY = 0.7;\nconst FLAP = -11;\nconst PIPE_WIDTH = 90;\nconst PIPE_SPACING = 230;\nconst BIRD_WIDTH = 50;\nconst BIRD_HEIGHT = 50;\nconst COIN_SIZE = 100;\n// How long between pipe spawns (in milliseconds)\nconst PIPE_SPAWN_INTERVAL = 1000;\n// Horizontal speed (pixels per \"60fps\" frame)\nconst HORIZONTAL_SPEED = 4;\n// Rotation speed of coin (complete flip from scale 1 to 0 to 1). 1 = full cycle.\nconst ROTATION_SPEED = 0.01;\n// A small constant representing the \"ideal frame\" for scaling calculations (about 60fps).\nconst IDEAL_FRAME = 16.67; // ms\n/**\r\n * Custom Hook: useFlappyBirdGame\r\n * Handles Flappy Bird game logic, including:\r\n * - Canvas setup\r\n * - Bird movement / flapping\r\n * - Pipe & coin spawning\r\n * - Score tracking\r\n * - Mobile/desktop input handling\r\n */ function useFlappyBirdGame(canvasRef, isPaused, autoStart) {\n    // -----------------------------\n    // 1. TOP-LEVEL HOOKS & REFS\n    // -----------------------------\n    // React State\n    const [highScore, setHighScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [currentScore, setCurrentScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Game Refs\n    const requestIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const birdYRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const birdVelocityRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const coinsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const gameOverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const gameStartedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Coin rotation & pipe spawn timer\n    const coinRotationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const pipeSpawnTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Timestamp for time-based movement\n    const lastTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Bird animation frames\n    const birdImagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const pipeTopRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const pipeBottomRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const backgroundRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const coinImageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Current Bird Frame\n    const currentBirdFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // For debouncing taps on mobile\n    const lastTapRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const DEBOUNCE_TIME = 300; // ms\n    // -------------------------------------------\n    // 2. IMAGE PRELOAD (only on client)\n    // -------------------------------------------\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (false) {} // Ensure this runs only on client\n        const birdUp = new Image();\n        birdUp.src = \"/assets/redbird-upflap.png\";\n        const birdMid = new Image();\n        birdMid.src = \"/assets/redbird-midflap.png\";\n        const birdDown = new Image();\n        birdDown.src = \"/assets/redbird-downflap.png\";\n        birdImagesRef.current = [\n            birdUp,\n            birdMid,\n            birdDown\n        ];\n        const pipeTop = new Image();\n        pipeTop.src = \"/assets/TopTiny.png\";\n        pipeTopRef.current = pipeTop;\n        const pipeBottom = new Image();\n        pipeBottom.src = \"/assets/BottomTiny.png\";\n        pipeBottomRef.current = pipeBottom;\n        const background = new Image();\n        background.src = \"/assets/background-day.png\";\n        backgroundRef.current = background;\n        const coinImage = new Image();\n        coinImage.src = \"/assets/CoinTiny.png\";\n        coinImageRef.current = coinImage;\n    }, []);\n    // -------------------------------------------\n    // 3. LOAD HIGH SCORE ON HOOK INIT\n    // -------------------------------------------\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (true) {\n            const storedHighScore = localStorage.getItem(\"highScore\");\n            if (storedHighScore) {\n                setHighScore(parseInt(storedHighScore, 10));\n            }\n        }\n    }, []);\n    // -------------------------------------------\n    // 4. MAIN useEffect: SETUP & TEARDOWN\n    // -------------------------------------------\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Utility: Ensure an image is fully loaded\n        const loadImage = (img)=>{\n            return new Promise((resolve, reject)=>{\n                if (img.complete) {\n                    resolve();\n                } else {\n                    img.onload = ()=>resolve();\n                    img.onerror = ()=>reject(new Error(\"Failed to load \".concat(img.src)));\n                }\n            });\n        };\n        // Load images, then initialize\n        const loadAssets = async ()=>{\n            try {\n                await Promise.all([\n                    ...birdImagesRef.current.map((img)=>loadImage(img)),\n                    pipeTopRef.current ? loadImage(pipeTopRef.current) : Promise.resolve(),\n                    pipeBottomRef.current ? loadImage(pipeBottomRef.current) : Promise.resolve(),\n                    backgroundRef.current ? loadImage(backgroundRef.current) : Promise.resolve(),\n                    coinImageRef.current ? loadImage(coinImageRef.current) : Promise.resolve()\n                ]);\n                initializeGame();\n            } catch (err) {\n                console.error(\"Error loading assets:\", err);\n            }\n        };\n        loadAssets();\n        // ---------------------------\n        // 4A: INITIALIZE / RESET GAME\n        // ---------------------------\n        function initializeGame() {\n            if (!canvasRef.current || !ctx) return;\n            canvasRef.current.width = 360;\n            canvasRef.current.height = 640;\n            drawStartScreen(ctx, canvasRef.current);\n        }\n        function resetGame1() {\n            if (!canvasRef.current) return;\n            const { height } = canvasRef.current;\n            birdYRef.current = height / 3;\n            birdVelocityRef.current = 0;\n            pipesRef.current = [];\n            coinsRef.current = [];\n            setCurrentScore(0);\n            gameOverRef.current = false;\n            gameStartedRef.current = false;\n            coinRotationRef.current = 0;\n            pipeSpawnTimerRef.current = 0;\n            currentBirdFrameRef.current = 0;\n        }\n        // ---------------------------\n        // 4B: INPUT HANDLING WITH POINTER EVENTS\n        // ---------------------------\n        // Use pointer events to unify touch and mouse interactions\n        function handlePointerDown() {\n            flap();\n        }\n        canvas.addEventListener(\"pointerdown\", handlePointerDown);\n        // Desktop keyboard input\n        function handleKeyDown(e) {\n            if (e.key === \" \") {\n                flap();\n            }\n        }\n        window.addEventListener(\"keydown\", handleKeyDown);\n        // Handle resizing\n        function handleResize() {\n            if (!canvasRef.current) return;\n            canvasRef.current.width = 360;\n            canvasRef.current.height = 640;\n            if (!gameStartedRef.current && !gameOverRef.current && ctx) {\n                drawStartScreen(ctx, canvasRef.current);\n            }\n        }\n        window.addEventListener(\"resize\", handleResize);\n        // Start game\n        function startGame() {\n            resetGame1();\n            gameStartedRef.current = true;\n            lastTimeRef.current = performance.now(); // reset our time-based reference\n            requestIdRef.current = requestAnimationFrame(animate);\n        }\n        // Flap function\n        function flap() {\n            const now = Date.now();\n            if (now - lastTapRef.current < DEBOUNCE_TIME) {\n                return; // Ignore if within debounce time\n            }\n            lastTapRef.current = now;\n            if (!gameStartedRef.current && !gameOverRef.current) {\n                startGame();\n            } else if (gameOverRef.current) {\n                startGame();\n            } else {\n                birdVelocityRef.current = FLAP;\n                flapAnimation();\n            }\n        }\n        // Quick flap animation\n        function flapAnimation() {\n            currentBirdFrameRef.current = 1;\n            setTimeout(()=>{\n                currentBirdFrameRef.current = 2;\n                setTimeout(()=>{\n                    currentBirdFrameRef.current = 0;\n                }, 170);\n            }, 170);\n        }\n        // ---------------------------------------\n        // 4C: GAME LOOP (ANIMATE)\n        // ---------------------------------------\n        function animate(currentTime) {\n            if (!gameStartedRef.current) {\n                // If game hasn't started, just schedule the next frame\n                requestIdRef.current = requestAnimationFrame(animate);\n                return;\n            }\n            if (isPaused) {\n                // If paused, just schedule the next frame\n                requestIdRef.current = requestAnimationFrame(animate);\n                return;\n            }\n            if (!canvasRef.current) return;\n            const context = canvasRef.current.getContext(\"2d\");\n            if (!context) return;\n            const now = currentTime !== null && currentTime !== void 0 ? currentTime : performance.now();\n            const deltaTime = now - lastTimeRef.current;\n            lastTimeRef.current = now;\n            updateGameState(canvasRef.current, deltaTime);\n            draw(context, canvasRef.current);\n            if (!gameOverRef.current) {\n                requestIdRef.current = requestAnimationFrame(animate);\n            } else {\n                drawGameOverScreen(context, canvasRef.current);\n            }\n        }\n        function updateGameState(canvas, deltaTime) {\n            const scale = deltaTime / IDEAL_FRAME;\n            // Gravity\n            birdVelocityRef.current += GRAVITY * scale;\n            birdYRef.current += birdVelocityRef.current * scale;\n            // Pipe spawn\n            pipeSpawnTimerRef.current += deltaTime;\n            if (pipeSpawnTimerRef.current >= PIPE_SPAWN_INTERVAL) {\n                pipeSpawnTimerRef.current -= PIPE_SPAWN_INTERVAL;\n                createPipe(canvas);\n            }\n            // Move pipes & coins\n            movePipesAndCoins(scale);\n            // Rotate coin\n            coinRotationRef.current += ROTATION_SPEED * scale;\n            if (coinRotationRef.current >= 1) {\n                coinRotationRef.current = 0;\n            }\n            // Collisions\n            if (checkCollisions(canvas)) {\n                gameOverRef.current = true;\n                return;\n            }\n            // Coin collection\n            checkCoinCollection();\n            // Score\n            updateScore();\n        }\n        // ---------------------------------------\n        // 4D: DRAW FUNCTIONS\n        // ---------------------------------------\n        function draw(ctx, canvas) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawBackground(ctx, canvas);\n            drawBird(ctx);\n            drawPipes(ctx);\n            drawCoins(ctx);\n        }\n        function drawStartScreen(ctx, canvas) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawBackground(ctx, canvas);\n            ctx.font = \"bold 30px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillStyle = \"#ffffff\";\n            ctx.shadowColor = \"black\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(\"Tap or Press Space to Start\", canvas.width / 2, canvas.height / 2);\n        }\n        function drawGameOverScreen(ctx, canvas) {\n            ctx.fillStyle = \"#ffcc00\";\n            ctx.font = \"bold 50px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.shadowColor = \"black\";\n            ctx.shadowBlur = 10;\n            ctx.fillText(\"Game Over!\", canvas.width / 2, canvas.height / 2 - 40);\n            ctx.fillStyle = \"#ffffff\";\n            ctx.font = \"bold 30px Arial\";\n            ctx.fillText(\"Tap or Press Space to Restart\", canvas.width / 2, canvas.height / 2 + 20);\n        }\n        function drawBackground(ctx, canvas) {\n            if (backgroundRef.current && backgroundRef.current.complete) {\n                ctx.drawImage(backgroundRef.current, 0, 0, canvas.width, canvas.height);\n            }\n        }\n        function drawBird(ctx) {\n            const currentImage = birdImagesRef.current[currentBirdFrameRef.current];\n            if (currentImage && currentImage.complete) {\n                ctx.drawImage(currentImage, 100, birdYRef.current, BIRD_WIDTH, BIRD_HEIGHT);\n            }\n        }\n        function drawPipes(ctx) {\n            pipesRef.current.forEach((pipe)=>{\n                if (pipeTopRef.current && pipeTopRef.current.complete) {\n                    ctx.drawImage(pipeTopRef.current, pipe.x, 0, PIPE_WIDTH, pipe.topHeight);\n                }\n                if (pipeBottomRef.current && pipeBottomRef.current.complete) {\n                    ctx.drawImage(pipeBottomRef.current, pipe.x, pipe.bottomY, PIPE_WIDTH, pipe.bottomHeight);\n                }\n            });\n        }\n        function drawCoins(ctx) {\n            if (!coinImageRef.current || !coinImageRef.current.complete) return;\n            const scaleX = Math.abs(Math.cos(coinRotationRef.current * Math.PI * 2));\n            const halfSize = COIN_SIZE / 2;\n            coinsRef.current.forEach((coin)=>{\n                if (!coin.collected) {\n                    if (!coinImageRef.current) return;\n                    ctx.save();\n                    ctx.translate(coin.x + halfSize, coin.y + halfSize);\n                    ctx.scale(scaleX, 1);\n                    ctx.drawImage(coinImageRef.current, -halfSize, -halfSize, COIN_SIZE, COIN_SIZE);\n                    ctx.restore();\n                }\n            });\n        }\n        // ---------------------------------------\n        // 4F: GAME LOGIC FUNCTIONS\n        // ---------------------------------------\n        function createPipe(canvas) {\n            const pipeHeight = Math.random() * (canvas.height - PIPE_SPACING - 100) + 50;\n            const bottomY = pipeHeight + PIPE_SPACING;\n            pipesRef.current.push({\n                x: canvas.width,\n                topHeight: pipeHeight,\n                bottomY,\n                bottomHeight: canvas.height - bottomY,\n                scored: false\n            });\n            // 50% chance for coin\n            if (Math.random() > 0.5) {\n                coinsRef.current.push({\n                    x: canvas.width + PIPE_WIDTH / 2 - COIN_SIZE / 2,\n                    y: pipeHeight + PIPE_SPACING / 2 - COIN_SIZE / 2,\n                    width: COIN_SIZE,\n                    height: COIN_SIZE,\n                    collected: false\n                });\n            }\n        }\n        function movePipesAndCoins(scale) {\n            // Move pipes to the left\n            pipesRef.current.forEach((pipe)=>{\n                pipe.x -= HORIZONTAL_SPEED * scale;\n            });\n            pipesRef.current = pipesRef.current.filter((p)=>p.x + PIPE_WIDTH > 0);\n            // Move coins\n            coinsRef.current.forEach((coin)=>{\n                coin.x -= HORIZONTAL_SPEED * scale;\n            });\n            coinsRef.current = coinsRef.current.filter((c)=>c.x + c.width > 0 && !c.collected);\n        }\n        function checkCollisions(canvas) {\n            // Bird vs boundaries\n            if (birdYRef.current < 0 || birdYRef.current + BIRD_HEIGHT > canvas.height) {\n                return true;\n            }\n            const birdLeft = 100;\n            const birdRight = birdLeft + BIRD_WIDTH;\n            const birdTop = birdYRef.current;\n            const birdBottom = birdYRef.current + BIRD_HEIGHT;\n            // Bird vs pipes\n            for (const pipe of pipesRef.current){\n                const withinPipeX = birdRight > pipe.x && birdLeft < pipe.x + PIPE_WIDTH;\n                const withinPipeY = birdTop < pipe.topHeight || birdBottom > pipe.bottomY;\n                if (withinPipeX && withinPipeY) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function checkCoinCollection() {\n            const birdLeft = 100;\n            const birdRight = birdLeft + BIRD_WIDTH;\n            const birdTop = birdYRef.current;\n            const birdBottom = birdYRef.current + BIRD_HEIGHT;\n            coinsRef.current.forEach((coin)=>{\n                if (!coin.collected) {\n                    const coinLeft = coin.x;\n                    const coinRight = coin.x + coin.width;\n                    const coinTop = coin.y;\n                    const coinBottom = coin.y + coin.height;\n                    if (birdRight > coinLeft && birdLeft < coinRight && birdBottom > coinTop && birdTop < coinBottom) {\n                        // Collect coin\n                        coin.collected = true;\n                        setCurrentScore((prevScore)=>{\n                            const newScore = prevScore + 5;\n                            setHighScore((prevHighScore)=>Math.max(prevHighScore, newScore));\n                            return newScore;\n                        });\n                    }\n                }\n            });\n        }\n        function updateScore() {\n            pipesRef.current.forEach((pipe)=>{\n                // Score +1 for passing each pipe, only once\n                if (!pipe.scored && pipe.x + PIPE_WIDTH < 100) {\n                    pipe.scored = true;\n                    setCurrentScore((prevScore)=>{\n                        const newScore = prevScore + 1;\n                        setHighScore((prevHighScore)=>{\n                            const updatedHighScore = Math.max(prevHighScore, newScore);\n                            if (true) {\n                                localStorage.setItem(\"highScore\", updatedHighScore.toString());\n                            }\n                            return updatedHighScore;\n                        });\n                        return newScore;\n                    });\n                }\n            });\n        }\n        // ---------------------------------------\n        // 4G: CLEANUP FUNCTION\n        // ---------------------------------------\n        return ()=>{\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"resize\", handleResize);\n            canvas.removeEventListener(\"pointerdown\", handlePointerDown);\n            if (requestIdRef.current) {\n                cancelAnimationFrame(requestIdRef.current);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        canvasRef,\n        isPaused,\n        autoStart\n    ]);\n    // ---------------------------------------\n    // 5. FLAP ANIMATION FUNCTION\n    // ---------------------------------------\n    const flapAnimation = ()=>{\n        currentBirdFrameRef.current = 1;\n        setTimeout(()=>{\n            currentBirdFrameRef.current = 2;\n            setTimeout(()=>{\n                currentBirdFrameRef.current = 0;\n            }, 170);\n        }, 170);\n    };\n    // ---------------------------------------\n    // 6. FLAP FUNCTION\n    // ---------------------------------------\n    const flap = ()=>{\n        const now = Date.now();\n        if (now - lastTapRef.current < DEBOUNCE_TIME) {\n            return; // Ignore if within debounce time\n        }\n        lastTapRef.current = now;\n        if (!gameStartedRef.current && !gameOverRef.current) {\n            startGame();\n        } else if (gameOverRef.current) {\n            startGame();\n        } else {\n            birdVelocityRef.current = FLAP;\n            flapAnimation();\n        }\n    };\n    // ---------------------------------------\n    // 7. START GAME FUNCTION\n    // ---------------------------------------\n    const startGame = ()=>{\n        resetGame();\n        gameStartedRef.current = true;\n        lastTimeRef.current = performance.now(); // reset our time-based reference\n        requestIdRef.current = requestAnimationFrame(animate);\n    };\n    // ---------------------------------------\n    // 8. GAME LOOP FUNCTION\n    // ---------------------------------------\n    const animate = (currentTime)=>{\n        if (!gameStartedRef.current) {\n            // If game hasn't started, just schedule the next frame\n            requestIdRef.current = requestAnimationFrame(animate);\n            return;\n        }\n        if (isPaused) {\n            // If paused, just schedule the next frame\n            requestIdRef.current = requestAnimationFrame(animate);\n            return;\n        }\n        if (!canvasRef.current) return;\n        const context = canvasRef.current.getContext(\"2d\");\n        if (!context) return;\n        const now = currentTime !== null && currentTime !== void 0 ? currentTime : performance.now();\n        const deltaTime = now - lastTimeRef.current;\n        lastTimeRef.current = now;\n        updateGameState(canvasRef.current, deltaTime);\n        draw(context, canvasRef.current);\n        if (!gameOverRef.current) {\n            requestIdRef.current = requestAnimationFrame(animate);\n        } else {\n            drawGameOverScreen(context, canvasRef.current);\n        }\n    };\n    // ---------------------------------------\n    // 9. GAME LOOP AND DRAW FUNCTIONS\n    // ---------------------------------------\n    const updateGameState = (canvas, deltaTime)=>{\n        const scale = deltaTime / IDEAL_FRAME;\n        // Gravity\n        birdVelocityRef.current += GRAVITY * scale;\n        birdYRef.current += birdVelocityRef.current * scale;\n        // Pipe spawn\n        pipeSpawnTimerRef.current += deltaTime;\n        if (pipeSpawnTimerRef.current >= PIPE_SPAWN_INTERVAL) {\n            pipeSpawnTimerRef.current -= PIPE_SPAWN_INTERVAL;\n            createPipe(canvas);\n        }\n        // Move pipes & coins\n        movePipesAndCoins(scale);\n        // Rotate coin\n        coinRotationRef.current += ROTATION_SPEED * scale;\n        if (coinRotationRef.current >= 1) {\n            coinRotationRef.current = 0;\n        }\n        // Collisions\n        if (checkCollisions(canvas)) {\n            gameOverRef.current = true;\n            return;\n        }\n        // Coin collection\n        checkCoinCollection();\n        // Score\n        updateScore();\n    };\n    const draw = (ctx, canvas)=>{\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawBackground(ctx, canvas);\n        drawBird(ctx);\n        drawPipes(ctx);\n        drawCoins(ctx);\n    };\n    const drawStartScreen = (ctx, canvas)=>{\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawBackground(ctx, canvas);\n        ctx.font = \"bold 30px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.fillStyle = \"#ffffff\";\n        ctx.shadowColor = \"black\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"Tap or Press Space to Start\", canvas.width / 2, canvas.height / 2);\n    };\n    const drawGameOverScreen = (ctx, canvas)=>{\n        ctx.fillStyle = \"#ffcc00\";\n        ctx.font = \"bold 50px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.shadowColor = \"black\";\n        ctx.shadowBlur = 10;\n        ctx.fillText(\"Game Over!\", canvas.width / 2, canvas.height / 2 - 40);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = \"bold 30px Arial\";\n        ctx.fillText(\"Tap or Press Space to Restart\", canvas.width / 2, canvas.height / 2 + 20);\n    };\n    const drawBackground = (ctx, canvas)=>{\n        if (backgroundRef.current && backgroundRef.current.complete) {\n            ctx.drawImage(backgroundRef.current, 0, 0, canvas.width, canvas.height);\n        }\n    };\n    const drawBird = (ctx)=>{\n        const currentImage = birdImagesRef.current[currentBirdFrameRef.current];\n        if (currentImage && currentImage.complete) {\n            ctx.drawImage(currentImage, 100, birdYRef.current, BIRD_WIDTH, BIRD_HEIGHT);\n        }\n    };\n    const drawPipes = (ctx)=>{\n        pipesRef.current.forEach((pipe)=>{\n            if (pipeTopRef.current && pipeTopRef.current.complete) {\n                ctx.drawImage(pipeTopRef.current, pipe.x, 0, PIPE_WIDTH, pipe.topHeight);\n            }\n            if (pipeBottomRef.current && pipeBottomRef.current.complete) {\n                ctx.drawImage(pipeBottomRef.current, pipe.x, pipe.bottomY, PIPE_WIDTH, pipe.bottomHeight);\n            }\n        });\n    };\n    const drawCoins = (ctx)=>{\n        if (!coinImageRef.current || !coinImageRef.current.complete) return;\n        const scaleX = Math.abs(Math.cos(coinRotationRef.current * Math.PI * 2));\n        const halfSize = COIN_SIZE / 2;\n        coinsRef.current.forEach((coin)=>{\n            if (!coin.collected) {\n                if (!coinImageRef.current) return;\n                ctx.save();\n                ctx.translate(coin.x + halfSize, coin.y + halfSize);\n                ctx.scale(scaleX, 1);\n                ctx.drawImage(coinImageRef.current, -halfSize, -halfSize, COIN_SIZE, COIN_SIZE);\n                ctx.restore();\n            }\n        });\n    };\n    // ---------------------------------------\n    // 10. GAME LOGIC FUNCTIONS\n    // ---------------------------------------\n    const createPipe = (canvas)=>{\n        const pipeHeight = Math.random() * (canvas.height - PIPE_SPACING - 100) + 50;\n        const bottomY = pipeHeight + PIPE_SPACING;\n        pipesRef.current.push({\n            x: canvas.width,\n            topHeight: pipeHeight,\n            bottomY,\n            bottomHeight: canvas.height - bottomY,\n            scored: false\n        });\n        // 50% chance for coin\n        if (Math.random() > 0.5) {\n            coinsRef.current.push({\n                x: canvas.width + PIPE_WIDTH / 2 - COIN_SIZE / 2,\n                y: pipeHeight + PIPE_SPACING / 2 - COIN_SIZE / 2,\n                width: COIN_SIZE,\n                height: COIN_SIZE,\n                collected: false\n            });\n        }\n    };\n    const movePipesAndCoins = (scale)=>{\n        // Move pipes to the left\n        pipesRef.current.forEach((pipe)=>{\n            pipe.x -= HORIZONTAL_SPEED * scale;\n        });\n        pipesRef.current = pipesRef.current.filter((p)=>p.x + PIPE_WIDTH > 0);\n        // Move coins\n        coinsRef.current.forEach((coin)=>{\n            coin.x -= HORIZONTAL_SPEED * scale;\n        });\n        coinsRef.current = coinsRef.current.filter((c)=>c.x + c.width > 0 && !c.collected);\n    };\n    const checkCollisions = (canvas)=>{\n        // Bird vs boundaries\n        if (birdYRef.current < 0 || birdYRef.current + BIRD_HEIGHT > canvas.height) {\n            return true;\n        }\n        const birdLeft = 100;\n        const birdRight = birdLeft + BIRD_WIDTH;\n        const birdTop = birdYRef.current;\n        const birdBottom = birdYRef.current + BIRD_HEIGHT;\n        // Bird vs pipes\n        for (const pipe of pipesRef.current){\n            const withinPipeX = birdRight > pipe.x && birdLeft < pipe.x + PIPE_WIDTH;\n            const withinPipeY = birdTop < pipe.topHeight || birdBottom > pipe.bottomY;\n            if (withinPipeX && withinPipeY) {\n                return true;\n            }\n        }\n        return false;\n    };\n    const checkCoinCollection = ()=>{\n        const birdLeft = 100;\n        const birdRight = birdLeft + BIRD_WIDTH;\n        const birdTop = birdYRef.current;\n        const birdBottom = birdYRef.current + BIRD_HEIGHT;\n        coinsRef.current.forEach((coin)=>{\n            if (!coin.collected) {\n                const coinLeft = coin.x;\n                const coinRight = coin.x + coin.width;\n                const coinTop = coin.y;\n                const coinBottom = coin.y + coin.height;\n                if (birdRight > coinLeft && birdLeft < coinRight && birdBottom > coinTop && birdTop < coinBottom) {\n                    // Collect coin\n                    coin.collected = true;\n                    setCurrentScore((prevScore)=>{\n                        const newScore = prevScore + 5;\n                        setHighScore((prevHighScore)=>Math.max(prevHighScore, newScore));\n                        return newScore;\n                    });\n                }\n            }\n        });\n    };\n    const updateScore = ()=>{\n        pipesRef.current.forEach((pipe)=>{\n            // Score +1 for passing each pipe, only once\n            if (!pipe.scored && pipe.x + PIPE_WIDTH < 100) {\n                pipe.scored = true;\n                setCurrentScore((prevScore)=>{\n                    const newScore = prevScore + 1;\n                    setHighScore((prevHighScore)=>{\n                        const updatedHighScore = Math.max(prevHighScore, newScore);\n                        if (true) {\n                            localStorage.setItem(\"highScore\", updatedHighScore.toString());\n                        }\n                        return updatedHighScore;\n                    });\n                    return newScore;\n                });\n            }\n        });\n    };\n    // ---------------------------------------\n    // 11. CLEANUP FUNCTION\n    // ---------------------------------------\n    // Already handled in useEffect return function\n    // ---------------------------------------\n    // 12. RETURN GAME STATS AND INPUT Handler\n    // ---------------------------------------\n    return {\n        highScore,\n        currentScore,\n        handleUserInput: flap\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/useFlappyBirdGame.ts\n"));

/***/ })

});