"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/walletActions.ts":
/*!*********************************!*\
  !*** ./public/walletActions.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedeemerVariant: () => (/* binding */ RedeemerVariant),\n/* harmony export */   calculateCountdown: () => (/* binding */ calculateCountdown),\n/* harmony export */   claimTokens: () => (/* binding */ claimTokens),\n/* harmony export */   send: () => (/* binding */ send)\n/* harmony export */ });\n/* harmony import */ var _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @hyperionbt/helios */ \"./node_modules/@hyperionbt/helios/helios.js\");\n/* harmony import */ var _common_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/network */ \"./common/network.ts\");\n/* harmony import */ var _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/GameReward.hl */ \"./contracts/GameReward.hl\");\n/* harmony import */ var _helios_lang_ledger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @helios-lang/ledger */ \"./node_modules/@helios-lang/ledger/src/index.js\");\n/* harmony import */ var _helios_lang_uplc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @helios-lang/uplc */ \"./node_modules/@helios-lang/uplc/src/index.js\");\n/* harmony import */ var _contracts_GameRewardCbor1_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contracts/GameRewardCbor1.json */ \"./contracts/GameRewardCbor1.json\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n // Ensure correct path to your contract\n\n\nconst optimize = false;\nfunction calculateCountdown() {\n    const TimeBeginContract = 1736073600000;\n    const TimeNow = Math.floor(Date.now());\n    const CYCLE_DURATION = 600 // 10 minutes \n    ;\n    const offsetInMs = 89680;\n    const elapsedTime = TimeNow - offsetInMs - TimeBeginContract;\n    const elapsedTimeInSeconds = elapsedTime / 1000;\n    const positionInCycle = elapsedTimeInSeconds % CYCLE_DURATION;\n    return positionInCycle;\n}\nvar RedeemerVariant = /*#__PURE__*/ function(RedeemerVariant) {\n    RedeemerVariant[RedeemerVariant[\"Cancel\"] = 0] = \"Cancel\";\n    RedeemerVariant[RedeemerVariant[\"Claim\"] = 1] = \"Claim\"; // Corresponds to 'Claim' variant\n    return RedeemerVariant;\n}({});\n // { cborHex: \"4e4d010000...\" }\nasync function claimTokens(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw new Error(\"Wallet API is not set.\");\n    }\n    try {\n        var _benefitiary_pubKeyHash;\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Cip30Wallet(walletAPI);\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.WalletHelper(cip30WalletAPI);\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.NetworkParams(networkParamsJson);\n        const policyId = \"5b9006e5051296968c46a3e9206f2f02c8157ff041871290960d6adf\";\n        const name = Buffer.from(\"BERT\", 'utf8').toString('hex');\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.AssetClass({\n            mph: mph,\n            tokenName: name\n        });\n        console.log(assetClass);\n        const utxos = await walletHelper.getUtxos();\n        console.log(\"utxos\", utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const cborHex = _contracts_GameRewardCbor1_json__WEBPACK_IMPORTED_MODULE_4__.cborHex;\n        //const compiledProgram = Program.new(cborHex); \n        //const uplcProgram = new NativeScript(cborHex as unknown as number);\n        const uplcProgram = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.UplcProgram.fromCbor(cborHex);\n        const validatorHash = uplcProgram.validatorHash;\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Address.fromHashes(validatorHash, null, false);\n        //console.log(\"compiledProgram\" + compiledProgram);\n        console.log(\"benefitiary.pubKeyHash?.hex!)\" + ((_benefitiary_pubKeyHash = benefitiary.pubKeyHash) === null || _benefitiary_pubKeyHash === void 0 ? void 0 : _benefitiary_pubKeyHash.hex));\n        //const gameReward = new GameReward();\n        // Compile the vesting validator\n        //const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        //const scriptAddress = Address.fromBech32(\"addr1wygd2q56lc098fn0yrx9n6ngrjfjylxefxqztas6fffz7dsl4y9kn\")\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        console.dir(scriptAddress, {\n            depth: null\n        });\n        console.log(\"benefitiary.pubKeyHash!.hex\", benefitiary.pubKeyHash.hex);\n        const gameDatum = createGameDatum(benefitiary.pubKeyHash.hex);\n        console.log(\"gameDatum\", gameDatum);\n        // console.log(\"Datum\",  Datum.inline(\n        //   new ConstrData(0, [ new ByteArrayData(hexToBytes(benefitiary.pubKeyHash?.hex!)) ])\n        // ))\n        // console.log(\"Datum2\",new ConstrData(0, [ new ByteArrayData(hexToBytes(benefitiary.pubKeyHash?.hex!)) ]))\n        // const gameDatum = new gameReward.types.Datum(\n        //   benefitiary.pubKeyHash,\n        // )\n        // Create the vesting claim redeemer\n        //  const redeember = (new gameReward.types.Redeemer.Claim(benefitiary.pubKeyHash))\n        //  ._toUplcData();\n        // // Convert the hex string to bytes\n        // const recepiantBytes = hexToBytes(benefitiary.hex);\n        // // Create a PubKeyHash object\n        // const recepiantPkh = makePubKeyHash(recepiantBytes);\n        // Convert PubKeyHash to UplcData\n        //const dataRedeemer = recepiantPkh.toUplcData();\n        //const claimRedeemer = makeTxSpendingRedeemer(RedeemerVariant.Claim, dataRedeemer).toCbor();\n        const claimRedeemer = createClaimRedeemer(benefitiary.pubKeyHash.hex);\n        console.log(\"claimRedeemer\", claimRedeemer);\n        console.log(\"benefitiary.pubKeyHash\", benefitiary.pubKeyHash);\n        console.log(\"benefitiary.pubKeyHash!.hex\", benefitiary.pubKeyHash.hex);\n        //console.log(filteredUtxos);\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Tx();\n        const sortedUtxos = await fetchUtxos(scriptAddress.toBech32());\n        console.log(\"sortedUtxos\", sortedUtxos);\n        const CLAIM_WINDOW = 20; // 20 seconds \n        const positionInCycle = calculateCountdown();\n        console.log(\"positionInCycle\" + positionInCycle);\n        window.onerror = ()=>positionInCycle < CLAIM_WINDOW;\n        //const dynamicReward = calculateReward(Number(remainingSupply), TOTAL_SUPPLY, BASE_REWARD);\n        const testValueBenefitiary = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Assets([\n            [\n                assetClass,\n                BigInt(sortedUtxos.dynamicReward)\n            ]\n        ]);\n        //const totalAmountUtxo = getTokenAmountFromUtxos(sortedUtxos.selected, assetClass);\n        const amountToSendBack = BigInt(sortedUtxos.totalAmount) - BigInt(sortedUtxos.dynamicReward);\n        const firstPartToSendBack = amountToSendBack / 2n; // First part is half of the total amount\n        const secondPartToSendBack = amountToSendBack - firstPartToSendBack; // Second part is the remainder\n        console.log(\"First \" + firstPartToSendBack);\n        console.log(\"Sevond \" + secondPartToSendBack);\n        console.log(sortedUtxos.dynamicReward);\n        const valueContract1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Assets([\n            [\n                assetClass,\n                firstPartToSendBack\n            ]\n        ]);\n        const valueContract2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Assets([\n            [\n                assetClass,\n                secondPartToSendBack\n            ]\n        ]);\n        //tx.addInputs(utxos[0]);\n        tx.addInputs(sortedUtxos.selected, claimRedeemer);\n        tx.attachScript(uplcProgram);\n        var userClaimOutput = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.TxOutput(benefitiary, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(undefined, testValueBenefitiary));\n        tx.addOutput(userClaimOutput);\n        //Shiiit, fix. Someone could rediredt the rest of the tokens\n        // const addressStr = \"addr_test1qrarqhmklnhwcw3q0zm6sgm3g3l7pua0y36sql9k5ru8dsucglsked5f5yrcf9e9xgxjgmt7xk52knh8h0dgayc00arqlh7g60\";\n        // const address = Address.fromBech32(addressStr);\n        // tx.addOutput(new TxOutput(\n        //   address,\n        //   new Value(undefined, testValueContract) // The amount being claimed\n        // ));\n        // Calculate total ADA in the selected script inputs\n        let totalAdaInInputs = BigInt(0);\n        sortedUtxos.selected.forEach((utxo)=>{\n            totalAdaInInputs += BigInt(utxo.output.value.lovelace);\n        });\n        // Distribute ADA equally (or as required) among script outputs\n        const adaPerScriptOutput = totalAdaInInputs / 2n; // Assuming two script outputs\\\n        if (amountToSendBack != BigInt(0)) {\n            var scriptUtxo1 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(adaPerScriptOutput, valueContract1), gameDatum);\n            tx.addOutput(scriptUtxo1);\n            var scriptUtxo2 = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(totalAdaInInputs - adaPerScriptOutput, valueContract2), gameDatum);\n            tx.addOutput(scriptUtxo2);\n        }\n        //var inputFees = await walletHelper.pickUtxos(new Value(tokenAmountFees));\n        //tx.addInputs(inputFees[0]);\n        console.log(\"We attatched everything!\");\n        await tx.finalize(networkParams, benefitiary, utxos);\n        console.log(\"dali finalizirahme?\");\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"Dali q signirahme?\");\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        console.error(\"submit tx failed\", err);\n        throw err;\n    }\n}\nasync function send(walletAPI, setIsLoading, setTx) {\n    setIsLoading(true);\n    if (!walletAPI) {\n        throw console.error(\"walletAPI is not set\");\n    }\n    try {\n        const cip30WalletAPI = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Cip30Wallet(walletAPI);\n        // const blockfrost = new BlockFrostIPFS({\n        //   network: network,\n        //   projectId: \"preprodJExO0MAMRgfpXz9Il4IqB2u9ddoylZBT\",\n        // });\n        console.log(\"gmmm\");\n        const walletHelper = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.WalletHelper(cip30WalletAPI);\n        const policyId = \"5b9006e5051296968c46a3e9206f2f02c8157ff041871290960d6adf\";\n        const name = Buffer.from(\"BERT\", 'utf8').toString('hex');\n        const mph = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.MintingPolicyHash.fromHex(policyId);\n        const assetClass = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.AssetClass({\n            mph: mph,\n            tokenName: name // Convert to hex string\n        });\n        console.log(assetClass);\n        const minAda = 1000000; // minimum lovelace to send\n        const minAdaVal = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(BigInt(minAda));\n        const testValueScript = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Assets([\n            [\n                assetClass,\n                BigInt(125550)\n            ]\n        ]);\n        // Get wallet UTXOs\n        const utxos = await walletHelper.pickUtxos(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(undefined, testValueScript));\n        console.log(utxos);\n        // Get change address\n        const benefitiary = await walletHelper.changeAddress;\n        // Load in the vesting validator script (program)\n        const gameReward = new _contracts_GameReward_hl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        // Compile the vesting validator\n        const compiledProgram = gameReward.compile(optimize);\n        console.log(\"Wallet address: \" + benefitiary);\n        const scriptAddress = _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Address.fromHashes(compiledProgram.validatorHash);\n        //remove\n        console.log(scriptAddress.toBech32());\n        console.log(\"Script Address:\" + scriptAddress);\n        // Construct the vesting datum\n        const gameDatum = new gameReward.types.Datum(benefitiary.pubKeyHash);\n        //const redeember = (new gameReward.types.Redeemer.Claim())._toUplcData();\n        const tx = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Tx();\n        tx.addInputs(utxos[0]);\n        tx.addOutput(new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.TxOutput(scriptAddress, new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Value(undefined, testValueScript), _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Datum.inline(gameDatum)));\n        // tx.addOutput(new TxOutput(\n        //   benefitiary,\n        //   minAdaVal,\n        // ));\n        console.log(\"We attatched everything!\");\n        // Read in the network parameter file\n        const networkParamsJson = await (0,_common_network__WEBPACK_IMPORTED_MODULE_0__.getNetworkParams)(_common_network__WEBPACK_IMPORTED_MODULE_0__.network);\n        const networkParams = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.NetworkParams(networkParamsJson);\n        // Send any change back to the buyer\n        await tx.finalize(networkParams, benefitiary, utxos[1]);\n        // Sign the unsigned tx to get the witness\n        const signatures = await cip30WalletAPI.signTx(tx);\n        tx.addSignatures(signatures);\n        console.log(\"signed\");\n        // Submit the signed tx\n        const txHash = await cip30WalletAPI.submitTx(tx);\n        setTx({\n            txId: txHash.hex\n        });\n        setIsLoading(false);\n    } catch (err) {\n        setIsLoading(false);\n        throw console.error(\"submit tx failed\", err);\n    }\n}\nasync function fetchUtxos(scriptAddress) {\n    const response = await fetch(\"/api/getUtxos\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            scriptAddress\n        })\n    });\n    const data = await response.json(); // Raw JSON array from backend\n    // `Convert JSON back to TxInput objects\n    const selectedUtxos = data.selected.map((utxo)=>_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.TxInput.fromFullCbor(utxo));\n    const dynamicReward = BigInt(data.dynamicReward);\n    const totalAmount = BigInt(data.totalAmount);\n    console.log(\"selectedUtxos\" + selectedUtxos);\n    console.log(\"dynamicReward\" + dynamicReward);\n    console.log(\"totalAmount\" + totalAmount);\n    return {\n        selected: selectedUtxos,\n        totalAmount: totalAmount,\n        dynamicReward: dynamicReward\n    };\n}\nfunction createClaimRedeemer(recepiantHashHex) {\n    // Convert hex string to byte array\n    const bytes = (0,_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.hexToBytes)(recepiantHashHex);\n    console.log(\"Redeemer bytes length:\", bytes.length);\n    // Validate the length of PubKeyHash\n    if (bytes.length !== 28) {\n        throw new Error(\"Invalid PubKeyHash length: expected 28 bytes, got \".concat(bytes.length, \" bytes\"));\n    }\n    // Create PubKeyHash object\n    const pkh = (0,_helios_lang_ledger__WEBPACK_IMPORTED_MODULE_2__.makePubKeyHash)(bytes);\n    // Construct Redeemer using makeConstrData with constructor index 1 for Claim\n    const redeemerData = (0,_helios_lang_uplc__WEBPACK_IMPORTED_MODULE_3__.makeConstrData)(1, [\n        pkh.toUplcData()\n    ]); // Note the array brackets\n    return redeemerData;\n}\nfunction createGameDatum(beneficiaryHashHex) {\n    // Convert hex string to byte array\n    const bytes = (0,_hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.hexToBytes)(beneficiaryHashHex);\n    console.log(\"Datum bytes length:\", bytes.length);\n    // Validate the length of PubKeyHash\n    if (bytes.length !== 28) {\n        throw new Error(\"Invalid PubKeyHash length for Datum: expected 28 bytes, got \".concat(bytes.length, \" bytes\"));\n    }\n    // Wrap the byte array in ByteArrayData\n    const byteArrayData = new _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.ByteArrayData(bytes);\n    // Return Datum as ByteArrayData without using ConstrData\n    return _hyperionbt_helios__WEBPACK_IMPORTED_MODULE_5__.Datum.inline(byteArrayData);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UUFDVmhELGFBQWFBO1FBQ2JGLGVBQWVBO0lBQ2pCO0FBQ0Y7QUFHQSxTQUFTVCxvQkFBb0I4RCxnQkFBd0I7SUFDbkQsbUNBQW1DO0lBQ25DLE1BQU1DLFFBQVExSCw4REFBVUEsQ0FBQ3lIO0lBQ3pCakYsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQmlGLE1BQU1DLE1BQU07SUFFbEQsb0NBQW9DO0lBQ3BDLElBQUlELE1BQU1DLE1BQU0sS0FBSyxJQUFJO1FBQ3JCLE1BQU0sSUFBSWxHLE1BQU0scURBQWtFLE9BQWJpRyxNQUFNQyxNQUFNLEVBQUM7SUFDdEY7SUFFQSwyQkFBMkI7SUFDM0IsTUFBTUMsTUFBTXhILG1FQUFjQSxDQUFDc0g7SUFFM0IsNkVBQTZFO0lBQzdFLE1BQU1HLGVBQWV4SCxpRUFBY0EsQ0FBQyxHQUFHO1FBQUN1SCxJQUFJRSxVQUFVO0tBQUcsR0FBRywwQkFBMEI7SUFFdEYsT0FBT0Q7QUFDWDtBQUVBLFNBQVNwRSxnQkFBZ0JzRSxrQkFBMEI7SUFDakQsbUNBQW1DO0lBQ25DLE1BQU1MLFFBQVExSCw4REFBVUEsQ0FBQytIO0lBQ3pCdkYsUUFBUUMsR0FBRyxDQUFDLHVCQUF1QmlGLE1BQU1DLE1BQU07SUFFL0Msb0NBQW9DO0lBQ3BDLElBQUlELE1BQU1DLE1BQU0sS0FBSyxJQUFJO1FBQ3JCLE1BQU0sSUFBSWxHLE1BQU0sK0RBQTRFLE9BQWJpRyxNQUFNQyxNQUFNLEVBQUM7SUFDaEc7SUFFQSx1Q0FBdUM7SUFDdkMsTUFBTUssZ0JBQWdCLElBQUlqSSw2REFBYUEsQ0FBQzJIO0lBRXhDLHlEQUF5RDtJQUN6RCxPQUFPbEkscURBQUtBLENBQUNvSCxNQUFNLENBQUNvQjtBQUN0QiIsInNvdXJjZXMiOlsiRDpcXFVsdGltYXRlLUNhcmRhbm8tU21hcnQtQ29udHJhY3RzXFxGbGFwcHlCaXJkR2FtZVxcaGVsaW9zXFxHYW1lUmV3YXJkXFxwdWJsaWNcXHdhbGxldEFjdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgXHJcbiAgICBOZXR3b3JrUGFyYW1zLFxyXG4gICAgVmFsdWUsXHJcbiAgICBUeE91dHB1dCxcclxuICAgIFR4LFxyXG4gICAgVHhJbnB1dCxcclxuICAgIENpcDMwV2FsbGV0LFxyXG4gICAgRGF0dW0sXHJcbiAgICBBc3NldHMsXHJcbiAgICBXYWxsZXRIZWxwZXIsXHJcbiAgICBNaW50aW5nUG9saWN5SGFzaCxcclxuICAgIFVwbGNQcm9ncmFtLFxyXG4gICAgVXBsY0RhdGFWYWx1ZSxcclxuICAgIEFzc2V0Q2xhc3MsXHJcbiAgICBQdWJLZXlIYXNoLFxyXG4gICAgQWRkcmVzcyxcclxuICAgIENvbnN0ckRhdGEsXHJcbiAgICBVcGxjRGF0YSxcclxuICAgIEJ5dGVBcnJheURhdGEsXHJcbiAgICBoZXhUb0J5dGVzLFxyXG4gIH0gZnJvbSBcIkBoeXBlcmlvbmJ0L2hlbGlvc1wiO1xyXG4gIGltcG9ydCB7IG5ldHdvcmssIGdldE5ldHdvcmtQYXJhbXMgfSBmcm9tICcuLi9jb21tb24vbmV0d29yayc7XHJcbiAgaW1wb3J0IEdhbWVSZXdhcmQgZnJvbSAnLi4vY29udHJhY3RzL0dhbWVSZXdhcmQuaGwnOyAvLyBFbnN1cmUgY29ycmVjdCBwYXRoIHRvIHlvdXIgY29udHJhY3RcclxuICBpbXBvcnQgeyBtYWtlUHViS2V5SGFzaCwgbWFrZVR4U3BlbmRpbmdSZWRlZW1lciB9IGZyb20gXCJAaGVsaW9zLWxhbmcvbGVkZ2VyXCI7XHJcbiAgaW1wb3J0IHsgbWFrZUNvbnN0ckRhdGEgfSBmcm9tIFwiQGhlbGlvcy1sYW5nL3VwbGNcIjtcclxuXHJcbiAgY29uc3Qgb3B0aW1pemUgPSBmYWxzZTtcclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQ291bnRkb3duKCk6IG51bWJlciB7XHJcbiAgXHJcbiAgICBjb25zdCBUaW1lQmVnaW5Db250cmFjdCA9IDE3MzYwNzM2MDAwMDA7XHJcblxyXG4gICAgY29uc3QgVGltZU5vdzogbnVtYmVyID0gTWF0aC5mbG9vcihEYXRlLm5vdygpKTsgXHJcbiAgICBjb25zdCBDWUNMRV9EVVJBVElPTiA9IDYwMCAvLyAxMCBtaW51dGVzIFxyXG4gICAgY29uc3Qgb2Zmc2V0SW5NcyA9IDg5NjgwO1xyXG4gICAgY29uc3QgZWxhcHNlZFRpbWUgPSBUaW1lTm93IC0gKG9mZnNldEluTXMpIC0gVGltZUJlZ2luQ29udHJhY3Q7XHJcbiAgICBjb25zdCBlbGFwc2VkVGltZUluU2Vjb25kcyA9IGVsYXBzZWRUaW1lIC8gMTAwMDtcclxuICAgIGNvbnN0IHBvc2l0aW9uSW5DeWNsZSA9IGVsYXBzZWRUaW1lSW5TZWNvbmRzICUgQ1lDTEVfRFVSQVRJT047XHJcbiAgXHJcbiAgICByZXR1cm4gcG9zaXRpb25JbkN5Y2xlO1xyXG4gIH0gXHJcbiAgXHJcbiAgZXhwb3J0IGVudW0gUmVkZWVtZXJWYXJpYW50IHtcclxuICAgIENhbmNlbCA9IDAsIC8vIENvcnJlc3BvbmRzIHRvICdDYW5jZWwnIHZhcmlhbnRcclxuICAgIENsYWltID0gMSAgIC8vIENvcnJlc3BvbmRzIHRvICdDbGFpbScgdmFyaWFudFxyXG59XHJcblxyXG4gIGltcG9ydCBHQU1FX1JFV0FSRF9DQk9SX0pTT04gZnJvbSAnLi4vY29udHJhY3RzL0dhbWVSZXdhcmRDYm9yMS5qc29uJzsgLy8geyBjYm9ySGV4OiBcIjRlNGQwMTAwMDAuLi5cIiB9XHJcblxyXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGFpbVRva2Vucyh3YWxsZXRBUEk6IGFueSwgc2V0SXNMb2FkaW5nOiAodmFsOiBib29sZWFuKSA9PiB2b2lkLCBzZXRUeDogKHZhbDoge3R4SWQ6IHN0cmluZ30pID0+IHZvaWQpIHtcclxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuXHJcbiAgICBpZiAoIXdhbGxldEFQSSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBBUEkgaXMgbm90IHNldC5cIik7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjaXAzMFdhbGxldEFQSSA9IG5ldyBDaXAzMFdhbGxldCh3YWxsZXRBUEkpO1xyXG5cclxuICAgICAgY29uc3Qgd2FsbGV0SGVscGVyID0gbmV3IFdhbGxldEhlbHBlcihjaXAzMFdhbGxldEFQSSk7XHJcbiAgICAgIC8vIFJlYWQgaW4gdGhlIG5ldHdvcmsgcGFyYW1ldGVyIGZpbGVcclxuICAgICAgY29uc3QgbmV0d29ya1BhcmFtc0pzb24gPSBhd2FpdCBnZXROZXR3b3JrUGFyYW1zKG5ldHdvcmspO1xyXG4gICAgICBjb25zdCBuZXR3b3JrUGFyYW1zID0gbmV3IE5ldHdvcmtQYXJhbXMobmV0d29ya1BhcmFtc0pzb24pO1xyXG5cclxuICAgICAgY29uc3QgcG9saWN5SWQgPSBcIjViOTAwNmU1MDUxMjk2OTY4YzQ2YTNlOTIwNmYyZjAyYzgxNTdmZjA0MTg3MTI5MDk2MGQ2YWRmXCI7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSBCdWZmZXIuZnJvbShcIkJFUlRcIiwgJ3V0ZjgnKS50b1N0cmluZygnaGV4Jyk7XHJcblxyXG4gICAgICBjb25zdCBtcGggPSBNaW50aW5nUG9saWN5SGFzaC5mcm9tSGV4KHBvbGljeUlkKTtcclxuXHJcbiAgICAgIGNvbnN0IGFzc2V0Q2xhc3MgPSBuZXcgQXNzZXRDbGFzcyh7XHJcbiAgICAgICAgbXBoOiBtcGgsIFxyXG4gICAgICAgIHRva2VuTmFtZTogbmFtZVxyXG4gICAgICB9KTsgXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGFzc2V0Q2xhc3MpXHJcblxyXG4gICAgICBjb25zdCB1dHhvcyA9IGF3YWl0IHdhbGxldEhlbHBlci5nZXRVdHhvcygpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcInV0eG9zXCIsICB1dHhvcyk7XHJcblxyXG4gICAgICAvLyBHZXQgY2hhbmdlIGFkZHJlc3NcclxuICAgICAgY29uc3QgYmVuZWZpdGlhcnkgPSBhd2FpdCB3YWxsZXRIZWxwZXIuY2hhbmdlQWRkcmVzcztcclxuICAgICAgLy8gTG9hZCBpbiB0aGUgdmVzdGluZyB2YWxpZGF0b3Igc2NyaXB0IChwcm9ncmFtKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgY2JvckhleCA9IEdBTUVfUkVXQVJEX0NCT1JfSlNPTi5jYm9ySGV4OyBcclxuICAgICAgLy9jb25zdCBjb21waWxlZFByb2dyYW0gPSBQcm9ncmFtLm5ldyhjYm9ySGV4KTsgXHJcbiAgICAgIC8vY29uc3QgdXBsY1Byb2dyYW0gPSBuZXcgTmF0aXZlU2NyaXB0KGNib3JIZXggYXMgdW5rbm93biBhcyBudW1iZXIpO1xyXG4gICAgICBjb25zdCB1cGxjUHJvZ3JhbSA9IFVwbGNQcm9ncmFtLmZyb21DYm9yKGNib3JIZXgpO1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JIYXNoID0gdXBsY1Byb2dyYW0udmFsaWRhdG9ySGFzaDtcclxuICAgICAgY29uc3Qgc2NyaXB0QWRkcmVzcyA9IEFkZHJlc3MuZnJvbUhhc2hlcyh2YWxpZGF0b3JIYXNoLCBudWxsLCBmYWxzZSlcclxuICAgICAgLy9jb25zb2xlLmxvZyhcImNvbXBpbGVkUHJvZ3JhbVwiICsgY29tcGlsZWRQcm9ncmFtKTtcclxuICAgICAgY29uc29sZS5sb2coXCJiZW5lZml0aWFyeS5wdWJLZXlIYXNoPy5oZXghKVwiICsgYmVuZWZpdGlhcnkucHViS2V5SGFzaD8uaGV4ISlcclxuXHJcbiAgICBcclxuICAgICAgLy9jb25zdCBnYW1lUmV3YXJkID0gbmV3IEdhbWVSZXdhcmQoKTtcclxuXHJcbiAgICAgIC8vIENvbXBpbGUgdGhlIHZlc3RpbmcgdmFsaWRhdG9yXHJcbiAgICAgIC8vY29uc3QgY29tcGlsZWRQcm9ncmFtID0gZ2FtZVJld2FyZC5jb21waWxlKG9wdGltaXplKTtcclxuICAgICAgY29uc29sZS5sb2coXCJXYWxsZXQgYWRkcmVzczogXCIgKyBiZW5lZml0aWFyeSlcclxuICAgICAgLy9jb25zdCBzY3JpcHRBZGRyZXNzID0gQWRkcmVzcy5mcm9tQmVjaDMyKFwiYWRkcjF3eWdkMnE1NmxjMDk4Zm4weXJ4OW42bmdyamZqeWx4ZWZ4cXp0YXM2ZmZmejdkc2w0eTlrblwiKVxyXG4gICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKHNjcmlwdEFkZHJlc3MudG9CZWNoMzIoKSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU2NyaXB0IEFkZHJlc3M6XCIgKyBzY3JpcHRBZGRyZXNzKVxyXG4gICAgICBcclxuICAgICAgY29uc29sZS5kaXIoc2NyaXB0QWRkcmVzcywgeyBkZXB0aDogbnVsbCB9KTtcclxuXHJcbiAgXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYmVuZWZpdGlhcnkucHViS2V5SGFzaCEuaGV4XCIsIGJlbmVmaXRpYXJ5LnB1YktleUhhc2ghLmhleClcclxuICAgICAgY29uc3QgZ2FtZURhdHVtID0gY3JlYXRlR2FtZURhdHVtKGJlbmVmaXRpYXJ5LnB1YktleUhhc2ghLmhleCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZURhdHVtXCIsIGdhbWVEYXR1bSlcclxuICAgICAgLy8gY29uc29sZS5sb2coXCJEYXR1bVwiLCAgRGF0dW0uaW5saW5lKFxyXG4gICAgICAvLyAgIG5ldyBDb25zdHJEYXRhKDAsIFsgbmV3IEJ5dGVBcnJheURhdGEoaGV4VG9CeXRlcyhiZW5lZml0aWFyeS5wdWJLZXlIYXNoPy5oZXghKSkgXSlcclxuICAgICAgLy8gKSlcclxuICAgICAgLy8gY29uc29sZS5sb2coXCJEYXR1bTJcIixuZXcgQ29uc3RyRGF0YSgwLCBbIG5ldyBCeXRlQXJyYXlEYXRhKGhleFRvQnl0ZXMoYmVuZWZpdGlhcnkucHViS2V5SGFzaD8uaGV4ISkpIF0pKVxyXG4gICAgICAvLyBjb25zdCBnYW1lRGF0dW0gPSBuZXcgZ2FtZVJld2FyZC50eXBlcy5EYXR1bShcclxuICAgICAgLy8gICBiZW5lZml0aWFyeS5wdWJLZXlIYXNoLFxyXG4gICAgICAvLyApXHJcblxyXG4gICAgICAgLy8gQ3JlYXRlIHRoZSB2ZXN0aW5nIGNsYWltIHJlZGVlbWVyXHJcbiAgICAgIC8vICBjb25zdCByZWRlZW1iZXIgPSAobmV3IGdhbWVSZXdhcmQudHlwZXMuUmVkZWVtZXIuQ2xhaW0oYmVuZWZpdGlhcnkucHViS2V5SGFzaCkpXHJcbiAgICAgIC8vICAuX3RvVXBsY0RhdGEoKTtcclxuXHJcbiAgICAgIFxyXG4gICAgICAvLyAvLyBDb252ZXJ0IHRoZSBoZXggc3RyaW5nIHRvIGJ5dGVzXHJcbiAgICAgIC8vIGNvbnN0IHJlY2VwaWFudEJ5dGVzID0gaGV4VG9CeXRlcyhiZW5lZml0aWFyeS5oZXgpO1xyXG4gICAgICBcclxuICAgICAgLy8gLy8gQ3JlYXRlIGEgUHViS2V5SGFzaCBvYmplY3RcclxuICAgICAgLy8gY29uc3QgcmVjZXBpYW50UGtoID0gbWFrZVB1YktleUhhc2gocmVjZXBpYW50Qnl0ZXMpO1xyXG4gICAgICBcclxuICAgICAgLy8gQ29udmVydCBQdWJLZXlIYXNoIHRvIFVwbGNEYXRhXHJcbiAgICAgIC8vY29uc3QgZGF0YVJlZGVlbWVyID0gcmVjZXBpYW50UGtoLnRvVXBsY0RhdGEoKTtcclxuICAgICAgLy9jb25zdCBjbGFpbVJlZGVlbWVyID0gbWFrZVR4U3BlbmRpbmdSZWRlZW1lcihSZWRlZW1lclZhcmlhbnQuQ2xhaW0sIGRhdGFSZWRlZW1lcikudG9DYm9yKCk7XHJcblxyXG4gICAgICBjb25zdCBjbGFpbVJlZGVlbWVyID0gY3JlYXRlQ2xhaW1SZWRlZW1lcihiZW5lZml0aWFyeS5wdWJLZXlIYXNoIS5oZXgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImNsYWltUmVkZWVtZXJcIiwgY2xhaW1SZWRlZW1lcilcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYmVuZWZpdGlhcnkucHViS2V5SGFzaFwiLCBiZW5lZml0aWFyeS5wdWJLZXlIYXNoKVxyXG4gICAgICBjb25zb2xlLmxvZyhcImJlbmVmaXRpYXJ5LnB1YktleUhhc2ghLmhleFwiLCBiZW5lZml0aWFyeS5wdWJLZXlIYXNoIS5oZXgpXHJcblxyXG4gICAgICAvL2NvbnNvbGUubG9nKGZpbHRlcmVkVXR4b3MpO1xyXG4gICAgICBjb25zdCB0eCA9IG5ldyBUeCgpO1xyXG5cclxuICAgICAgY29uc3Qgc29ydGVkVXR4b3MgPSBhd2FpdCBmZXRjaFV0eG9zKHNjcmlwdEFkZHJlc3MudG9CZWNoMzIoKSlcclxuICAgICAgY29uc29sZS5sb2coXCJzb3J0ZWRVdHhvc1wiLCBzb3J0ZWRVdHhvcylcclxuICAgICAgY29uc3QgQ0xBSU1fV0lORE9XID0gMjA7IC8vIDIwIHNlY29uZHMgXHJcblxyXG4gICAgICBjb25zdCBwb3NpdGlvbkluQ3ljbGUgPSBjYWxjdWxhdGVDb3VudGRvd24oKTtcclxuICAgICAgY29uc29sZS5sb2coXCJwb3NpdGlvbkluQ3ljbGVcIiArIHBvc2l0aW9uSW5DeWNsZSk7XHJcbiAgICAgIHdpbmRvdy5vbmVycm9yID0gKCkgPT4gcG9zaXRpb25JbkN5Y2xlIDwgQ0xBSU1fV0lORE9XO1xyXG4gICAgICAvL2NvbnN0IGR5bmFtaWNSZXdhcmQgPSBjYWxjdWxhdGVSZXdhcmQoTnVtYmVyKHJlbWFpbmluZ1N1cHBseSksIFRPVEFMX1NVUFBMWSwgQkFTRV9SRVdBUkQpO1xyXG4gICAgICBjb25zdCB0ZXN0VmFsdWVCZW5lZml0aWFyeT0gbmV3IEFzc2V0cyhbW2Fzc2V0Q2xhc3MsIEJpZ0ludChzb3J0ZWRVdHhvcy5keW5hbWljUmV3YXJkKV1dKTtcclxuICAgICAgXHJcbiAgICAgIC8vY29uc3QgdG90YWxBbW91bnRVdHhvID0gZ2V0VG9rZW5BbW91bnRGcm9tVXR4b3Moc29ydGVkVXR4b3Muc2VsZWN0ZWQsIGFzc2V0Q2xhc3MpO1xyXG4gICAgICBjb25zdCBhbW91bnRUb1NlbmRCYWNrID0gQmlnSW50KHNvcnRlZFV0eG9zLnRvdGFsQW1vdW50KSAtIEJpZ0ludChzb3J0ZWRVdHhvcy5keW5hbWljUmV3YXJkKTtcclxuXHJcbiAgICAgIGNvbnN0IGZpcnN0UGFydFRvU2VuZEJhY2sgPSBhbW91bnRUb1NlbmRCYWNrIC8gMm47IC8vIEZpcnN0IHBhcnQgaXMgaGFsZiBvZiB0aGUgdG90YWwgYW1vdW50XHJcbiAgICAgIGNvbnN0IHNlY29uZFBhcnRUb1NlbmRCYWNrID0gYW1vdW50VG9TZW5kQmFjayAtIGZpcnN0UGFydFRvU2VuZEJhY2s7IC8vIFNlY29uZCBwYXJ0IGlzIHRoZSByZW1haW5kZXJcclxuICAgICAgY29uc29sZS5sb2coXCJGaXJzdCBcIiArIGZpcnN0UGFydFRvU2VuZEJhY2spXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU2V2b25kIFwiICsgc2Vjb25kUGFydFRvU2VuZEJhY2spXHJcbiAgICAgIGNvbnNvbGUubG9nKHNvcnRlZFV0eG9zLmR5bmFtaWNSZXdhcmQpXHJcblxyXG4gICAgICBjb25zdCB2YWx1ZUNvbnRyYWN0MT0gbmV3IEFzc2V0cyhbW2Fzc2V0Q2xhc3MsIGZpcnN0UGFydFRvU2VuZEJhY2tdXSk7XHJcbiAgICAgIGNvbnN0IHZhbHVlQ29udHJhY3QyPSBuZXcgQXNzZXRzKFtbYXNzZXRDbGFzcywgc2Vjb25kUGFydFRvU2VuZEJhY2tdXSk7XHJcblxyXG4gICAgICAvL3R4LmFkZElucHV0cyh1dHhvc1swXSk7XHJcbiAgICAgIHR4LmFkZElucHV0cyhzb3J0ZWRVdHhvcy5zZWxlY3RlZCwgY2xhaW1SZWRlZW1lcik7XHJcbiAgICAgIHR4LmF0dGFjaFNjcmlwdCh1cGxjUHJvZ3JhbSk7XHJcblxyXG4gICAgICB2YXIgdXNlckNsYWltT3V0cHV0ID0gbmV3IFR4T3V0cHV0KFxyXG4gICAgICAgIGJlbmVmaXRpYXJ5LFxyXG4gICAgICAgIG5ldyBWYWx1ZSh1bmRlZmluZWQsIHRlc3RWYWx1ZUJlbmVmaXRpYXJ5KSk7XHJcblxyXG4gICAgICB0eC5hZGRPdXRwdXQodXNlckNsYWltT3V0cHV0KVxyXG5cclxuICAgIFxyXG4gICAgLy9TaGlpaXQsIGZpeC4gU29tZW9uZSBjb3VsZCByZWRpcmVkdCB0aGUgcmVzdCBvZiB0aGUgdG9rZW5zXHJcbiAgICAvLyBjb25zdCBhZGRyZXNzU3RyID0gXCJhZGRyX3Rlc3QxcXJhcnFobWtsbmh3Y3czcTB6bTZzZ20zZzNsN3B1YTB5MzZzcWw5azVydThkc3VjZ2xza2VkNWY1eXJjZjllOXhneGpnbXQ3eGs1MmtuaDhoMGRnYXljMDBhcnFsaDdnNjBcIjtcclxuICAgIC8vIGNvbnN0IGFkZHJlc3MgPSBBZGRyZXNzLmZyb21CZWNoMzIoYWRkcmVzc1N0cik7XHJcbiAgICAvLyB0eC5hZGRPdXRwdXQobmV3IFR4T3V0cHV0KFxyXG4gICAgLy8gICBhZGRyZXNzLFxyXG4gICAgLy8gICBuZXcgVmFsdWUodW5kZWZpbmVkLCB0ZXN0VmFsdWVDb250cmFjdCkgLy8gVGhlIGFtb3VudCBiZWluZyBjbGFpbWVkXHJcbiAgICAvLyApKTtcclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXRlIHRvdGFsIEFEQSBpbiB0aGUgc2VsZWN0ZWQgc2NyaXB0IGlucHV0c1xyXG4gICAgbGV0IHRvdGFsQWRhSW5JbnB1dHMgPSBCaWdJbnQoMCk7XHJcbiAgICBzb3J0ZWRVdHhvcy5zZWxlY3RlZC5mb3JFYWNoKHV0eG8gPT4ge1xyXG4gICAgICAgIHRvdGFsQWRhSW5JbnB1dHMgKz0gQmlnSW50KHV0eG8ub3V0cHV0LnZhbHVlLmxvdmVsYWNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIERpc3RyaWJ1dGUgQURBIGVxdWFsbHkgKG9yIGFzIHJlcXVpcmVkKSBhbW9uZyBzY3JpcHQgb3V0cHV0c1xyXG4gICAgY29uc3QgYWRhUGVyU2NyaXB0T3V0cHV0ID0gdG90YWxBZGFJbklucHV0cyAvIDJuOyAvLyBBc3N1bWluZyB0d28gc2NyaXB0IG91dHB1dHNcXFxyXG5cclxuICAgIGlmIChhbW91bnRUb1NlbmRCYWNrICE9IEJpZ0ludCgwKSl7XHJcbiAgICAgIHZhciBzY3JpcHRVdHhvMSA9bmV3IFR4T3V0cHV0KFxyXG4gICAgICAgIHNjcmlwdEFkZHJlc3MsXHJcbiAgICAgICAgbmV3IFZhbHVlKGFkYVBlclNjcmlwdE91dHB1dCwgdmFsdWVDb250cmFjdDEpLCAgLy8gUmVtYWluaW5nIHRyZWFzdXJ5IHRva2Vuc1xyXG4gICAgICAgIGdhbWVEYXR1bVxyXG4gICAgICAgKTtcclxuXHJcbiAgICAgICB0eC5hZGRPdXRwdXQoc2NyaXB0VXR4bzEpO1xyXG5cclxuICAgICAgdmFyIHNjcmlwdFV0eG8yID0gbmV3IFR4T3V0cHV0KFxyXG4gICAgICAgIHNjcmlwdEFkZHJlc3MsXHJcbiAgICAgICAgbmV3IFZhbHVlKHRvdGFsQWRhSW5JbnB1dHMgLSBhZGFQZXJTY3JpcHRPdXRwdXQsIHZhbHVlQ29udHJhY3QyKSwgIC8vIFJlbWFpbmluZyB0cmVhc3VyeSB0b2tlbnNcclxuICAgICAgICBnYW1lRGF0dW1cclxuICAgICAgICk7XHJcbiAgICBcclxuICAgICAgIHR4LmFkZE91dHB1dChzY3JpcHRVdHhvMik7XHJcbiAgICB9ICBcclxuXHJcbiAgICAgIC8vdmFyIGlucHV0RmVlcyA9IGF3YWl0IHdhbGxldEhlbHBlci5waWNrVXR4b3MobmV3IFZhbHVlKHRva2VuQW1vdW50RmVlcykpO1xyXG4gICAgICBcclxuICAgICAgLy90eC5hZGRJbnB1dHMoaW5wdXRGZWVzWzBdKTtcclxuICAgICAgY29uc29sZS5sb2coXCJXZSBhdHRhdGNoZWQgZXZlcnl0aGluZyFcIilcclxuXHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCB0eC5maW5hbGl6ZShuZXR3b3JrUGFyYW1zLCBiZW5lZml0aWFyeSwgdXR4b3MpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImRhbGkgZmluYWxpemlyYWhtZT9cIilcclxuICAgICAgLy8gU2lnbiB0aGUgdW5zaWduZWQgdHggdG8gZ2V0IHRoZSB3aXRuZXNzXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBhd2FpdCBjaXAzMFdhbGxldEFQSS5zaWduVHgodHgpO1xyXG4gICAgICB0eC5hZGRTaWduYXR1cmVzKHNpZ25hdHVyZXMpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkRhbGkgcSBzaWduaXJhaG1lP1wiKVxyXG5cclxuICAgICAgY29uc3QgdHhIYXNoID0gYXdhaXQgY2lwMzBXYWxsZXRBUEkuc3VibWl0VHgodHgpO1xyXG5cclxuICAgICAgc2V0VHgoeyB0eElkOiB0eEhhc2guaGV4IH0pO1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcInN1Ym1pdCB0eCBmYWlsZWRcIiwgZXJyKTtcclxuICAgICAgICB0aHJvdyBlcnI7IFxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZCh3YWxsZXRBUEk6IGFueSwgc2V0SXNMb2FkaW5nOiAodmFsOiBib29sZWFuKSA9PiB2b2lkLCBzZXRUeDogKHZhbDoge3R4SWQ6IHN0cmluZ30pID0+IHZvaWQpIHtcclxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuXHJcbiAgICBpZiAoIXdhbGxldEFQSSkge1xyXG4gICAgICB0aHJvdyBjb25zb2xlLmVycm9yKFwid2FsbGV0QVBJIGlzIG5vdCBzZXRcIik7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjaXAzMFdhbGxldEFQSSA9IG5ldyBDaXAzMFdhbGxldCh3YWxsZXRBUEkpO1xyXG4gICAgICAvLyBjb25zdCBibG9ja2Zyb3N0ID0gbmV3IEJsb2NrRnJvc3RJUEZTKHtcclxuICAgICAgLy8gICBuZXR3b3JrOiBuZXR3b3JrLFxyXG4gICAgICAvLyAgIHByb2plY3RJZDogXCJwcmVwcm9kSkV4TzBNQU1SZ2ZwWHo5SWw0SXFCMnU5ZGRveWxaQlRcIixcclxuICAgICAgLy8gfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZ21tbVwiKVxyXG5cclxuICAgICAgY29uc3Qgd2FsbGV0SGVscGVyID0gbmV3IFdhbGxldEhlbHBlcihjaXAzMFdhbGxldEFQSSk7XHJcblxyXG4gICAgICBjb25zdCBwb2xpY3lJZCA9IFwiNWI5MDA2ZTUwNTEyOTY5NjhjNDZhM2U5MjA2ZjJmMDJjODE1N2ZmMDQxODcxMjkwOTYwZDZhZGZcIjtcclxuICAgICAgY29uc3QgbmFtZSA9IEJ1ZmZlci5mcm9tKFwiQkVSVFwiLCAndXRmOCcpLnRvU3RyaW5nKCdoZXgnKTtcclxuXHJcbiAgICAgIGNvbnN0IG1waCA9IE1pbnRpbmdQb2xpY3lIYXNoLmZyb21IZXgocG9saWN5SWQpO1xyXG5cclxuICAgICAgY29uc3QgYXNzZXRDbGFzcyA9IG5ldyBBc3NldENsYXNzKHtcclxuICAgICAgICBtcGg6IG1waCwgLy8gWW91ciBwb2xpY3kgaGFzaFxyXG4gICAgICAgIHRva2VuTmFtZTogbmFtZS8vIENvbnZlcnQgdG8gaGV4IHN0cmluZ1xyXG4gICAgICB9KTsgXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGFzc2V0Q2xhc3MpXHJcblxyXG4gICAgICBjb25zdCBtaW5BZGEgOiBudW1iZXIgPSAxXzAwMF8wMDA7IC8vIG1pbmltdW0gbG92ZWxhY2UgdG8gc2VuZFxyXG4gICAgICBjb25zdCBtaW5BZGFWYWwgPSBuZXcgVmFsdWUoQmlnSW50KG1pbkFkYSkpO1xyXG5cclxuICAgICAgY29uc3QgdGVzdFZhbHVlU2NyaXB0ID0gbmV3IEFzc2V0cyhbW2Fzc2V0Q2xhc3MsIEJpZ0ludCgxMjU1NTApXV0pO1xyXG5cclxuICAgICAgLy8gR2V0IHdhbGxldCBVVFhPc1xyXG4gICAgICBjb25zdCB1dHhvcyA9IGF3YWl0IHdhbGxldEhlbHBlci5waWNrVXR4b3MobmV3IFZhbHVlKHVuZGVmaW5lZCwgdGVzdFZhbHVlU2NyaXB0KSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHV0eG9zKTtcclxuXHJcbiAgICAgIC8vIEdldCBjaGFuZ2UgYWRkcmVzc1xyXG4gICAgICBjb25zdCBiZW5lZml0aWFyeSA9IGF3YWl0IHdhbGxldEhlbHBlci5jaGFuZ2VBZGRyZXNzO1xyXG4gICAgICAvLyBMb2FkIGluIHRoZSB2ZXN0aW5nIHZhbGlkYXRvciBzY3JpcHQgKHByb2dyYW0pXHJcblxyXG4gICAgICBjb25zdCBnYW1lUmV3YXJkID0gbmV3IEdhbWVSZXdhcmQoKTtcclxuXHJcbiAgICAgIC8vIENvbXBpbGUgdGhlIHZlc3RpbmcgdmFsaWRhdG9yXHJcbiAgICAgIGNvbnN0IGNvbXBpbGVkUHJvZ3JhbSA9IGdhbWVSZXdhcmQuY29tcGlsZShvcHRpbWl6ZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiV2FsbGV0IGFkZHJlc3M6IFwiICsgYmVuZWZpdGlhcnkpXHJcbiAgICAgIGNvbnN0IHNjcmlwdEFkZHJlc3MgPSBBZGRyZXNzLmZyb21IYXNoZXMoY29tcGlsZWRQcm9ncmFtLnZhbGlkYXRvckhhc2gpXHJcbiAgICBcclxuICAgICAgICAvL3JlbW92ZVxyXG4gICAgICBjb25zb2xlLmxvZyhzY3JpcHRBZGRyZXNzLnRvQmVjaDMyKCkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlNjcmlwdCBBZGRyZXNzOlwiICsgc2NyaXB0QWRkcmVzcylcclxuICAgICAgXHJcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgdmVzdGluZyBkYXR1bVxyXG4gICAgICBjb25zdCBnYW1lRGF0dW0gPSBuZXcgZ2FtZVJld2FyZC50eXBlcy5EYXR1bShcclxuICAgICAgICBiZW5lZml0aWFyeS5wdWJLZXlIYXNoLFxyXG4gICAgICApXHJcbiAgICBcclxuICAgIC8vY29uc3QgcmVkZWVtYmVyID0gKG5ldyBnYW1lUmV3YXJkLnR5cGVzLlJlZGVlbWVyLkNsYWltKCkpLl90b1VwbGNEYXRhKCk7XHJcbiAgICBcclxuICAgICAgY29uc3QgdHggPSBuZXcgVHgoKTtcclxuICAgICAgdHguYWRkSW5wdXRzKHV0eG9zWzBdKTtcclxuICAgICAgdHguYWRkT3V0cHV0KG5ldyBUeE91dHB1dChcclxuICAgICAgICBzY3JpcHRBZGRyZXNzLFxyXG4gICAgICAgIG5ldyBWYWx1ZSh1bmRlZmluZWQsIHRlc3RWYWx1ZVNjcmlwdCksXHJcbiAgICAgICAgRGF0dW0uaW5saW5lKGdhbWVEYXR1bSlcclxuICAgICAgKSk7XHJcblxyXG4gICAgICAvLyB0eC5hZGRPdXRwdXQobmV3IFR4T3V0cHV0KFxyXG4gICAgICAvLyAgIGJlbmVmaXRpYXJ5LFxyXG4gICAgICAvLyAgIG1pbkFkYVZhbCxcclxuICAgICAgLy8gKSk7XHJcbiAgICBcclxuICAgICAgY29uc29sZS5sb2coXCJXZSBhdHRhdGNoZWQgZXZlcnl0aGluZyFcIilcclxuXHJcbiAgICAgIC8vIFJlYWQgaW4gdGhlIG5ldHdvcmsgcGFyYW1ldGVyIGZpbGVcclxuICAgICAgY29uc3QgbmV0d29ya1BhcmFtc0pzb24gPSBhd2FpdCBnZXROZXR3b3JrUGFyYW1zKG5ldHdvcmspO1xyXG4gICAgICBjb25zdCBuZXR3b3JrUGFyYW1zID0gbmV3IE5ldHdvcmtQYXJhbXMobmV0d29ya1BhcmFtc0pzb24pO1xyXG5cclxuICAgICAgLy8gU2VuZCBhbnkgY2hhbmdlIGJhY2sgdG8gdGhlIGJ1eWVyXHJcbiAgICAgIGF3YWl0IHR4LmZpbmFsaXplKG5ldHdvcmtQYXJhbXMsIGJlbmVmaXRpYXJ5LCB1dHhvc1sxXSk7XHJcblxyXG4gICAgICAvLyBTaWduIHRoZSB1bnNpZ25lZCB0eCB0byBnZXQgdGhlIHdpdG5lc3NcclxuICAgICAgY29uc3Qgc2lnbmF0dXJlcyA9IGF3YWl0IGNpcDMwV2FsbGV0QVBJLnNpZ25UeCh0eCk7XHJcbiAgICAgIHR4LmFkZFNpZ25hdHVyZXMoc2lnbmF0dXJlcyk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhcInNpZ25lZFwiKTtcclxuICAgICAgLy8gU3VibWl0IHRoZSBzaWduZWQgdHhcclxuICAgICAgY29uc3QgdHhIYXNoID0gYXdhaXQgY2lwMzBXYWxsZXRBUEkuc3VibWl0VHgodHgpO1xyXG5cclxuICAgICAgc2V0VHgoeyB0eElkOiB0eEhhc2guaGV4IH0pO1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcihcInN1Ym1pdCB0eCBmYWlsZWRcIiwgZXJyKTtcclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICBhc3luYyBmdW5jdGlvbiBmZXRjaFV0eG9zKHNjcmlwdEFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8eyBzZWxlY3RlZDogVHhJbnB1dFtdOyB0b3RhbEFtb3VudDogYmlnaW50LCBkeW5hbWljUmV3YXJkOiBiaWdpbnQgfT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9nZXRVdHhvc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHNjcmlwdEFkZHJlc3N9KSxcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsgLy8gUmF3IEpTT04gYXJyYXkgZnJvbSBiYWNrZW5kXHJcbiAgXHJcbiAgICAvLyBgQ29udmVydCBKU09OIGJhY2sgdG8gVHhJbnB1dCBvYmplY3RzXHJcbiAgICBjb25zdCBzZWxlY3RlZFV0eG9zID0gZGF0YS5zZWxlY3RlZC5tYXAoKHV0eG86IGFueSkgPT4gVHhJbnB1dC5mcm9tRnVsbENib3IodXR4bykpO1xyXG4gICAgY29uc3QgZHluYW1pY1Jld2FyZDogYmlnaW50ID0gQmlnSW50KGRhdGEuZHluYW1pY1Jld2FyZCk7XHJcbiAgICBjb25zdCB0b3RhbEFtb3VudDogYmlnaW50ID0gQmlnSW50KGRhdGEudG90YWxBbW91bnQpO1xyXG4gICAgY29uc29sZS5sb2coXCJzZWxlY3RlZFV0eG9zXCIrIHNlbGVjdGVkVXR4b3MpO1xyXG4gICAgY29uc29sZS5sb2coXCJkeW5hbWljUmV3YXJkXCIgKyBkeW5hbWljUmV3YXJkKTtcclxuICAgIGNvbnNvbGUubG9nKFwidG90YWxBbW91bnRcIisgdG90YWxBbW91bnQpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZFV0eG9zLFxyXG4gICAgICB0b3RhbEFtb3VudDogdG90YWxBbW91bnQsXHJcbiAgICAgIGR5bmFtaWNSZXdhcmQ6IGR5bmFtaWNSZXdhcmQsXHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQ2xhaW1SZWRlZW1lcihyZWNlcGlhbnRIYXNoSGV4OiBzdHJpbmcpOiBDb25zdHJEYXRhIHtcclxuICAgIC8vIENvbnZlcnQgaGV4IHN0cmluZyB0byBieXRlIGFycmF5XHJcbiAgICBjb25zdCBieXRlcyA9IGhleFRvQnl0ZXMocmVjZXBpYW50SGFzaEhleCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIlJlZGVlbWVyIGJ5dGVzIGxlbmd0aDpcIiwgYnl0ZXMubGVuZ3RoKTtcclxuICAgIFxyXG4gICAgLy8gVmFsaWRhdGUgdGhlIGxlbmd0aCBvZiBQdWJLZXlIYXNoXHJcbiAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSAyOCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBQdWJLZXlIYXNoIGxlbmd0aDogZXhwZWN0ZWQgMjggYnl0ZXMsIGdvdCAke2J5dGVzLmxlbmd0aH0gYnl0ZXNgKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIFB1YktleUhhc2ggb2JqZWN0XHJcbiAgICBjb25zdCBwa2ggPSBtYWtlUHViS2V5SGFzaChieXRlcyk7XHJcbiAgICBcclxuICAgIC8vIENvbnN0cnVjdCBSZWRlZW1lciB1c2luZyBtYWtlQ29uc3RyRGF0YSB3aXRoIGNvbnN0cnVjdG9yIGluZGV4IDEgZm9yIENsYWltXHJcbiAgICBjb25zdCByZWRlZW1lckRhdGEgPSBtYWtlQ29uc3RyRGF0YSgxLCBbcGtoLnRvVXBsY0RhdGEoKV0pOyAvLyBOb3RlIHRoZSBhcnJheSBicmFja2V0c1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmVkZWVtZXJEYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVHYW1lRGF0dW0oYmVuZWZpY2lhcnlIYXNoSGV4OiBzdHJpbmcpOiBEYXR1bSB7XHJcbiAgLy8gQ29udmVydCBoZXggc3RyaW5nIHRvIGJ5dGUgYXJyYXlcclxuICBjb25zdCBieXRlcyA9IGhleFRvQnl0ZXMoYmVuZWZpY2lhcnlIYXNoSGV4KTtcclxuICBjb25zb2xlLmxvZyhcIkRhdHVtIGJ5dGVzIGxlbmd0aDpcIiwgYnl0ZXMubGVuZ3RoKTtcclxuICBcclxuICAvLyBWYWxpZGF0ZSB0aGUgbGVuZ3RoIG9mIFB1YktleUhhc2hcclxuICBpZiAoYnl0ZXMubGVuZ3RoICE9PSAyOCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgUHViS2V5SGFzaCBsZW5ndGggZm9yIERhdHVtOiBleHBlY3RlZCAyOCBieXRlcywgZ290ICR7Ynl0ZXMubGVuZ3RofSBieXRlc2ApO1xyXG4gIH1cclxuICBcclxuICAvLyBXcmFwIHRoZSBieXRlIGFycmF5IGluIEJ5dGVBcnJheURhdGFcclxuICBjb25zdCBieXRlQXJyYXlEYXRhID0gbmV3IEJ5dGVBcnJheURhdGEoYnl0ZXMpO1xyXG4gIFxyXG4gIC8vIFJldHVybiBEYXR1bSBhcyBCeXRlQXJyYXlEYXRhIHdpdGhvdXQgdXNpbmcgQ29uc3RyRGF0YVxyXG4gIHJldHVybiBEYXR1bS5pbmxpbmUoYnl0ZUFycmF5RGF0YSk7XHJcbn0iXSwibmFtZXMiOlsiTmV0d29ya1BhcmFtcyIsIlZhbHVlIiwiVHhPdXRwdXQiLCJUeCIsIlR4SW5wdXQiLCJDaXAzMFdhbGxldCIsIkRhdHVtIiwiQXNzZXRzIiwiV2FsbGV0SGVscGVyIiwiTWludGluZ1BvbGljeUhhc2giLCJVcGxjUHJvZ3JhbSIsIkFzc2V0Q2xhc3MiLCJBZGRyZXNzIiwiQnl0ZUFycmF5RGF0YSIsImhleFRvQnl0ZXMiLCJuZXR3b3JrIiwiZ2V0TmV0d29ya1BhcmFtcyIsIkdhbWVSZXdhcmQiLCJtYWtlUHViS2V5SGFzaCIsIm1ha2VDb25zdHJEYXRhIiwib3B0aW1pemUiLCJjYWxjdWxhdGVDb3VudGRvd24iLCJUaW1lQmVnaW5Db250cmFjdCIsIlRpbWVOb3ciLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiQ1lDTEVfRFVSQVRJT04iLCJvZmZzZXRJbk1zIiwiZWxhcHNlZFRpbWUiLCJlbGFwc2VkVGltZUluU2Vjb25kcyIsInBvc2l0aW9uSW5DeWNsZSIsIlJlZGVlbWVyVmFyaWFudCIsIkdBTUVfUkVXQVJEX0NCT1JfSlNPTiIsImNsYWltVG9rZW5zIiwid2FsbGV0QVBJIiwic2V0SXNMb2FkaW5nIiwic2V0VHgiLCJFcnJvciIsImJlbmVmaXRpYXJ5IiwiY2lwMzBXYWxsZXRBUEkiLCJ3YWxsZXRIZWxwZXIiLCJuZXR3b3JrUGFyYW1zSnNvbiIsIm5ldHdvcmtQYXJhbXMiLCJwb2xpY3lJZCIsIm5hbWUiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJtcGgiLCJmcm9tSGV4IiwiYXNzZXRDbGFzcyIsInRva2VuTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJ1dHhvcyIsImdldFV0eG9zIiwiY2hhbmdlQWRkcmVzcyIsImNib3JIZXgiLCJ1cGxjUHJvZ3JhbSIsImZyb21DYm9yIiwidmFsaWRhdG9ySGFzaCIsInNjcmlwdEFkZHJlc3MiLCJmcm9tSGFzaGVzIiwicHViS2V5SGFzaCIsImhleCIsInRvQmVjaDMyIiwiZGlyIiwiZGVwdGgiLCJnYW1lRGF0dW0iLCJjcmVhdGVHYW1lRGF0dW0iLCJjbGFpbVJlZGVlbWVyIiwiY3JlYXRlQ2xhaW1SZWRlZW1lciIsInR4Iiwic29ydGVkVXR4b3MiLCJmZXRjaFV0eG9zIiwiQ0xBSU1fV0lORE9XIiwid2luZG93Iiwib25lcnJvciIsInRlc3RWYWx1ZUJlbmVmaXRpYXJ5IiwiQmlnSW50IiwiZHluYW1pY1Jld2FyZCIsImFtb3VudFRvU2VuZEJhY2siLCJ0b3RhbEFtb3VudCIsImZpcnN0UGFydFRvU2VuZEJhY2siLCJzZWNvbmRQYXJ0VG9TZW5kQmFjayIsInZhbHVlQ29udHJhY3QxIiwidmFsdWVDb250cmFjdDIiLCJhZGRJbnB1dHMiLCJzZWxlY3RlZCIsImF0dGFjaFNjcmlwdCIsInVzZXJDbGFpbU91dHB1dCIsInVuZGVmaW5lZCIsImFkZE91dHB1dCIsInRvdGFsQWRhSW5JbnB1dHMiLCJmb3JFYWNoIiwidXR4byIsIm91dHB1dCIsInZhbHVlIiwibG92ZWxhY2UiLCJhZGFQZXJTY3JpcHRPdXRwdXQiLCJzY3JpcHRVdHhvMSIsInNjcmlwdFV0eG8yIiwiZmluYWxpemUiLCJzaWduYXR1cmVzIiwic2lnblR4IiwiYWRkU2lnbmF0dXJlcyIsInR4SGFzaCIsInN1Ym1pdFR4IiwidHhJZCIsImVyciIsImVycm9yIiwic2VuZCIsIm1pbkFkYSIsIm1pbkFkYVZhbCIsInRlc3RWYWx1ZVNjcmlwdCIsInBpY2tVdHhvcyIsImdhbWVSZXdhcmQiLCJjb21waWxlZFByb2dyYW0iLCJjb21waWxlIiwidHlwZXMiLCJpbmxpbmUiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImpzb24iLCJzZWxlY3RlZFV0eG9zIiwibWFwIiwiZnJvbUZ1bGxDYm9yIiwicmVjZXBpYW50SGFzaEhleCIsImJ5dGVzIiwibGVuZ3RoIiwicGtoIiwicmVkZWVtZXJEYXRhIiwidG9VcGxjRGF0YSIsImJlbmVmaWNpYXJ5SGFzaEhleCIsImJ5dGVBcnJheURhdGEiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/walletActions.ts\n"));

/***/ })

});