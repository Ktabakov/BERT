"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./public/useFlappyBirdGame.ts":
/*!*************************************!*\
  !*** ./public/useFlappyBirdGame.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFlappyBirdGame: function() { return /* binding */ useFlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/** Constants / configuration */ const CANVAS_WIDTH = 360;\nconst CANVAS_HEIGHT = 640;\nconst BIRD_X = 80; // Bird's fixed X position\nconst BIRD_SIZE = 50; // Bird width/height\nconst GRAVITY = 0.25; // Bird falls each frame\nconst FLAP = -7.5; // Bird jump velocity\nconst PIPE_GAP = 160; // Vertical gap\nconst PIPE_WIDTH = 90; // Pipe width\nconst PIPE_SPEED = 2; // Movement speed\nconst PIPE_SPAWN_INTERVAL = 100; // frames: ~1.66s @60fps\n/** \r\n * Assets you have: redbird-upflap.png, midflap, downflap, \r\n * background-day.png, TopTiny.png, BottomTiny.png, CoinTiny.png\r\n * We'll keep the coin logic optional if you want, but let's simplify for now.\r\n */ function useFlappyBirdGame(canvasRef, isPaused, autoStart) {\n    const requestIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Stateful scores\n    const [highScore, setHighScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [currentScore, setCurrentScore] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Bird position + velocity\n    const birdYRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const birdVelocityRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // Pipe array\n    const pipesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    // Track frames so we know when to spawn\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    // References for game over + started\n    const gameOverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const gameStartedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // Bird images\n    const birdImages = [];\n    let backgroundImg;\n    let pipeTopImg;\n    let pipeBotImg;\n    if (true) {\n        // Bird frames (optional: up-mid-down)\n        const birdUp = new Image();\n        birdUp.src = \"/assets/redbird-upflap.png\";\n        const birdMid = new Image();\n        birdMid.src = \"/assets/redbird-midflap.png\";\n        const birdDown = new Image();\n        birdDown.src = \"/assets/redbird-downflap.png\";\n        birdImages.push(birdUp, birdMid, birdDown);\n        backgroundImg = new Image();\n        backgroundImg.src = \"/assets/background-day.png\";\n        pipeTopImg = new Image();\n        pipeTopImg.src = \"/assets/TopTiny.png\";\n        pipeBotImg = new Image();\n        pipeBotImg.src = \"/assets/BottomTiny.png\";\n    }\n    // Current bird frame index (0=up,1=mid,2=down)\n    const currentBirdFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(1);\n    // On mount, load high score\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const saved = localStorage.getItem(\"highScore\");\n        if (saved) setHighScore(parseInt(saved, 10));\n    }, []);\n    // The main effect that sets up + runs the game\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Initialize canvas size\n        canvas.width = CANVAS_WIDTH;\n        canvas.height = CANVAS_HEIGHT;\n        // 1) Reset function\n        function resetGame() {\n            birdYRef.current = CANVAS_HEIGHT / 3;\n            birdVelocityRef.current = 0;\n            pipesRef.current = [];\n            setCurrentScore(0);\n            gameOverRef.current = false;\n            gameStartedRef.current = false;\n            frameRef.current = 0;\n            currentBirdFrameRef.current = 1; // mid flap\n        }\n        // 2) Start the game\n        function startGame() {\n            resetGame();\n            gameStartedRef.current = true;\n            requestIdRef.current = requestAnimationFrame(loop);\n        }\n        // 3) KeyDown: space => flap or restart\n        function handleKeyDown(e) {\n            if (e.key === \" \") {\n                if (!gameStartedRef.current && !gameOverRef.current) {\n                    startGame();\n                } else if (gameOverRef.current) {\n                    // restart\n                    startGame();\n                } else {\n                    // flap\n                    birdVelocityRef.current = FLAP;\n                    flapAnimation();\n                }\n            }\n        }\n        window.addEventListener(\"keydown\", handleKeyDown);\n        // 4) Adjust on resize if you want\n        function handleResize() {\n            if (!canvas) return;\n            if (!ctx) return;\n            canvas.width = CANVAS_WIDTH;\n            canvas.height = CANVAS_HEIGHT;\n            if (!gameStartedRef.current && !gameOverRef.current) {\n                drawStartScreen(ctx);\n            }\n        }\n        window.addEventListener(\"resize\", handleResize);\n        // 5) Initialization\n        drawStartScreen(ctx);\n        // 6) The loop\n        function loop(timestamp) {\n            if (!ctx) return;\n            if (isPaused || !gameStartedRef.current) {\n                // If paused, just schedule the next frame\n                requestIdRef.current = requestAnimationFrame(loop);\n                return;\n            }\n            update();\n            draw(ctx);\n            if (!gameOverRef.current) {\n                requestIdRef.current = requestAnimationFrame(loop);\n            } else {\n                drawGameOverScreen(ctx);\n            }\n        }\n        // 7) Update logic\n        function update() {\n            frameRef.current++;\n            // Bird gravity\n            birdVelocityRef.current += GRAVITY;\n            birdYRef.current += birdVelocityRef.current;\n            // Spawn pipes every PIPE_SPAWN_INTERVAL frames\n            if (frameRef.current % PIPE_SPAWN_INTERVAL === 0) {\n                spawnPipe();\n            }\n            // Move pipes\n            for (const pipe of pipesRef.current){\n                pipe.x -= PIPE_SPEED;\n            }\n            // Remove offscreen\n            pipesRef.current = pipesRef.current.filter((p)=>p.x + PIPE_WIDTH > 0);\n            // Collision check\n            if (checkCollision()) {\n                gameOverRef.current = true;\n            }\n            // Scoring\n            for (const pipe of pipesRef.current){\n                if (!pipe.scored && pipe.x + PIPE_WIDTH < BIRD_X) {\n                    // +1 score\n                    setCurrentScore((prev)=>{\n                        const newScore = prev + 1;\n                        setHighScore((prevHigh)=>{\n                            const best = Math.max(prevHigh, newScore);\n                            localStorage.setItem(\"highScore\", best.toString());\n                            return best;\n                        });\n                        return newScore;\n                    });\n                    pipe.scored = true;\n                }\n            }\n        }\n        // 8) Draw\n        function draw(ctx) {\n            ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n            // draw background\n            if (backgroundImg.complete) {\n                ctx.drawImage(backgroundImg, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n            }\n            // draw pipes\n            for (const pipe of pipesRef.current){\n                const gapY = pipe.gapY;\n                const topHeight = gapY;\n                const bottomY = gapY + PIPE_GAP;\n                // top\n                ctx.drawImage(pipeTopImg, pipe.x, topHeight - pipeTopImg.height, PIPE_WIDTH, pipeTopImg.height);\n                // bottom\n                ctx.drawImage(pipeBotImg, pipe.x, bottomY, PIPE_WIDTH, pipeBotImg.height);\n            }\n            // draw bird\n            const currentBird = birdImages[currentBirdFrameRef.current] || birdImages[1];\n            if (currentBird.complete) {\n                ctx.drawImage(currentBird, BIRD_X, birdYRef.current, BIRD_SIZE, BIRD_SIZE);\n            }\n        }\n        // 9) Start screen\n        function drawStartScreen(ctx) {\n            ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n            // background\n            if (backgroundImg.complete) {\n                ctx.drawImage(backgroundImg, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n            }\n            ctx.fillStyle = \"white\";\n            ctx.font = \"bold 24px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Press Space or Tap\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n        }\n        // 10) Game Over screen\n        function drawGameOverScreen(ctx) {\n            ctx.fillStyle = \"#ff3333\";\n            ctx.font = \"bold 36px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Game Over!\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 - 40);\n            ctx.fillStyle = \"white\";\n            ctx.font = \"bold 20px Arial\";\n            ctx.fillText(\"Press Space or Tap to Restart\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n        }\n        // 11) Spawn pipe\n        function spawnPipe() {\n            const gapY = Math.random() * (CANVAS_HEIGHT - PIPE_GAP - 100) + 50;\n            pipesRef.current.push({\n                x: CANVAS_WIDTH,\n                gapY,\n                scored: false\n            });\n        }\n        // 12) Collision check\n        function checkCollision() {\n            // bird outside canvas?\n            if (birdYRef.current < 0 || birdYRef.current + BIRD_SIZE > CANVAS_HEIGHT) {\n                return true;\n            }\n            // pipe collision\n            for (const pipe of pipesRef.current){\n                const topPipeBottom = pipe.gapY;\n                const bottomPipeTop = pipe.gapY + PIPE_GAP;\n                const birdRight = BIRD_X + BIRD_SIZE;\n                const pipeRight = pipe.x + PIPE_WIDTH;\n                // If horizontally overlapping\n                if (birdRight > pipe.x && BIRD_X < pipeRight) {\n                    // if bird is above gap or below gap\n                    if (birdYRef.current < topPipeBottom || birdYRef.current + BIRD_SIZE > bottomPipeTop) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        // 13) Bird flap animation\n        function flapAnimation() {\n            // Quick 3-frame cycle\n            currentBirdFrameRef.current = 0; // up\n            setTimeout(()=>{\n                currentBirdFrameRef.current = 1; // mid\n                setTimeout(()=>{\n                    currentBirdFrameRef.current = 2; // down\n                    setTimeout(()=>{\n                        currentBirdFrameRef.current = 1; // mid\n                    }, 150);\n                }, 150);\n            }, 150);\n        }\n        // 14) Cleanup\n        return ()=>{\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"resize\", handleResize);\n            if (requestIdRef.current) cancelAnimationFrame(requestIdRef.current);\n        };\n    }, [\n        canvasRef,\n        isPaused,\n        autoStart\n    ]);\n    // We'll return a stable function for mobile clicks\n    const handleUserInput = ()=>{\n        // We'll dispatch a \"keydown\" event with key: \" \"\n        const spaceEvent = new KeyboardEvent(\"keydown\", {\n            key: \" \"\n        });\n        window.dispatchEvent(spaceEvent);\n    };\n    return {\n        highScore,\n        currentScore,\n        handleUserInput\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/useFlappyBirdGame.ts\n"));

/***/ })

});